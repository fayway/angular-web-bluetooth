var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/AWBOptions.html",[0,1.344,1,2.004]],["body/interfaces/AWBOptions.html",[0,1.638,1,3.584,2,2.761,3,0.463,4,0.463,5,0.406,6,0.877,7,0.463,8,2.443,9,0.406,10,1.336,11,0.911,12,3.584,13,3.851,14,0.523,15,0.035,16,0.99,17,3.407,18,4.046,19,3.186,20,0.653,21,4.046,22,2.761,23,2.079,24,3.186,25,2.48,26,3.186,27,1.751,28,2.28,29,3.186,30,0.614,31,3.053,32,0.889,33,2.403,34,2.761,35,2.51,36,3.186,37,3.407,38,3.186,39,2.443,40,0.106,41,2.28,42,1.638,43,3.186,44,1.977,45,3.053,46,3.101,47,3.186,48,2.443,49,2.443,50,0.021,51,0.026,52,0.021]],["title/components/AppComponent.html",[53,0.863,54,1.124]],["body/components/AppComponent.html",[3,0.516,4,0.516,5,0.452,15,0.034,16,0.728,20,0.728,30,0.452,40,0.119,50,0.023,51,0.028,52,0.023,53,1.541,54,2.089,55,2.439,56,2.202,57,2.202,58,3.549,59,2.202,60,3.212,61,2.226,62,2.223,63,2.684,64,1.824,65,2.684,66,2.439,67,2.202,68,3.014,69,2.202,70,0.797,71,2.202,72,1.526,73,1.667,74,2.202,75,1.526,76,2.202,77,1.526,78,2.202,79,1.526,80,2.202,81,1.526,82,1.824,83,2.202,84,2.202]],["title/modules/AppModule.html",[85,1.796,86,1.796]],["body/modules/AppModule.html",[3,0.354,4,0.354,5,0.31,7,0.354,12,1.869,15,0.035,16,1.076,17,2.596,20,0.5,23,2.16,25,2.269,27,1.8,30,0.31,32,0.623,33,1.999,39,2.596,40,0.081,41,2.489,44,2.608,45,2.326,46,2.596,49,2.596,50,0.016,51,0.022,52,0.016,54,2.154,64,1.253,72,1.965,75,1.965,77,1.965,79,1.965,81,1.965,85,1.675,86,3.566,87,1.675,88,1.869,89,3.89,90,3.89,91,2.438,92,2.438,93,2.438,94,2.438,95,2.438,96,3.386,97,2.438,98,1.869,99,2.113,100,4.073,101,2.933,102,4.073,103,2.933,104,4.073,105,3.386,106,2.933,107,4.073,108,2.933,109,4.073,110,2.933,111,4.073,112,2.933,113,2.933,114,4.073,115,2.933,116,4.073,117,2.933,118,4.073,119,2.933,120,4.073,121,2.933,122,2.933,123,4.073,124,1.513,125,1.513,126,4.073,127,2.933,128,4.073,129,1.513,130,1.675,131,1.374,132,2.933,133,1.456,134,1.675,135,2.933,136,2.933,137,2.933,138,2.933,139,2.933,140,2.933,141,2.113,142,2.113,143,2.933,144,1.827,145,2.934,146,3.89,147,4.57,148,2.438,149,3.37,150,2.438,151,2.438,152,2.438,153,2.438,154,1.049]],["title/classes/AppPage.html",[40,0.087,155,2.265]],["body/classes/AppPage.html",[3,0.544,4,0.544,5,0.476,9,0.476,15,0.034,16,0.767,30,0.476,32,0.822,40,0.125,50,0.024,51,0.029,52,0.024,62,1.922,66,2.108,129,2.321,155,3.869,156,2.321,157,3.74,158,0.916,159,5.948,160,5.948,161,0.916,162,4.499,163,0.916,164,5.128,165,4.499,166,4.499,167,4.499,168,4.499,169,3.241,170,4.499]],["title/components/BatteryLevelComponent.html",[53,0.863,72,1.124]],["body/components/BatteryLevelComponent.html",[3,0.24,4,0.24,5,0.21,7,0.24,9,0.21,10,0.84,11,0.636,14,0.779,15,0.035,16,0.772,20,0.338,27,1.483,30,0.21,32,0.304,40,0.055,42,2.044,50,0.011,51,0.016,52,0.011,53,1.024,54,0.71,55,1.433,56,1.024,57,1.024,59,1.024,60,2.655,61,1.84,63,1.578,64,0.848,65,1.578,66,1.433,67,1.024,68,2.163,69,1.024,70,0.693,71,1.024,72,1.499,73,1.637,74,1.024,75,0.71,76,1.024,77,0.71,78,1.024,79,0.71,80,1.024,81,0.71,82,0.848,83,1.024,84,1.024,124,1.024,125,1.024,130,1.133,131,0.93,133,1.888,134,1.133,158,0.521,161,1.016,163,0.85,169,2.688,171,2.131,172,4.98,173,1.65,174,1.307,175,2.131,176,2.131,177,2.131,178,2.378,179,3.049,180,4.784,181,3.732,182,3.803,183,3.732,184,3.732,185,3.446,186,3.446,187,3.102,188,4.39,189,4.39,190,3.732,191,3.446,192,3.446,193,2.688,194,3.732,195,2.688,196,3.732,197,2.378,198,3.732,199,3.732,200,2.688,201,2.688,202,2.688,203,3.732,204,3.102,205,1.431,206,3.102,207,3.732,208,2.378,209,3.732,210,1.729,211,3.262,212,3.732,213,3.732,214,2.378,215,2.586,216,2.378,217,2.131,218,1.499,219,4.193,220,1.747,221,2.394,222,2.394,223,2.394,224,1.949,225,1.747,226,1.358,227,0.917,228,1.265,229,2.586,230,1.985,231,0.705,232,1.985,233,1.251,234,1.985,235,1.747,236,1.136,237,1.985,238,1.594,239,1.985,240,1.985,241,1.985,242,1.949,243,2.336,244,1.985,245,1.195,246,1.619,247,1.949,248,1.985,249,3.102,250,1.985,251,1.985,252,1.985,253,2.846,254,1.985,255,4.193,256,1.985,257,1.093,258,2.203,259,2.203,260,2.203,261,2.203,262,2.203,263,1.985,264,1.985,265,1.985,266,3.765,267,1.985,268,1.985,269,0.93,270,1.985,271,0.93,272,1.265,273,1.985,274,1.265,275,1.265,276,3.059,277,3.059,278,1.949,279,1.949,280,1.747,281,1.985,282,1.985,283,1.985,284,3.059,285,1.265,286,3.732,287,1.985,288,1.925,289,1.024,290,1.985,291,1.985,292,1.133,293,1.265,294,1.985,295,1.265,296,1.265,297,3.059,298,1.747,299,1.133,300,1.133,301,1.265]],["title/injectables/BleService.html",[302,0.72,303,2.265]],["body/injectables/BleService.html",[3,0.432,4,0.432,5,0.378,7,0.432,9,0.378,10,1.277,11,0.793,14,0.776,15,0.035,16,0.882,20,0.609,23,2.427,30,0.378,32,0.792,35,2.4,40,0.099,50,0.019,51,0.025,52,0.019,61,1.959,62,1.527,70,0.792,130,2.041,131,1.675,158,0.793,161,1.025,163,0.968,205,1.425,210,1.524,227,1.072,231,0.878,233,1.167,236,1.298,243,2.4,269,2.567,302,1.065,303,3.351,304,1.675,305,2.575,306,2.424,307,5.173,308,2.965,309,3.946,310,4.555,311,2.972,312,4.653,313,4.653,314,4.195,315,3.575,316,3.575,317,3.575,318,3.575,319,3.575,320,3.575,321,2.278,322,2.278,323,2.965,324,1.817,325,2.972,326,1.527,327,1.844,328,1.844,329,2.575,330,2.575,331,2.575,332,2.575,333,1.675,334,3.575,335,2.575,336,2.972,337,4.653,338,2.575,339,3.575,340,3.575,341,2.041,342,2.575]],["title/injectables/BrowserWebBluetooth.html",[25,1.344,302,0.72]],["body/injectables/BrowserWebBluetooth.html",[3,0.51,4,0.51,5,0.447,6,1.332,7,0.703,9,0.447,10,1.418,11,0.719,14,0.576,15,0.034,16,0.719,20,0.719,25,2.208,30,0.447,32,0.646,33,1.803,35,2.177,40,0.117,50,0.023,51,0.028,52,0.023,61,1.996,70,0.646,129,2.177,131,1.977,158,0.881,161,0.952,163,0.719,164,4.296,227,1.675,231,0.797,302,1.183,304,1.977,306,2.617,338,3.722,343,3.508,344,4.296,345,5.167,346,5.167,347,4.643,348,4.22,349,4.22,350,4.22,351,4.22,352,3.508,353,4.22,354,4.22,355,4.22,356,3.508,357,4.22,358,4.22]],["title/injectables/ConsoleLoggerService.html",[27,1.03,302,0.72]],["body/injectables/ConsoleLoggerService.html",[0,1.685,3,0.477,4,0.477,5,0.417,6,1.301,7,0.687,9,0.417,11,0.924,14,0.74,15,0.035,16,0.672,20,0.672,27,1.622,28,1.848,30,0.573,40,0.138,50,0.021,51,0.027,52,0.021,62,2.117,70,0.829,158,0.845,161,0.924,163,0.924,174,2.117,231,1.023,233,1.499,236,1.359,238,2.117,285,3.158,302,1.24,304,1.848,328,2.556,359,2.513,360,3.569,361,3.902,362,3.944,363,4.304,364,3.902,365,3.944,366,3.902,367,3.944,368,3.094,369,2.841,370,2.841,371,2.841,372,2.841,373,2.841,374,2.841]],["title/components/DashboardComponent.html",[53,0.863,75,1.124]],["body/components/DashboardComponent.html",[3,0.287,4,0.287,5,0.251,7,0.423,9,0.37,10,0.961,11,0.709,14,0.699,15,0.035,16,0.834,20,0.404,30,0.251,32,0.536,40,0.066,50,0.013,51,0.019,52,0.013,53,1.141,54,0.848,55,1.64,56,1.224,57,1.224,59,1.224,60,2.803,61,2.017,63,1.224,64,1.014,65,1.805,66,1.64,67,1.224,68,2.367,69,1.224,70,0.749,71,1.224,72,0.848,73,1.624,74,1.224,75,1.64,76,1.224,77,0.848,78,1.224,79,0.848,80,1.224,81,0.848,82,1.776,83,1.224,84,1.224,124,1.224,125,1.224,133,1.749,158,0.596,161,0.975,163,0.873,169,1.709,171,1.355,174,1.495,175,2.374,176,2.374,177,2.62,182,1.709,185,1.709,186,1.709,191,2.994,192,2.52,193,2.994,195,2.52,200,2.52,201,1.709,202,1.709,205,0.595,210,1.676,215,2.794,217,2.374,218,2.109,220,1.998,221,2.62,222,2.62,223,2.62,225,1.998,226,1.247,227,1.05,229,2.794,231,0.785,233,1.228,235,1.998,236,1.043,238,1.495,249,1.973,253,2.374,257,1.486,266,1.973,269,1.112,271,1.112,280,1.355,292,1.355,298,1.998,299,1.355,300,1.355,321,1.512,322,1.512,323,1.512,324,1.999,341,1.998,356,1.973,375,1.973,376,4.589,377,3.499,378,4.157,379,3.499,380,3.499,381,2.145,382,2.52,383,2.373,384,2.373,385,2.373,386,2.373,387,2.373,388,2.373,389,2.373,390,3.499,391,2.373,392,2.373,393,2.373,394,2.373,395,2.373,396,1.973,397,3.499,398,2.373,399,2.373,400,3.499,401,3.499,402,2.909,403,1.709,404,2.373,405,2.373,406,1.973,407,2.373,408,2.909,409,3.499,410,5.643,411,5.643,412,3.222,413,5.643,414,5.435,415,1.998,416,2.52,417,2.23,418,2.373,419,2.373,420,2.373,421,1.973,422,2.373,423,3.305,424,3.688,425,2.373,426,2.373,427,2.373,428,2.373,429,1.512,430,1.709,431,2.373,432,2.373,433,3.499,434,4.589,435,1.512,436,2.909,437,2.373,438,2.373,439,4.157,440,2.373,441,2.373]],["title/injectables/DashboardService.html",[133,1.124,302,0.72]],["body/injectables/DashboardService.html",[3,0.223,4,0.223,5,0.196,7,0.223,9,0.196,10,0.794,11,0.747,13,1.331,14,0.706,15,0.035,16,0.688,20,0.315,23,1.872,27,1.434,30,0.196,32,0.86,40,0.051,50,0.01,51,0.016,52,0.01,61,1.442,62,0.79,70,0.711,73,1.393,82,1.524,130,1.055,131,0.866,133,1.034,144,2.168,154,1.736,158,0.493,161,0.918,163,0.828,177,2.036,205,1.409,210,1.434,211,3.155,226,1.21,227,0.554,231,0.827,233,0.464,236,0.895,243,1.493,245,2.138,246,0.661,247,2.273,257,1.957,258,2.569,259,2.569,260,2.569,261,2.569,262,2.569,271,0.866,302,0.662,304,0.866,306,1.671,308,2.273,309,2.906,311,1.537,314,2.569,321,1.178,322,1.178,323,3.896,324,2.302,325,1.537,326,2.4,327,0.953,328,0.953,329,1.331,330,1.331,331,1.331,332,1.331,333,0.866,335,1.331,341,2.036,342,1.331,382,3.155,396,1.537,402,1.537,403,1.331,406,2.406,415,2.036,416,2.569,417,2.273,442,1.331,443,2.894,444,2.894,445,2.894,446,2.894,447,1.848,448,1.848,449,1.848,450,2.894,451,1.848,452,2.894,453,1.848,454,2.894,455,2.894,456,1.848,457,1.848,458,2.894,459,1.848,460,2.894,461,5.474,462,4.646,463,4.296,464,4.646,465,3.566,466,2.965,467,2.569,468,3.323,469,3.323,470,3.323,471,3.323,472,2.961,473,3.862,474,3.566,475,3.862,476,3.566,477,2.569,478,2.569,479,2.569,480,1.848,481,1.331,482,1.537,483,1.848,484,1.848,485,2.894,486,1.848,487,1.848,488,1.848,489,1.848,490,1.537,491,1.537,492,2.894,493,3.566,494,1.848,495,1.537,496,1.537,497,1.848,498,2.894,499,1.848,500,1.537,501,0.953,502,1.537,503,1.848,504,1.537,505,1.848,506,1.848,507,1.537,508,1.848,509,1.848,510,1.848,511,1.848,512,1.848,513,1.848,514,1.848,515,2.894,516,1.848,517,1.848]],["title/classes/FakeBluetoothDevice.html",[40,0.087,518,1.623]],["body/classes/FakeBluetoothDevice.html",[3,0.305,4,0.305,5,0.267,6,1.31,7,0.692,9,0.267,10,1.377,11,0.624,14,0.715,15,0.035,30,0.5,32,0.801,40,0.131,50,0.014,51,0.02,52,0.014,70,0.826,144,1.683,154,0.902,156,1.302,158,0.624,161,0.961,163,0.806,205,1.081,210,1.845,218,1.689,226,1.098,227,1.292,231,0.691,233,1.259,236,1.496,245,1.846,246,0.902,257,1.309,288,2.222,289,1.302,306,2.351,324,0.986,326,2.236,327,1.889,333,1.716,381,1.889,412,2.865,501,1.889,518,1.889,519,1.441,520,2.46,521,3.012,522,3.012,523,3.044,524,2.865,525,2.524,526,2.524,527,2.524,528,3.662,529,3.012,530,3.012,531,2.524,532,2.746,533,3.335,534,3.335,535,2.524,536,2.524,537,2.524,538,2.524,539,3.012,540,2.746,541,2.746,542,2.46,543,1.609,544,2.746,545,2.222,546,1.609,547,1.609,548,2.333,549,1.609,550,2.333,551,1.302,552,1.564,553,1.609,554,2.988,555,2.222,556,1.609,557,2.333,558,1.609,559,1.609,560,1.609,561,1.609,562,1.609,563,2.333,564,1.609,565,2.333,566,2.333,567,2.333,568,1.609,569,1.609,570,1.609,571,2.333,572,1.302,573,1.716,574,1.609,575,1.609,576,1.609,577,1.609,578,1.609,579,1.609,580,1.609,581,2.091,582,3.012,583,2.46,584,2.746,585,1.609,586,1.609,587,2.333,588,1.609,589,1.609,590,1.609,591,1.609,592,1.609]],["title/classes/FakeBluetoothRemoteGATTCharacteristic.html",[40,0.087,573,1.474]],["body/classes/FakeBluetoothRemoteGATTCharacteristic.html",[3,0.29,4,0.29,5,0.254,6,1.341,7,0.708,9,0.254,10,1.527,11,0.713,14,0.772,15,0.035,30,0.488,31,2.013,32,0.786,40,0.128,50,0.013,51,0.019,52,0.013,70,0.706,144,1.633,154,0.857,156,1.236,158,0.601,161,0.989,163,0.786,205,1.289,210,1.609,218,0.857,226,1.057,227,1.254,231,0.789,233,1.233,236,1.367,245,2.074,246,0.857,257,1.26,288,2.157,289,1.236,306,2.489,324,1.633,326,2.479,327,1.818,333,1.652,381,2.65,412,2.013,501,1.236,518,1.236,519,1.368,520,1.368,521,1.527,522,2.938,523,2.93,524,2.805,529,2.665,530,2.665,532,2.665,533,3.274,534,3.274,539,2.938,540,2.665,541,2.665,542,2.388,543,1.527,544,2.665,545,2.157,546,1.527,547,1.527,548,2.246,549,1.527,550,2.246,551,1.236,552,1.506,553,1.527,554,3.176,555,2.378,556,1.527,557,2.246,558,1.527,559,1.527,560,1.527,561,1.527,562,1.527,563,2.246,564,1.527,565,2.246,566,2.246,567,2.246,568,1.527,569,1.527,570,1.527,571,2.246,572,1.236,573,1.959,574,1.527,575,1.527,576,1.527,577,1.527,578,1.527,579,1.527,580,1.527,581,2.805,582,3.473,583,3.033,584,2.938,585,1.527,586,1.527,587,2.246,588,1.527,589,2.938,590,1.527,591,2.246,592,1.527,593,3.525,594,1.992,595,2.396,596,2.93,597,2.396,598,2.396,599,2.396,600,2.396,601,2.396,602,2.396,603,2.396,604,2.396,605,2.396,606,2.396,607,2.396]],["title/classes/FakeBluetoothRemoteGATTServer.html",[40,0.087,551,1.623]],["body/classes/FakeBluetoothRemoteGATTServer.html",[3,0.306,4,0.306,5,0.268,6,1.291,7,0.681,9,0.268,10,1.379,11,0.806,14,0.756,15,0.035,30,0.501,31,1.445,32,0.802,40,0.131,50,0.014,51,0.02,52,0.014,70,0.769,144,1.685,154,0.905,156,1.305,158,0.625,161,0.943,163,0.806,205,1.187,210,1.847,218,1.542,226,1.506,227,1.294,231,0.893,233,1.082,236,1.314,245,1.848,246,1.311,257,1.872,288,2.225,289,2.225,306,2.022,324,0.988,326,2.238,327,1.892,333,1.719,381,1.892,412,2.868,501,1.305,518,1.305,519,1.445,520,1.445,521,1.612,522,2.337,524,2.094,529,2.749,530,2.749,532,2.337,533,3.015,534,3.015,539,3.015,540,2.749,541,2.749,542,2.463,543,1.612,544,2.749,545,2.225,546,1.612,547,1.612,548,2.337,549,1.612,550,2.337,551,1.892,552,1.843,553,3.2,554,3.085,555,2.225,556,1.612,557,2.337,558,1.612,559,1.612,560,2.337,561,1.612,562,2.337,563,2.337,564,1.612,565,2.337,566,2.337,567,2.337,568,1.612,569,2.337,570,1.612,571,2.749,572,1.305,573,1.719,574,1.612,575,1.612,576,1.612,577,1.612,578,1.612,579,1.612,580,1.612,581,2.094,582,3.015,583,2.463,584,2.749,585,1.612,586,1.612,587,2.337,588,1.612,589,1.612,590,1.612,591,1.612,592,1.612,596,2.104,608,3.668,609,3.668,610,2.53,611,2.749,612,3.668,613,3.668,614,2.53,615,2.53,616,2.53,617,2.53,618,2.104]],["title/classes/FakeBluetoothRemoteGATTService.html",[40,0.087,555,1.623]],["body/classes/FakeBluetoothRemoteGATTService.html",[3,0.318,4,0.318,5,0.279,6,1.252,7,0.661,9,0.279,10,1.401,11,0.752,14,0.747,15,0.035,30,0.51,32,0.813,40,0.134,50,0.014,51,0.02,52,0.014,70,0.738,144,1.724,154,0.942,156,1.359,158,0.644,161,0.905,163,0.644,205,0.947,210,1.915,218,0.942,226,1.592,227,1.324,231,0.833,233,0.661,236,1.332,245,2.184,257,1.35,288,2.277,289,1.359,306,2.068,324,1.029,326,2.269,327,1.948,333,1.769,381,1.948,412,2.156,501,1.359,518,1.359,519,1.504,520,1.504,521,1.679,522,2.406,524,2.156,529,2.812,530,2.812,532,2.406,533,3.072,534,3.072,539,3.072,540,2.812,541,2.812,542,2.52,543,1.679,544,2.812,545,2.277,546,1.679,547,1.679,548,2.406,549,1.679,550,2.406,551,1.359,552,1.613,553,1.679,554,3.3,555,2.486,556,1.679,557,2.406,558,1.679,559,1.679,560,1.679,561,1.679,562,1.679,563,2.406,564,1.679,565,2.406,566,2.406,567,2.406,568,1.679,569,1.679,570,1.679,571,2.406,572,2.632,573,1.769,574,1.679,575,1.679,576,2.406,577,1.679,578,2.406,579,1.679,580,1.679,581,2.156,582,3.072,583,2.52,584,2.812,585,1.679,586,1.679,587,2.406,588,1.679,589,1.679,590,1.679,591,1.679,592,1.679,594,2.19,611,2.812,618,2.19,619,3.776,620,3.776,621,2.635,622,2.635,623,2.635,624,2.635,625,2.635,626,2.635]],["title/components/HumidityComponent.html",[53,0.863,77,1.124]],["body/components/HumidityComponent.html",[3,0.281,4,0.281,5,0.246,9,0.246,10,0.947,11,0.701,14,0.788,15,0.035,16,0.827,20,0.397,30,0.246,32,0.356,33,1.474,40,0.065,42,2.309,50,0.012,51,0.019,52,0.012,53,1.128,54,0.832,55,1.616,56,1.2,57,1.2,59,1.2,60,2.788,61,1.932,63,1.779,64,0.994,65,1.779,66,1.616,67,1.2,68,2.345,69,1.2,70,0.743,71,1.2,72,0.832,73,0.909,74,1.2,75,0.832,76,1.2,77,1.625,78,1.2,79,0.832,80,1.2,81,0.832,82,0.994,83,1.2,84,1.2,124,1.2,125,1.2,133,1.973,134,1.329,144,0.909,154,1.469,158,0.588,161,1.029,163,0.897,171,2.347,174,1.474,175,2.347,176,2.347,178,2.619,179,2.619,197,2.619,205,1.218,208,2.619,210,1.665,214,2.619,215,2.772,216,2.619,217,2.347,218,1.625,220,1.97,221,2.595,222,2.595,223,2.595,224,2.198,225,1.97,226,1.233,227,1.035,228,1.483,229,2.772,231,0.776,233,1.32,235,1.97,236,1.031,238,1.756,242,2.198,243,2.504,245,1.347,246,1.233,253,2.772,257,1.233,269,1.09,271,1.09,272,1.483,274,1.483,275,1.483,278,2.198,279,2.198,280,1.97,292,1.329,293,1.483,295,1.483,296,1.483,298,1.97,299,1.329,300,1.329,301,1.483,329,1.676,330,1.676,331,2.484,415,1.329,417,2.619,421,1.935,423,2.96,429,1.483,430,1.676,435,2.619,468,2.595,469,2.595,470,2.595,471,2.595,472,2.198,479,2.484,552,0.994,627,1.935,628,3.779,629,3.417,630,3.417,631,3.417,632,3.417,633,3.779,634,2.327,635,2.327,636,2.327,637,2.327,638,2.327,639,2.327,640,2.327,641,2.327,642,2.327,643,3.417,644,2.327,645,3.417,646,1.935,647,2.868,648,2.327,649,2.327,650,3.779,651,2.327,652,2.327,653,2.327,654,2.327,655,2.327,656,2.327,657,1.935,658,1.676,659,1.935,660,3.45,661,3.45,662,1.935,663,1.935,664,1.935,665,2.327,666,1.935,667,1.935,668,1.935,669,3.417,670,1.935,671,2.868,672,1.935,673,1.935,674,1.935,675,1.935,676,1.935,677,1.935,678,1.935,679,1.935,680,1.935,681,1.935,682,1.935,683,1.935,684,2.868,685,1.676,686,1.935,687,1.935,688,1.935]],["title/interfaces/Logger.html",[0,1.344,368,1.796]],["body/interfaces/Logger.html",[0,1.667,2,2.81,3,0.471,4,0.471,5,0.413,6,1.296,7,0.684,9,0.413,11,0.919,14,0.736,15,0.035,16,0.665,20,0.665,27,1.278,28,1.828,30,0.57,40,0.137,50,0.021,51,0.026,52,0.021,62,2.103,70,0.825,158,0.839,161,0.919,163,0.919,174,2.103,231,1.018,233,1.495,236,1.55,238,2.103,285,3.136,302,1.234,328,2.539,359,2.486,360,3.545,361,3.545,363,4.292,364,3.545,366,3.545,368,3.232,369,3.545,370,3.545,371,3.545,372,2.81,373,2.81,374,2.81,689,3.902,690,3.902,691,3.902]],["title/injectables/NoLoggerService.html",[28,1.474,302,0.72]],["body/injectables/NoLoggerService.html",[0,1.685,3,0.477,4,0.477,5,0.417,6,1.301,7,0.687,9,0.417,11,0.924,14,0.74,15,0.035,16,0.672,20,0.672,27,1.291,28,2.322,30,0.573,40,0.138,50,0.021,51,0.027,52,0.021,62,2.117,70,0.829,158,0.845,161,0.924,163,0.924,174,2.117,231,1.023,233,1.499,236,1.359,238,2.117,285,3.158,302,1.24,304,1.848,328,2.556,359,2.513,360,3.569,361,3.902,363,4.304,364,3.902,366,3.902,368,3.094,369,2.841,370,2.841,371,2.841,372,2.841,373,2.841,374,2.841,692,3.944,693,3.944,694,3.944]],["title/injectables/ServerWebBluetooth.html",[302,0.72,695,2.265]],["body/injectables/ServerWebBluetooth.html",[3,0.554,4,0.554,5,0.485,6,1.243,7,0.656,9,0.485,15,0.034,16,0.781,20,0.781,30,0.485,32,0.702,40,0.127,42,2.473,50,0.025,51,0.029,52,0.025,158,0.926,161,0.781,163,0.781,302,1.243,304,2.148,695,3.912,696,3.811,697,5.985,698,4.585,699,4.585,700,3.811,701,4.585]],["title/components/StepCounterComponent.html",[53,0.863,79,1.124]],["body/components/StepCounterComponent.html",[3,0.276,4,0.276,5,0.242,9,0.242,10,0.934,11,0.693,14,0.785,15,0.035,16,0.768,20,0.39,30,0.242,32,0.35,40,0.063,42,2.158,50,0.012,51,0.018,52,0.012,53,1.116,54,0.817,55,1.595,56,1.179,57,1.179,59,1.179,60,2.773,61,1.922,63,1.756,64,0.977,65,1.756,66,1.595,67,1.179,68,2.324,69,1.179,70,0.737,71,1.179,72,0.817,73,0.893,74,1.179,75,0.817,76,1.179,77,0.817,78,1.179,79,1.611,80,1.179,81,0.817,82,0.977,83,1.179,84,1.179,124,1.179,125,1.179,133,1.964,134,1.305,158,0.58,161,1.007,163,0.861,171,2.322,174,1.454,175,2.322,176,2.322,178,2.591,179,3.219,182,2.929,185,2.929,186,2.929,187,3.381,188,4.199,189,4.199,191,3.638,192,3.638,193,2.929,195,2.929,197,3.219,200,2.929,201,2.929,202,2.929,204,3.381,205,1.403,206,3.381,208,2.591,210,1.654,214,2.591,215,2.751,216,2.591,217,2.322,218,1.611,220,1.943,221,2.573,222,2.573,223,2.573,224,2.169,225,1.943,226,1.22,227,1.021,228,1.456,229,2.751,231,0.768,233,1.267,235,1.943,236,1.02,238,1.737,242,2.169,243,2.699,245,1.329,246,1.454,253,2.751,257,1.217,269,1.071,271,1.071,272,1.456,274,1.456,275,1.456,278,2.169,279,2.169,280,1.943,288,1.179,292,1.305,293,1.456,295,1.456,296,1.456,298,1.943,299,1.305,300,1.305,301,1.456,415,1.305,416,1.646,424,2.451,435,3.219,468,2.573,469,2.573,470,2.573,471,2.573,473,3.381,475,3.381,477,2.451,478,2.451,611,2.169,685,1.646,702,1.9,703,2.83,704,4.067,705,4.067,706,4.067,707,4.067,708,4.067,709,4.067,710,4.067,711,2.286,712,2.286,713,2.286,714,2.286,715,2.286,716,2.286,717,2.286,718,2.286,719,2.286,720,2.286,721,2.286,722,2.286,723,2.286,724,2.286,725,2.286,726,3.404,727,3.404,728,3.404]],["title/components/TemperatureComponent.html",[53,0.863,81,1.124]],["body/components/TemperatureComponent.html",[3,0.283,4,0.283,5,0.248,9,0.248,10,0.952,11,0.704,14,0.789,15,0.035,16,0.83,20,0.4,30,0.248,32,0.359,33,1.482,40,0.065,42,2.314,50,0.013,51,0.019,52,0.013,53,1.133,54,0.838,55,1.625,56,1.209,57,1.209,59,1.209,60,2.794,61,1.936,63,1.789,64,1.002,65,1.789,66,1.625,67,1.209,68,2.353,69,1.209,70,0.745,71,1.209,72,0.838,73,0.916,74,1.209,75,0.838,76,1.209,77,0.838,78,1.209,79,0.838,80,1.209,81,1.631,82,1.949,83,1.209,84,1.209,124,1.209,125,1.209,133,1.977,134,1.339,144,0.916,154,1.476,158,0.591,161,1.03,163,0.899,171,2.357,174,1.482,175,2.357,176,2.357,178,2.631,179,2.631,197,2.631,205,1.222,208,2.631,210,1.669,214,2.631,215,2.78,216,2.631,217,2.357,218,1.631,220,1.981,221,2.605,222,2.605,223,2.605,224,2.21,225,1.981,226,1.238,227,1.04,228,1.494,229,2.78,231,0.779,233,1.323,235,1.981,236,1.036,238,1.764,242,2.21,243,2.512,245,1.355,246,1.24,253,2.78,257,1.24,269,1.099,271,1.099,272,1.494,274,1.494,275,1.494,278,2.21,279,2.21,280,1.981,292,1.339,293,1.494,295,1.494,296,1.494,298,1.981,299,1.339,300,1.339,301,1.494,415,1.339,423,2.973,429,1.494,430,1.689,435,2.631,467,2.498,468,2.605,469,2.605,470,2.605,471,2.605,472,2.21,552,1.002,628,3.793,629,3.432,630,3.432,631,3.432,632,3.432,633,3.793,643,3.432,645,3.432,646,1.949,647,2.884,650,3.793,657,1.949,658,1.689,659,1.949,662,1.949,663,1.949,664,1.949,666,1.949,667,1.949,668,1.949,669,3.432,670,1.949,671,2.884,672,1.949,673,1.949,674,1.949,675,1.949,676,1.949,677,1.949,678,1.949,679,1.949,680,1.949,681,1.949,682,1.949,683,1.949,684,2.884,685,1.689,686,1.949,687,1.949,688,1.949,729,1.949,730,2.345,731,2.345,732,2.345,733,2.345,734,2.345,735,2.345,736,2.345,737,2.345,738,2.345,739,2.345,740,2.345,741,2.345,742,2.345,743,2.345,744,2.345,745,2.345,746,2.345,747,2.345,748,3.469,749,3.469]],["title/modules/WebBluetoothModule.html",[41,1.474,85,1.796]],["body/modules/WebBluetoothModule.html",[0,1.609,1,3.68,3,0.455,4,0.455,5,0.399,6,1.101,7,0.581,8,2.4,11,0.82,12,2.4,13,2.713,14,0.514,15,0.035,16,0.984,17,3.38,18,4.409,19,3.131,20,0.642,21,4.001,22,2.713,23,2.056,24,3.131,25,2.467,26,3.131,27,1.737,28,2.255,29,3.131,30,0.611,31,3.028,32,0.884,33,2.388,34,2.713,35,2.736,36,3.131,37,3.38,38,3.131,39,2.4,40,0.105,41,2.485,42,2.056,43,4.001,44,1.943,45,3.028,46,3.067,47,3.131,48,2.4,49,2.4,50,0.02,51,0.026,52,0.02,70,0.577,87,2.151,158,0.642,161,0.642,163,0.642,205,0.945,231,0.711,246,1.346,750,3.767,751,3.767]],["title/coverage.html",[752,3.553]],["body/coverage.html",[0,1.796,1,1.956,5,0.325,6,1.421,7,0.75,8,3.285,14,0.419,15,0.035,23,1.312,25,1.796,27,1.005,28,1.438,31,2.737,33,1.312,37,1.956,40,0.15,44,1.584,48,1.956,50,0.016,51,0.023,52,0.016,53,1.53,54,1.097,58,2.552,72,1.097,75,1.097,77,1.097,79,1.097,81,1.097,99,3.452,133,1.097,141,2.211,142,2.211,145,2.211,149,2.211,155,2.211,157,2.552,172,2.552,173,2.552,302,1.306,303,2.211,305,2.211,308,1.956,332,4.472,343,2.552,359,3.054,368,1.753,375,2.552,424,4.655,442,2.211,518,1.584,519,2.943,551,1.584,555,1.584,573,1.438,627,2.552,695,2.211,696,2.552,702,2.552,729,2.552,752,2.552,753,2.211,754,3.07,755,3.07,756,3.07,757,4.203,758,6.294,759,2.552,760,3.07,761,3.07,762,3.494,763,3.494,764,2.552,765,2.552,766,5.155,767,3.07,768,3.07,769,4.203,770,3.07,771,3.07,772,3.07,773,4.902,774,2.552,775,2.552,776,2.552,777,2.552,778,2.552,779,2.552,780,3.07,781,4.203,782,3.07,783,2.552,784,3.494,785,2.552,786,3.07,787,3.07]],["title/dependencies.html",[88,2.407,788,2.192]],["body/dependencies.html",[15,0.035,20,0.764,22,3.227,50,0.024,51,0.029,52,0.024,88,2.855,105,4.454,129,2.764,131,2.1,271,2.1,658,3.227,789,4.481,790,6.353,791,4.481,792,4.481,793,4.481,794,4.481,795,4.481,796,4.481,797,4.481,798,4.481,799,4.481,800,4.481,801,3.725,802,4.481,803,4.481,804,4.481,805,4.481,806,4.481,807,4.481,808,4.481]],["title/miscellaneous/functions.html",[809,1.36,810,3.141]],["body/miscellaneous/functions.html",[6,1.098,7,0.58,8,3.057,9,0.508,11,0.818,15,0.032,25,2.52,34,3.455,35,2.475,37,3.759,48,3.555,50,0.026,51,0.03,52,0.026,70,0.734,231,0.906,809,2.475,810,3.988,811,5.898]],["title/index.html",[9,0.279,812,1.899,813,1.899]],["body/index.html",[7,0.622,12,1.536,15,0.035,16,0.949,17,2.255,20,0.715,23,2.2,30,0.444,32,0.879,39,1.536,40,0.116,41,1.658,42,1.512,45,1.376,50,0.013,51,0.019,52,0.013,61,1.265,62,1.512,73,1.638,85,2.021,86,1.376,98,1.536,129,1.243,130,2.64,131,2.558,153,2.003,154,1.265,177,2.395,205,1.335,211,1.736,218,0.861,226,1.544,247,2.255,269,1.658,289,1.826,302,1.058,309,2.549,310,3.843,321,2.255,322,2.255,323,3.138,324,2.132,326,2.104,328,1.826,333,1.658,335,2.549,336,2.003,338,2.549,341,1.376,342,2.549,381,1.243,382,2.549,408,2.003,429,2.255,436,2.003,463,2.003,481,1.736,482,2.003,490,2.003,491,2.003,495,2.003,496,2.003,500,2.003,501,1.243,502,2.003,504,2.003,507,2.003,520,1.376,524,1.376,545,1.243,552,1.03,572,1.243,753,3.021,788,2.003,801,2.942,812,1.736,813,1.736,814,2.41,815,3.539,816,3.539,817,2.41,818,2.41,819,2.41,820,2.41,821,2.41,822,2.41,823,2.41,824,2.41,825,2.41,826,2.41,827,2.41,828,4.094,829,3.539,830,2.41,831,3.539,832,4.623,833,3.539,834,3.539,835,3.539,836,3.539,837,5.148,838,5.321,839,3.539,840,2.41,841,3.539,842,2.41,843,2.41,844,2.41,845,3.539,846,3.539,847,2.41,848,2.41,849,2.41,850,2.41,851,2.41,852,3.539,853,2.41,854,3.539,855,2.41,856,2.41,857,2.41,858,2.41,859,2.942,860,2.41,861,2.41,862,2.41,863,2.41,864,3.539,865,2.41,866,3.539,867,2.003,868,2.41,869,2.41,870,2.41,871,2.41,872,2.41,873,2.41,874,2.41,875,2.41,876,2.003,877,3.539,878,2.41,879,2.41,880,3.539,881,3.539,882,2.41,883,2.41,884,2.41,885,2.942,886,2.41,887,2.41,888,3.539,889,2.41,890,2.41,891,2.41,892,2.41,893,2.41,894,2.41,895,2.41,896,2.41,897,2.41,898,2.41,899,2.41,900,2.41,901,2.549,902,2.942,903,3.487,904,2.003,905,2.003,906,2.003,907,2.003,908,2.942,909,2.003,910,2.003,911,2.003,912,2.003,913,2.003,914,2.942,915,4.631,916,2.003,917,2.003,918,2.003,919,3.487,920,2.003,921,2.942,922,2.003,923,2.003,924,2.003,925,2.003,926,2.003,927,2.003,928,2.003,929,2.003,930,2.942,931,2.003,932,2.003,933,2.003,934,1.736,935,2.003,936,2.003,937,2.942,938,2.942,939,2.003,940,2.003,941,2.003,942,2.003,943,2.003,944,2.003,945,2.003,946,2.003,947,2.003,948,2.003,949,2.003,950,2.003,951,2.003,952,2.003,953,2.003,954,2.003,955,2.003,956,2.003,957,2.003,958,2.003,959,2.003,960,2.003,961,2.003,962,2.003,963,2.003,964,2.003,965,2.003,966,2.003,967,2.003]],["title/license.html",[812,1.899,813,1.899,901,1.899]],["body/license.html",[15,0.027,50,0.022,51,0.027,52,0.022,98,2.643,481,2.987,545,2.139,753,2.987,828,4.25,859,3.448,885,3.448,901,2.987,902,4.25,903,4.607,904,3.448,905,3.448,906,3.448,907,3.448,908,4.25,909,3.448,910,3.448,911,3.448,912,3.448,913,3.448,914,4.25,915,5.189,916,3.448,917,3.448,918,3.448,919,4.607,920,3.448,921,4.25,922,3.448,923,3.448,924,3.448,925,3.448,926,3.448,927,3.448,928,3.448,929,3.448,930,4.25,931,3.448,932,3.448,933,3.448,934,2.987,935,3.448,936,3.448,937,4.25,938,4.25,939,3.448,940,3.448,941,3.448,942,3.448,943,3.448,944,3.448,945,3.448,946,3.448,947,3.448,948,3.448,949,3.448,950,3.448,951,3.448,952,3.448,953,3.448,954,3.448,955,3.448,956,3.448,957,3.448,958,3.448,959,3.448,960,3.448,961,3.448,962,3.448,963,3.448,964,3.448,965,3.448,966,3.448,967,3.448]],["title/modules.html",[87,2.44]],["body/modules.html",[15,0.03,41,2.314,50,0.027,51,0.03,52,0.027,86,2.82,87,2.82,129,2.548,352,4.106,968,4.939,969,5.673,970,4.939,971,4.106]],["title/overview.html",[972,3.553]],["body/overview.html",[2,3.093,15,0.034,41,2.637,44,2.215,50,0.023,51,0.028,52,0.023,54,2.208,55,2.012,64,1.835,72,2.012,75,2.012,77,2.012,79,2.012,81,2.012,85,2.452,86,3.685,87,2.452,88,2.737,89,3.57,90,3.57,91,3.57,92,3.57,93,3.57,94,3.57,95,3.57,96,4.342,97,3.57,98,2.737,156,2.215,304,2.012,867,4.342,876,3.57,972,3.57,973,4.295,974,4.295]],["title/miscellaneous/typealiases.html",[809,1.36,975,3.778]],["body/miscellaneous/typealiases.html",[6,1.084,7,0.572,9,0.501,14,0.841,15,0.03,50,0.025,51,0.03,52,0.025,305,3.41,314,4.355,442,3.41,611,3.853,759,3.936,809,2.442,976,4.735,977,5.536,978,5.536,979,5.536,980,4.735,981,4.735]],["title/miscellaneous/variables.html",[809,1.36,982,3.141]],["body/miscellaneous/variables.html",[6,0.339,7,0.179,9,0.157,14,0.574,15,0.035,23,1.313,25,1.518,27,1.283,32,0.734,33,2.242,35,0.763,44,1.249,45,1.383,46,1.543,49,1.543,50,0.008,51,0.013,52,0.008,70,0.227,73,0.578,82,0.632,99,1.066,133,0.529,141,1.744,142,1.744,144,1.927,145,2.214,146,2.555,147,3.497,148,1.23,149,2.558,150,1.23,151,1.23,152,1.23,154,1.099,177,0.845,205,1.371,226,0.444,246,1.954,247,0.943,258,1.066,259,1.066,260,1.066,261,1.066,262,1.066,308,1.959,324,2.178,326,1.98,341,1.383,344,1.23,347,1.23,403,1.744,417,0.943,466,3.257,467,1.066,468,2.237,469,2.237,470,2.237,471,2.237,472,0.943,477,1.066,478,1.066,479,1.066,542,0.845,552,1.035,554,2.646,572,1.586,573,0.693,581,0.845,583,2.028,700,2.953,703,1.23,762,1.23,763,2.555,764,2.013,765,2.013,773,1.23,774,2.555,775,2.555,776,2.013,777,2.555,778,2.953,779,2.013,783,1.23,784,2.953,785,1.23,809,0.763,934,1.744,971,2.555,982,1.23,983,3.074,984,4.796,985,1.48,986,1.48,987,2.422,988,1.48,989,3.552,990,3.552,991,3.074,992,3.918,993,3.918,994,1.48,995,1.48,996,1.48,997,1.48,998,1.48,999,1.48,1000,1.48,1001,1.48,1002,1.48,1003,1.48,1004,2.422,1005,2.422,1006,3.074,1007,1.48,1008,2.422,1009,2.422,1010,2.422,1011,2.422,1012,2.422,1013,2.422,1014,2.422,1015,2.422,1016,2.422,1017,2.422,1018,1.48,1019,3.074,1020,1.48,1021,1.48,1022,2.422,1023,2.422,1024,1.48,1025,1.48,1026,1.48,1027,1.48,1028,1.48,1029,1.48,1030,1.48,1031,1.48,1032,1.48,1033,2.422,1034,1.48,1035,1.48,1036,1.48,1037,1.48,1038,6.306,1039,6.306,1040,6.306,1041,6.306,1042,1.48,1043,1.48,1044,1.48,1045,1.48,1046,1.48,1047,1.48,1048,1.48,1049,1.48,1050,1.48,1051,1.48,1052,1.48,1053,1.48,1054,1.48,1055,1.48,1056,1.48,1057,1.48,1058,1.48,1059,1.48,1060,1.48,1061,1.48,1062,1.48,1063,4.934,1064,1.48,1065,4.634,1066,1.48,1067,4.634,1068,1.48,1069,1.48,1070,1.48,1071,1.48,1072,1.48,1073,1.48,1074,1.48,1075,1.48,1076,1.48,1077,1.48,1078,3.074,1079,3.074,1080,1.48,1081,1.48,1082,1.48,1083,1.48,1084,1.48,1085,1.48,1086,1.48,1087,1.48,1088,1.48,1089,1.48,1090,1.48,1091,1.48,1092,1.48,1093,1.48,1094,1.48,1095,1.48,1096,1.48,1097,1.48,1098,1.48,1099,1.48,1100,1.48,1101,1.48,1102,1.48,1103,1.48,1104,1.48,1105,1.48,1106,1.48,1107,1.48,1108,1.48,1109,1.48,1110,1.48,1111,1.48,1112,1.48,1113,1.48,1114,1.48,1115,1.48,1116,1.48,1117,1.48,1118,1.48,1119,1.48,1120,1.48,1121,1.48,1122,1.48,1123,1.48,1124,1.48,1125,1.48,1126,1.48,1127,1.48,1128,1.48,1129,1.48,1130,1.48,1131,1.48,1132,1.48,1133,1.48,1134,1.48,1135,1.48,1136,1.48,1137,1.48]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":424,"title":{},"body":{"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{},"coverage.html":{}}}],["0.0.6",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":768,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":782,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":781,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":780,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["000",{"_index":206,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["0000",{"_index":259,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["000000",{"_index":675,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["000000000000",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0000180f",{"_index":258,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["00805f9b34fb",{"_index":262,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["0451",{"_index":1038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":429,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{}}}],["1.1.4",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["1.35.0",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100",{"_index":466,"title":{},"body":{"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":260,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["100px",{"_index":196,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["10px",{"_index":439,"title":{},"body":{"components/DashboardComponent.html":{}}}],["11.2.0",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["111px",{"_index":194,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["112px",{"_index":705,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["120px",{"_index":707,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["15px",{"_index":434,"title":{},"body":{"components/DashboardComponent.html":{}}}],["16px",{"_index":629,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["17",{"_index":677,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["2",{"_index":867,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0.0",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["2.a",{"_index":827,"title":{},"body":{"index.html":{}}}],["2.b",{"_index":847,"title":{},"body":{"index.html":{}}}],["2000",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2017",{"_index":905,"title":{},"body":{"index.html":{},"license.html":{}}}],["20px",{"_index":432,"title":{},"body":{"components/DashboardComponent.html":{}}}],["214px",{"_index":706,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["22/34",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":199,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["255px",{"_index":203,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["258px",{"_index":709,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["3",{"_index":868,"title":{},"body":{"index.html":{}}}],["32px",{"_index":441,"title":{},"body":{"components/DashboardComponent.html":{}}}],["38px",{"_index":204,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["3em",{"_index":190,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["4",{"_index":872,"title":{},"body":{"index.html":{}}}],["4000",{"_index":1039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["40px",{"_index":420,"title":{},"body":{"components/DashboardComponent.html":{}}}],["4933",{"_index":469,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":876,"title":{},"body":{"index.html":{},"overview.html":{}}}],["52ffa9740042",{"_index":471,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["55px",{"_index":708,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["5em",{"_index":704,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["5px",{"_index":438,"title":{},"body":{"components/DashboardComponent.html":{}}}],["6",{"_index":973,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["64",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":974,"title":{},"body":{"overview.html":{}}}],["700px",{"_index":422,"title":{},"body":{"components/DashboardComponent.html":{}}}],["8000",{"_index":261,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["9b10",{"_index":470,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["9b35",{"_index":468,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["__register__",{"_index":1109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_config",{"_index":307,"title":{},"body":{"injectables/BleService.html":{}}}],["above",{"_index":936,"title":{},"body":{"index.html":{},"license.html":{}}}],["absolute",{"_index":192,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["abstract",{"_index":856,"title":{},"body":{"index.html":{}}}],["acc",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accelerometer",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["acceptalldevices",{"_index":490,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["accessors",{"_index":225,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["action",{"_index":961,"title":{},"body":{"index.html":{},"license.html":{}}}],["actual_component",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["addeventlistener",{"_index":523,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["addeventlistener(type",{"_index":532,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["address",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["advanced",{"_index":848,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":976,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":186,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["and/or",{"_index":928,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular",{"_index":408,"title":{},"body":{"components/DashboardComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/common",{"_index":22,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/card",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/expansion",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/grid",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/icon",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/list",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/menu",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/progress",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/snack",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["angular/material/toolbar",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/platform",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["annotated",{"_index":833,"title":{},"body":{"index.html":{}}}],["api",{"_index":877,"title":{},"body":{"index.html":{}}}],["app",{"_index":893,"title":{},"body":{"index.html":{}}}],["app.component",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":54,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appmodule",{"_index":86,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["apppage",{"_index":155,"title":{"classes/AppPage.html":{}},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["args",{"_index":363,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["arising",{"_index":965,"title":{},"body":{"index.html":{},"license.html":{}}}],["arraybuffer(8",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ask",{"_index":873,"title":{},"body":{"index.html":{}}}],["associated",{"_index":916,"title":{},"body":{"index.html":{},"license.html":{}}}],["async",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":954,"title":{},"body":{"index.html":{},"license.html":{}}}],["auto",{"_index":425,"title":{},"body":{"components/DashboardComponent.html":{}}}],["available",{"_index":971,"title":{},"body":{"modules.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":1031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["awboptions",{"_index":1,"title":{"interfaces/AWBOptions.html":{}},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["b",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["b000",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bar",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["barometer",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["battery",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["battery_charging_full",{"_index":207,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["battery_level",{"_index":247,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["battery_service",{"_index":846,"title":{},"body":{"index.html":{}}}],["batterylevel",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["batterylevelcomponent",{"_index":72,"title":{"components/BatteryLevelComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["batterylevelcomponent.characteristicuuid",{"_index":277,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["batterylevelcomponent.serviceuuid",{"_index":276,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["batterylevelservice",{"_index":836,"title":{},"body":{"index.html":{}}}],["batterylevelservice.gatt_characteristic_battery_level",{"_index":871,"title":{},"body":{"index.html":{}}}],["batterylevelservice.gatt_primary_service",{"_index":866,"title":{},"body":{"index.html":{}}}],["ble",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{}}}],["blecore",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bleservice",{"_index":303,"title":{"injectables/BleService.html":{}},"body":{"injectables/BleService.html":{},"coverage.html":{}}}],["block",{"_index":197,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["blog",{"_index":891,"title":{},"body":{"index.html":{}}}],["bluetooth",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/DashboardService.html":{},"dependencies.html":{},"index.html":{}}}],["bluetooth.service",{"_index":24,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["bluetooth/src/lib/bluetooth.module.ts",{"_index":8,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["bluetooth/src/lib/bluetooth.module.ts:32",{"_index":751,"title":{},"body":{"modules/WebBluetoothModule.html":{}}}],["bluetooth/src/lib/bluetooth.service.ts",{"_index":759,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["bluetooth/src/lib/lang/uuids/ti",{"_index":762,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bluetooth/src/lib/logger.service.ts",{"_index":359,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"coverage.html":{}}}],["bluetooth/src/lib/logger.service.ts:13",{"_index":365,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:16",{"_index":362,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:19",{"_index":367,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:28",{"_index":693,"title":{},"body":{"injectables/NoLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:29",{"_index":692,"title":{},"body":{"injectables/NoLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:30",{"_index":694,"title":{},"body":{"injectables/NoLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:4",{"_index":690,"title":{},"body":{"interfaces/Logger.html":{}}}],["bluetooth/src/lib/logger.service.ts:5",{"_index":689,"title":{},"body":{"interfaces/Logger.html":{}}}],["bluetooth/src/lib/logger.service.ts:6",{"_index":691,"title":{},"body":{"interfaces/Logger.html":{}}}],["bluetooth/src/lib/platform/browser.ts",{"_index":343,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"coverage.html":{}}}],["bluetooth/src/lib/platform/browser.ts:14",{"_index":348,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["bluetooth/src/lib/platform/browser.ts:5",{"_index":345,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["bluetooth/src/lib/platform/server.ts",{"_index":696,"title":{},"body":{"injectables/ServerWebBluetooth.html":{},"coverage.html":{}}}],["bluetooth/src/lib/platform/server.ts:5",{"_index":698,"title":{},"body":{"injectables/ServerWebBluetooth.html":{}}}],["bluetooth/src/lib/test.utils.ts",{"_index":519,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{}}}],["bluetooth/src/lib/test.utils.ts:101",{"_index":602,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:102",{"_index":601,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:103",{"_index":603,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:104",{"_index":599,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:105",{"_index":597,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:106",{"_index":600,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:107",{"_index":598,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:111",{"_index":595,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:125",{"_index":607,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:129",{"_index":604,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:13",{"_index":526,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:136",{"_index":605,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:144",{"_index":606,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:15",{"_index":528,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:18",{"_index":535,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:25",{"_index":537,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:30",{"_index":538,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:35",{"_index":536,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:46",{"_index":612,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:48",{"_index":613,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:52",{"_index":614,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:58",{"_index":616,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:62",{"_index":617,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:7",{"_index":527,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:70",{"_index":615,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:79",{"_index":621,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:8",{"_index":531,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:81",{"_index":624,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:82",{"_index":623,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:83",{"_index":622,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:87",{"_index":625,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:91",{"_index":626,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth_disabled",{"_index":413,"title":{},"body":{"components/DashboardComponent.html":{}}}],["bluetooth_searching",{"_index":411,"title":{},"body":{"components/DashboardComponent.html":{}}}],["bluetoothcharacteristicproperties",{"_index":581,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"miscellaneous/variables.html":{}}}],["bluetoothcharacteristicuuid",{"_index":245,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["bluetoothcore",{"_index":23,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"injectables/BleService.html":{},"injectables/DashboardService.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["bluetoothcore(b",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["bluetoothcore(fakebrowserwebbluetooth",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["bluetoothremotegattcharacteristic",{"_index":507,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["bluetoothremotegattserver",{"_index":501,"title":{},"body":{"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["bluetoothremotegattservice",{"_index":504,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["bluetoothserviceuuid",{"_index":257,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["bob",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":13,"title":{},"body":{"interfaces/AWBOptions.html":{},"injectables/DashboardService.html":{},"modules/WebBluetoothModule.html":{}}}],["bootstrap",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["bordervisible",{"_index":673,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["bottom",{"_index":202,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["browse",{"_index":969,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BrowserWebBluetooth.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser's",{"_index":826,"title":{},"body":{"index.html":{}}}],["browser.get(browser.baseurl",{"_index":167,"title":{},"body":{"classes/AppPage.html":{}}}],["browser/animations",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["browserwebbluetooth",{"_index":25,"title":{"injectables/BrowserWebBluetooth.html":{}},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"injectables/BrowserWebBluetooth.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["button",{"_index":437,"title":{},"body":{"components/DashboardComponent.html":{}}}],["c",{"_index":904,"title":{},"body":{"index.html":{},"license.html":{}}}],["c.characteristic",{"_index":498,"title":{},"body":{"injectables/DashboardService.html":{}}}],["c.decoder(dataview",{"_index":510,"title":{},"body":{"injectables/DashboardService.html":{}}}],["c.service",{"_index":493,"title":{},"body":{"injectables/DashboardService.html":{}}}],["call",{"_index":837,"title":{},"body":{"index.html":{}}}],["callbackfn",{"_index":571,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["can't",{"_index":855,"title":{},"body":{"index.html":{}}}],["canvas",{"_index":628,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["card",{"_index":433,"title":{},"body":{"components/DashboardComponent.html":{}}}],["cc2650",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["center",{"_index":182,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["changelog",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["changevalue",{"_index":593,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["changevalue(value",{"_index":591,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["characteristic",{"_index":323,"title":{},"body":{"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["characteristic)(value",{"_index":488,"title":{},"body":{"injectables/DashboardService.html":{}}}],["characteristic)?.decoder",{"_index":516,"title":{},"body":{"injectables/DashboardService.html":{}}}],["characteristics",{"_index":572,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["characteristicsinstances",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["characteristicsinstances[uuid].changevalue(random",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["characteristicsinstances[uuid].randomvaluefn",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["characteristicuuid",{"_index":208,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["characteristicvaluechanged",{"_index":584,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["charge",{"_index":911,"title":{},"body":{"index.html":{},"license.html":{}}}],["chart",{"_index":630,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["chartref",{"_index":631,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["checkout",{"_index":889,"title":{},"body":{"index.html":{}}}],["chegham",{"_index":907,"title":{},"body":{"index.html":{},"license.html":{}}}],["claim",{"_index":957,"title":{},"body":{"index.html":{},"license.html":{}}}],["class",{"_index":40,"title":{"classes/AppPage.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":156,"title":{},"body":{"classes/AppPage.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"overview.html":{}}}],["clear",{"_index":524,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["close",{"_index":300,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["cluster_appmodule",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["color",{"_index":209,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["command",{"_index":886,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":21,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["component",{"_index":53,"title":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["components",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"overview.html":{}}}],["conditions",{"_index":935,"title":{},"body":{"index.html":{},"license.html":{}}}],["conf",{"_index":454,"title":{},"body":{"injectables/DashboardService.html":{}}}],["conf.characteristic",{"_index":406,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{}}}],["conf.service",{"_index":515,"title":{},"body":{"injectables/DashboardService.html":{}}}],["conf.value",{"_index":402,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{}}}],["config",{"_index":308,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config(options",{"_index":313,"title":{},"body":{"injectables/BleService.html":{}}}],["config[servicename].characteristics.reduce((acc",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config[servicename].uuid",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":412,"title":{},"body":{"components/DashboardComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["connected",{"_index":289,"title":{},"body":{"components/BatteryLevelComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["connecteddevice.name",{"_index":414,"title":{},"body":{"components/DashboardComponent.html":{}}}],["connection",{"_index":966,"title":{},"body":{"index.html":{},"license.html":{}}}],["console",{"_index":211,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["console.error.apply(console",{"_index":373,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["console.log('getting",{"_index":845,"title":{},"body":{"index.html":{}}}],["console.log('reading",{"_index":685,"title":{},"body":{"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["console.log(conf",{"_index":517,"title":{},"body":{"injectables/DashboardService.html":{}}}],["console.log.apply(console",{"_index":372,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["console.warn.apply(console",{"_index":374,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["consoleloggerservice",{"_index":27,"title":{"injectables/ConsoleLoggerService.html":{}},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consoleloggerserviceconfig",{"_index":48,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["consoleloggerserviceconfig(options",{"_index":34,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{}}}],["const",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":227,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["constructor(ble",{"_index":311,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{}}}],["constructor(dashboardservice",{"_index":228,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["constructor(device",{"_index":610,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["constructor(id",{"_index":525,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["constructor(public",{"_index":333,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["constructor(service",{"_index":383,"title":{},"body":{"components/DashboardComponent.html":{}}}],["constructor(uuid",{"_index":594,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["container",{"_index":431,"title":{},"body":{"components/DashboardComponent.html":{}}}],["content",{"_index":169,"title":{},"body":{"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{}}}],["contract",{"_index":962,"title":{},"body":{"index.html":{},"license.html":{}}}],["contributions",{"_index":895,"title":{},"body":{"index.html":{}}}],["control",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["copies",{"_index":930,"title":{},"body":{"index.html":{},"license.html":{}}}],["copy",{"_index":914,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":903,"title":{},"body":{"index.html":{},"license.html":{}}}],["correctly",{"_index":822,"title":{},"body":{"index.html":{}}}],["count",{"_index":473,"title":{},"body":{"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{}}}],["counter",{"_index":416,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{}}}],["coverage",{"_index":752,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current_used_parameters",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d",{"_index":295,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["damages",{"_index":958,"title":{},"body":{"index.html":{},"license.html":{}}}],["dashboard",{"_index":376,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard'},{'name",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["dashboard.component.css",{"_index":378,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.component.html",{"_index":380,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.service",{"_index":398,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard/dashboard.component",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["dashboard/dashboard.service",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["dashboardcomponent",{"_index":75,"title":{"components/DashboardComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["dashboardservice",{"_index":133,"title":{"injectables/DashboardService.html":{}},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dashboardservice(b",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataview",{"_index":326,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dataview(new",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataview.setint8(0",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataview.setuint32(0",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataview.setuint32(4",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deal",{"_index":918,"title":{},"body":{"index.html":{},"license.html":{}}}],["dealings",{"_index":967,"title":{},"body":{"index.html":{},"license.html":{}}}],["decimal",{"_index":464,"title":{},"body":{"injectables/DashboardService.html":{}}}],["declarations",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decoder",{"_index":461,"title":{},"body":{"injectables/DashboardService.html":{}}}],["decoder(value",{"_index":325,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{}}}],["decorators",{"_index":646,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["default",{"_index":246,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":161,"title":{},"body":{"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["demo",{"_index":409,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dependencies",{"_index":88,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":49,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/variables.html":{}}}],["detailedvalue",{"_index":977,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["details",{"_index":357,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["determinate",{"_index":255,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["dev.to",{"_index":892,"title":{},"body":{"index.html":{}}}],["developer",{"_index":858,"title":{},"body":{"index.html":{}}}],["device",{"_index":226,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["device.gatt",{"_index":556,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["device_id",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["device_information",{"_index":1036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["devicesubscription",{"_index":212,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["direction",{"_index":183,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["directions_walk",{"_index":710,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["directive",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["directives",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["disconnect",{"_index":218,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{}}}],["disconnect(callbackfn",{"_index":569,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["disconnect_request",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disconnectdevice",{"_index":309,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["disconnected",{"_index":290,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["disconnectsubject",{"_index":774,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["disconnectsubject.next",{"_index":1030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discover",{"_index":864,"title":{},"body":{"index.html":{}}}],["discovery",{"_index":495,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["display",{"_index":179,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["distribute",{"_index":926,"title":{},"body":{"index.html":{},"license.html":{}}}],["documentation",{"_index":753,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dom",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["dynamic",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["e2e/src/app.po.ts",{"_index":157,"title":{},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["e2e/src/app.po.ts:4",{"_index":165,"title":{},"body":{"classes/AppPage.html":{}}}],["e2e/src/app.po.ts:8",{"_index":162,"title":{},"body":{"classes/AppPage.html":{}}}],["easiest",{"_index":830,"title":{},"body":{"index.html":{}}}],["ef680200",{"_index":472,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["ef680201",{"_index":467,"title":{},"body":{"injectables/DashboardService.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["ef680203",{"_index":479,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"miscellaneous/variables.html":{}}}],["ef680400",{"_index":477,"title":{},"body":{"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{},"miscellaneous/variables.html":{}}}],["ef680405",{"_index":478,"title":{},"body":{"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{},"miscellaneous/variables.html":{}}}],["elem",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elem.randomvaluefn",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elem.serviceinstance",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elem.uuid",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["element(by.css('app",{"_index":168,"title":{},"body":{"classes/AppPage.html":{}}}],["elementref",{"_index":645,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["elsewhere",{"_index":857,"title":{},"body":{"index.html":{}}}],["emites",{"_index":861,"title":{},"body":{"index.html":{}}}],["emitted",{"_index":839,"title":{},"body":{"index.html":{}}}],["enable",{"_index":824,"title":{},"body":{"index.html":{}}}],["enabletracing",{"_index":12,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["environment",{"_index":784,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":238,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["error('your",{"_index":351,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["error(...args",{"_index":361,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["error(args",{"_index":370,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["event",{"_index":545,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{},"license.html":{}}}],["eventlistener",{"_index":534,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["example",{"_index":834,"title":{},"body":{"index.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["exports",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":945,"title":{},"body":{"index.html":{},"license.html":{}}}],["f000180a",{"_index":1037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000180f",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a19",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a23",{"_index":1043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a24",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a25",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a26",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a27",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a28",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a29",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a2a",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a50",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa00",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa01",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa02",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa03",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa10",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa11",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa12",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa13",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa20",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa21",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa22",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa23",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa30",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa31",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa32",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa33",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa40",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa41",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa42",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa44",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa50",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa51",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa52",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa53",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa64",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa65",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa66",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa70",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa71",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa72",{"_index":1103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa73",{"_index":1104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa80",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa81",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa82",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa83",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ac00",{"_index":1110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ac01",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ac02",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ac03",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ccc0",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ccc1",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ccc2",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ccc3",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc0",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc1",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc2",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc3",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc4",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffe0",{"_index":1106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffe1",{"_index":1108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fake",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fake.utils",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["fakeblecore",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakebluetoothdevice",{"_index":518,"title":{"classes/FakeBluetoothDevice.html":{}},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{}}}],["fakebluetoothdevice('1",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakebluetoothremotegattcharacteristic",{"_index":573,"title":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakebluetoothremotegattserver",{"_index":551,"title":{"classes/FakeBluetoothRemoteGATTServer.html":{}},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{}}}],["fakebluetoothremotegattserver(fakedevice",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakebluetoothremotegattservice",{"_index":555,"title":{"classes/FakeBluetoothRemoteGATTService.html":{}},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{}}}],["fakebluetoothremotegattservice(config[servicename].uuid",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakebrowserwebbluetooth",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakedevice",{"_index":775,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakedevice.addeventlistener('gattserverconnected",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakedevice.addeventlistener('gattserverdisconnected",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakegattserver",{"_index":776,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakegattserver.connect",{"_index":1032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":552,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["few",{"_index":897,"title":{},"body":{"index.html":{}}}],["ff0000",{"_index":681,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["ffffff",{"_index":670,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["files",{"_index":917,"title":{},"body":{"index.html":{},"license.html":{}}}],["fillstyle",{"_index":669,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["filter",{"_index":396,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{}}}],["filter(this.getservicepredicate(service",{"_index":485,"title":{},"body":{"injectables/DashboardService.html":{}}}],["filter(uuid",{"_index":565,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["filter(value",{"_index":404,"title":{},"body":{"components/DashboardComponent.html":{}}}],["firmware_rev",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fitness",{"_index":950,"title":{},"body":{"index.html":{},"license.html":{}}}],["flex",{"_index":180,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["following",{"_index":885,"title":{},"body":{"index.html":{},"license.html":{}}}],["font",{"_index":188,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["fontsize",{"_index":676,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["foreach(uuid",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroot",{"_index":750,"title":{},"body":{"modules/WebBluetoothModule.html":{}}}],["forroot(options",{"_index":43,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["found",{"_index":878,"title":{},"body":{"index.html":{}}}],["free",{"_index":859,"title":{},"body":{"index.html":{},"license.html":{}}}],["full",{"_index":890,"title":{},"body":{"index.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/AWBOptions.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["functions",{"_index":810,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":933,"title":{},"body":{"index.html":{},"license.html":{}}}],["gatt",{"_index":520,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["gatt_characteristic_battery_level",{"_index":849,"title":{},"body":{"index.html":{}}}],["gatt_primary_service",{"_index":850,"title":{},"body":{"index.html":{}}}],["gattserverconnected",{"_index":529,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["gattserverdisconnected",{"_index":530,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["gattservices",{"_index":777,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["generatefakevalues",{"_index":778,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcharacteristic",{"_index":619,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getcharacteristic(uuid",{"_index":576,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getcharacteristics",{"_index":620,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getcharacteristics(uuids",{"_index":578,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getdecoder",{"_index":443,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getdecoder(service",{"_index":450,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getdevice",{"_index":269,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{}}}],["getdevicestatus",{"_index":219,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["getprimaryservice",{"_index":608,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["getprimaryservice(uuid",{"_index":560,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getprimaryservices",{"_index":609,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["getprimaryservices(uuids",{"_index":562,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getservicepredicate",{"_index":444,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getservicepredicate(service",{"_index":452,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getting",{"_index":812,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["gettitletext",{"_index":159,"title":{},"body":{"classes/AppPage.html":{}}}],["given",{"_index":840,"title":{},"body":{"index.html":{}}}],["granted",{"_index":910,"title":{},"body":{"index.html":{},"license.html":{}}}],["graph",{"_index":970,"title":{},"body":{"modules.html":{}}}],["grid",{"_index":430,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["gyroscope",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hardware_rev",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["haserror",{"_index":220,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["haserror(error",{"_index":235,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["help",{"_index":900,"title":{},"body":{"index.html":{}}}],["here",{"_index":832,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":909,"title":{},"body":{"index.html":{},"license.html":{}}}],["holders",{"_index":955,"title":{},"body":{"index.html":{},"license.html":{}}}],["host",{"_index":178,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["html",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["http://caniuse.com/#search=bluetooth",{"_index":355,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["https://manekinekko.github.io/angular",{"_index":879,"title":{},"body":{"index.html":{}}}],["humidity",{"_index":417,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"miscellaneous/variables.html":{}}}],["humidity'},{'name",{"_index":78,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["humiditycomponent",{"_index":77,"title":{"components/HumidityComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["humiditycomponent.characteristicuuid",{"_index":661,"title":{},"body":{"components/HumidityComponent.html":{}}}],["humiditycomponent.serviceuuid",{"_index":660,"title":{},"body":{"components/HumidityComponent.html":{}}}],["icon",{"_index":201,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["id",{"_index":521,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["identifier",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["ieee11073",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image_block_request",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image_count",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image_notify",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image_status",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["img",{"_index":440,"title":{},"body":{"components/DashboardComponent.html":{}}}],["implements",{"_index":174,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["implied",{"_index":946,"title":{},"body":{"index.html":{},"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["imports",{"_index":39,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["included",{"_index":939,"title":{},"body":{"index.html":{},"license.html":{}}}],["including",{"_index":921,"title":{},"body":{"index.html":{},"license.html":{}}}],["indeterminate",{"_index":287,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/AWBOptions.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["initchart",{"_index":633,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["initialvalue",{"_index":582,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["injectable",{"_index":302,"title":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{}},"body":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":304,"title":{},"body":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"overview.html":{}}}],["injectiontoken",{"_index":19,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["injectiontoken('awboptions",{"_index":38,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["install",{"_index":815,"title":{},"body":{"index.html":{}}}],["installed",{"_index":821,"title":{},"body":{"index.html":{}}}],["instance",{"_index":697,"title":{},"body":{"injectables/ServerWebBluetooth.html":{}}}],["instances",{"_index":779,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["instances.foreach(({characteristicsinstances",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instances.reduce((acc",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer",{"_index":462,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AWBOptions.html":{},"interfaces/Logger.html":{}},"body":{"interfaces/AWBOptions.html":{},"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AWBOptions.html":{},"interfaces/Logger.html":{},"overview.html":{}}}],["interpolation",{"_index":668,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["io",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["issues",{"_index":899,"title":{},"body":{"index.html":{}}}],["it/conventional",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":181,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["key",{"_index":327,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["keypress",{"_index":1105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":944,"title":{},"body":{"index.html":{},"license.html":{}}}],["l",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["labels",{"_index":674,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["launched",{"_index":497,"title":{},"body":{"injectables/DashboardService.html":{}}}],["layoutmodule",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["left",{"_index":435,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["legend",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"overview.html":{}}}],["length",{"_index":665,"title":{},"body":{"components/HumidityComponent.html":{}}}],["level",{"_index":177,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["level'},{'name",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["level.component",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["level.component.ts",{"_index":173,"title":{},"body":{"components/BatteryLevelComponent.html":{},"coverage.html":{}}}],["level.component.ts:103",{"_index":244,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:109",{"_index":232,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:115",{"_index":237,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:119",{"_index":239,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:47",{"_index":263,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:48",{"_index":248,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:50",{"_index":267,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:51",{"_index":256,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:52",{"_index":250,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:53",{"_index":268,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:54",{"_index":265,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:55",{"_index":254,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:58",{"_index":270,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:60",{"_index":230,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:63",{"_index":252,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:64",{"_index":264,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:65",{"_index":251,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:67",{"_index":240,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:78",{"_index":234,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:94",{"_index":241,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["liability",{"_index":959,"title":{},"body":{"index.html":{},"license.html":{}}}],["liable",{"_index":956,"title":{},"body":{"index.html":{},"license.html":{}}}],["license",{"_index":901,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["light",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limitation",{"_index":922,"title":{},"body":{"index.html":{},"license.html":{}}}],["limited",{"_index":947,"title":{},"body":{"index.html":{},"license.html":{}}}],["line",{"_index":331,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{}}}],["linewidth",{"_index":680,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["list",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["listener",{"_index":533,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["listener(mockedevent",{"_index":544,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["listeners",{"_index":522,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["literal",{"_index":611,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/StepCounterComponent.html":{},"miscellaneous/typealiases.html":{}}}],["log",{"_index":360,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["log(...args",{"_index":364,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["log(args",{"_index":369,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["logger",{"_index":368,"title":{"interfaces/Logger.html":{}},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"coverage.html":{}}}],["logger.service",{"_index":29,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["logic",{"_index":853,"title":{},"body":{"index.html":{}}}],["logs",{"_index":825,"title":{},"body":{"index.html":{}}}],["magnetometer",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":819,"title":{},"body":{"index.html":{}}}],["makemetokeninjector",{"_index":37,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["manekinekko/angular",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["manifacturer",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":321,"title":{},"body":{"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["map((dataview",{"_index":509,"title":{},"body":{"injectables/DashboardService.html":{}}}],["map((value",{"_index":841,"title":{},"body":{"index.html":{}}}],["map(({value",{"_index":486,"title":{},"body":{"injectables/DashboardService.html":{}}}],["map(conf",{"_index":401,"title":{},"body":{"components/DashboardComponent.html":{}}}],["map(this._config.decoder",{"_index":337,"title":{},"body":{"injectables/BleService.html":{}}}],["map(uuid",{"_index":567,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["margin",{"_index":423,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["mat",{"_index":200,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["matbuttonmodule",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["matcardmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["matching",{"_index":51,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matexpansionmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["matgridlistmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["math.floor(math.random",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maticonmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["matlistmodule",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["matmenumodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["matprogressspinnermodule",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["matsnackbar",{"_index":229,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["matsnackbarmodule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["mattoolbarmodule",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["max",{"_index":421,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{}}}],["merchantability",{"_index":949,"title":{},"body":{"index.html":{},"license.html":{}}}],["merge",{"_index":481,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{},"license.html":{}}}],["merge(...values",{"_index":511,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mergeall",{"_index":397,"title":{},"body":{"components/DashboardComponent.html":{}}}],["mergemap",{"_index":482,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["mergemap((characteristic",{"_index":874,"title":{},"body":{"index.html":{}}}],["mergemap((gatt",{"_index":500,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["mergemap((gattcharacteristic",{"_index":506,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mergemap((gattservice",{"_index":503,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mergemap((primaryservice",{"_index":869,"title":{},"body":{"index.html":{}}}],["mergemap(conf",{"_index":513,"title":{},"body":{"injectables/DashboardService.html":{}}}],["metadata",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["method",{"_index":838,"title":{},"body":{"index.html":{}}}],["methods",{"_index":158,"title":{},"body":{"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["miscellaneous",{"_index":809,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":814,"title":{},"body":{"index.html":{}}}],["mit",{"_index":902,"title":{},"body":{"index.html":{},"license.html":{}}}],["mocked",{"_index":699,"title":{},"body":{"injectables/ServerWebBluetooth.html":{}}}],["mockedevent",{"_index":540,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["mode",{"_index":213,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["model",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model_number",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":924,"title":{},"body":{"index.html":{},"license.html":{}}}],["module",{"_index":85,"title":{"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":87,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"modules.html":{},"overview.html":{}}}],["modulewithproviders",{"_index":18,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["more",{"_index":356,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{}}}],["more_vert",{"_index":410,"title":{},"body":{"components/DashboardComponent.html":{}}}],["movement",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["navigateto",{"_index":160,"title":{},"body":{"classes/AppPage.html":{}}}],["navigator.bluetooth",{"_index":349,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["need",{"_index":880,"title":{},"body":{"index.html":{}}}],["new",{"_index":33,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"injectables/BrowserWebBluetooth.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":330,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{}}}],["ngmodule",{"_index":17,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":221,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["ngoninit",{"_index":222,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["node_modules",{"_index":823,"title":{},"body":{"index.html":{}}}],["nologgerservice",{"_index":28,"title":{"injectables/NoLoggerService.html":{}},"body":{"interfaces/AWBOptions.html":{},"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["noninfringement",{"_index":953,"title":{},"body":{"index.html":{},"license.html":{}}}],["note",{"_index":818,"title":{},"body":{"index.html":{}}}],["notice",{"_index":937,"title":{},"body":{"index.html":{},"license.html":{}}}],["notifications",{"_index":844,"title":{},"body":{"index.html":{}}}],["notify",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["now",{"_index":701,"title":{},"body":{"injectables/ServerWebBluetooth.html":{}}}],["npm",{"_index":816,"title":{},"body":{"index.html":{}}}],["null",{"_index":266,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{}}}],["number",{"_index":243,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["oad",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":700,"title":{},"body":{"injectables/ServerWebBluetooth.html":{},"miscellaneous/variables.html":{}}}],["object.keys(characteristics).foreach(characteristicuuid",{"_index":574,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["object.keys(characteristicsinstances",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(config).map(servicename",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(this.characteristics",{"_index":579,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["object.keys(this.services",{"_index":564,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["object.keys(titag).map(key",{"_index":1034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtaining",{"_index":913,"title":{},"body":{"index.html":{},"license.html":{}}}],["ondestroy",{"_index":176,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["oninit",{"_index":175,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["open",{"_index":898,"title":{},"body":{"index.html":{}}}],["optional",{"_index":11,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{}}}],["optionalservices",{"_index":491,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["options",{"_index":35,"title":{},"body":{"interfaces/AWBOptions.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["options.enabletracing",{"_index":36,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["otherwise",{"_index":964,"title":{},"body":{"index.html":{},"license.html":{}}}],["out",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":972,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":788,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":419,"title":{},"body":{"components/DashboardComponent.html":{}}}],["parameters",{"_index":231,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":951,"title":{},"body":{"index.html":{},"license.html":{}}}],["period",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":908,"title":{},"body":{"index.html":{},"license.html":{}}}],["permit",{"_index":931,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":912,"title":{},"body":{"index.html":{},"license.html":{}}}],["persons",{"_index":932,"title":{},"body":{"index.html":{},"license.html":{}}}],["pipe",{"_index":341,"title":{},"body":{"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["platform/browser",{"_index":26,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["pnp_id",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":941,"title":{},"body":{"index.html":{},"license.html":{}}}],["position",{"_index":191,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["post",{"_index":888,"title":{},"body":{"index.html":{}}}],["pr",{"_index":894,"title":{},"body":{"index.html":{}}}],["primary",{"_index":249,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{}}}],["private",{"_index":306,"title":{},"body":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["process",{"_index":496,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["production",{"_index":1033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":882,"title":{},"body":{"index.html":{}}}],["projects/.../bluetooth.module.ts",{"_index":811,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../bluetooth.service.ts",{"_index":978,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../ti",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/manekinekko/angular",{"_index":6,"title":{},"body":{"interfaces/AWBOptions.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":164,"title":{},"body":{"classes/AppPage.html":{},"injectables/BrowserWebBluetooth.html":{}}}],["promise.resolve",{"_index":563,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["promise.resolve(fakedevice",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise.resolve(this",{"_index":559,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["promise.resolve(this.characteristics[uuid",{"_index":577,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["promise.resolve(this.services[uuid",{"_index":561,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["promise.resolve(this.value",{"_index":590,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["protractor",{"_index":166,"title":{},"body":{"classes/AppPage.html":{}}}],["provide",{"_index":45,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":942,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":328,"title":{},"body":{"injectables/BleService.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"index.html":{}}}],["providers",{"_index":44,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":210,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["publish",{"_index":925,"title":{},"body":{"index.html":{},"license.html":{}}}],["purpose",{"_index":952,"title":{},"body":{"index.html":{},"license.html":{}}}],["random",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomvaluefn",{"_index":583,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"miscellaneous/variables.html":{}}}],["read",{"_index":863,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":381,"title":{},"body":{"components/DashboardComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["readvalue",{"_index":589,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["readvalueoptions",{"_index":979,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["release",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["request_new_parameters",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestdevice",{"_index":344,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"miscellaneous/variables.html":{}}}],["requestdevice(options",{"_index":346,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["requestdeviceoptions",{"_index":347,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":862,"title":{},"body":{"index.html":{}}}],["requestvalue",{"_index":223,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["reset",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["restriction",{"_index":920,"title":{},"body":{"index.html":{},"license.html":{}}}],["result",{"_index":50,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":52,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":32,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":163,"title":{},"body":{"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["rgba(119,119,119,0.18",{"_index":672,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["rgba(255,161,161,0.30",{"_index":682,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["right",{"_index":436,"title":{},"body":{"components/DashboardComponent.html":{},"index.html":{}}}],["rights",{"_index":923,"title":{},"body":{"index.html":{},"license.html":{}}}],["root",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/BleService.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"index.html":{}}}],["root'},{'name",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["row",{"_index":184,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["run",{"_index":884,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":271,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":322,"title":{},"body":{"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["s",{"_index":817,"title":{},"body":{"index.html":{}}}],["section",{"_index":418,"title":{},"body":{"components/DashboardComponent.html":{}}}],["see",{"_index":354,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["selector",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["sell",{"_index":929,"title":{},"body":{"index.html":{},"license.html":{}}}],["sensortag2.ts",{"_index":763,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["serial_number",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["series",{"_index":632,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["serverwebbluetooth",{"_index":695,"title":{"injectables/ServerWebBluetooth.html":{}},"body":{"injectables/ServerWebBluetooth.html":{},"coverage.html":{}}}],["serves",{"_index":883,"title":{},"body":{"index.html":{}}}],["service",{"_index":324,"title":{},"body":{"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["service/component",{"_index":829,"title":{},"body":{"index.html":{}}}],["serviceinstance",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servicename",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serviceoptions",{"_index":314,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"miscellaneous/typealiases.html":{}}}],["services",{"_index":553,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["serviceuuid",{"_index":214,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["shall",{"_index":938,"title":{},"body":{"index.html":{},"license.html":{}}}],["size",{"_index":189,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["smart",{"_index":353,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["smoothie",{"_index":658,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"dependencies.html":{}}}],["smoothiechart",{"_index":643,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["snackbar",{"_index":215,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["software",{"_index":915,"title":{},"body":{"index.html":{},"license.html":{}}}],["software_rev",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["span",{"_index":187,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["span')).gettext",{"_index":170,"title":{},"body":{"classes/AppPage.html":{}}}],["specific",{"_index":854,"title":{},"body":{"index.html":{}}}],["spinner",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["src/.../app.module.ts",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ble.service.ts",{"_index":980,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../dashboard.service.ts",{"_index":981,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../environment.prod.ts",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../fake.utils.ts",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/ble.service.ts",{"_index":305,"title":{},"body":{"injectables/BleService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/ble.service.ts:17",{"_index":312,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:19",{"_index":320,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:21",{"_index":315,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:25",{"_index":317,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:29",{"_index":318,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:35",{"_index":319,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:46",{"_index":316,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/dashboard/dashboard.component.ts",{"_index":375,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/dashboard.component.ts:13",{"_index":394,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:15",{"_index":395,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:17",{"_index":384,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:20",{"_index":392,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:21",{"_index":393,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:24",{"_index":388,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:26",{"_index":389,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:38",{"_index":391,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:49",{"_index":385,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:54",{"_index":386,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:58",{"_index":387,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.service.ts",{"_index":442,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/dashboard/dashboard.service.ts:103",{"_index":456,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:111",{"_index":457,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:136",{"_index":459,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:144",{"_index":451,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:148",{"_index":453,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:155",{"_index":449,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:17",{"_index":480,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:55",{"_index":447,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:57",{"_index":460,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:99",{"_index":448,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/fake.utils.ts",{"_index":773,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/thingy52/battery",{"_index":172,"title":{},"body":{"components/BatteryLevelComponent.html":{},"coverage.html":{}}}],["src/app/thingy52/humidity.component.ts",{"_index":627,"title":{},"body":{"components/HumidityComponent.html":{},"coverage.html":{}}}],["src/app/thingy52/humidity.component.ts:21",{"_index":652,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:22",{"_index":642,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:24",{"_index":651,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:25",{"_index":644,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:26",{"_index":655,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:27",{"_index":654,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:30",{"_index":648,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:32",{"_index":656,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:34",{"_index":634,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:37",{"_index":649,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:38",{"_index":653,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:40",{"_index":639,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:51",{"_index":637,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:61",{"_index":640,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:71",{"_index":641,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:78",{"_index":635,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:85",{"_index":636,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:89",{"_index":638,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts",{"_index":702,"title":{},"body":{"components/StepCounterComponent.html":{},"coverage.html":{}}}],["src/app/thingy52/stepcounter.component.ts:34",{"_index":720,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:35",{"_index":718,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:37",{"_index":724,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:38",{"_index":722,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:39",{"_index":723,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:41",{"_index":725,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:43",{"_index":711,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:46",{"_index":719,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:47",{"_index":721,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:49",{"_index":715,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:58",{"_index":716,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:67",{"_index":717,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:72",{"_index":712,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:77",{"_index":713,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:81",{"_index":714,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/temperature.component.ts",{"_index":729,"title":{},"body":{"components/TemperatureComponent.html":{},"coverage.html":{}}}],["src/app/thingy52/temperature.component.ts:22",{"_index":743,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:23",{"_index":738,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:25",{"_index":742,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:26",{"_index":739,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:27",{"_index":746,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:28",{"_index":745,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:31",{"_index":740,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:33",{"_index":747,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:35",{"_index":730,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:38",{"_index":741,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:39",{"_index":744,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:41",{"_index":735,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:52",{"_index":733,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:73",{"_index":736,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:82",{"_index":737,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:88",{"_index":731,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:95",{"_index":732,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:99",{"_index":734,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/environments/environment.prod.ts",{"_index":783,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":785,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["start().then",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["startblog",{"_index":887,"title":{},"body":{"index.html":{}}}],["started",{"_index":813,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starter",{"_index":881,"title":{},"body":{"index.html":{}}}],["state",{"_index":1107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":42,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["step",{"_index":415,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["stepcounter",{"_index":703,"title":{},"body":{"components/StepCounterComponent.html":{},"miscellaneous/variables.html":{}}}],["stepcounter'},{'name",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["stepcountercomponent",{"_index":79,"title":{"components/StepCounterComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["stepcountercomponent.characteristicuuid",{"_index":727,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["stepcountercomponent.serviceuuid",{"_index":726,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["sticky",{"_index":427,"title":{},"body":{"components/DashboardComponent.html":{}}}],["stop",{"_index":842,"title":{},"body":{"index.html":{}}}],["stream",{"_index":310,"title":{},"body":{"injectables/BleService.html":{},"index.html":{}}}],["streamsby",{"_index":445,"title":{},"body":{"injectables/DashboardService.html":{}}}],["streamsby(service",{"_index":455,"title":{},"body":{"injectables/DashboardService.html":{}}}],["streamsubscription",{"_index":216,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["string",{"_index":236,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["strokestyle",{"_index":671,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["styles",{"_index":171,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["styleurls",{"_index":377,"title":{},"body":{"components/DashboardComponent.html":{}}}],["subject",{"_index":934,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["sublicense",{"_index":927,"title":{},"body":{"index.html":{},"license.html":{}}}],["subscribe",{"_index":403,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["subscribe((value",{"_index":278,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["subscribe(device",{"_index":283,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["subscribed",{"_index":843,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":253,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["substantial",{"_index":940,"title":{},"body":{"index.html":{},"license.html":{}}}],["sup",{"_index":198,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["support",{"_index":352,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"modules.html":{}}}],["sure",{"_index":820,"title":{},"body":{"index.html":{}}}],["svg",{"_index":968,"title":{},"body":{"modules.html":{}}}],["system_id",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":787,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":786,"title":{},"body":{"coverage.html":{}}}],["takeuntil(disconnectsubject",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tap(_",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target",{"_index":541,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["temperature",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["temperaturecomponent",{"_index":81,"title":{"components/TemperatureComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["temperaturecomponent.characteristicuuid",{"_index":749,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["temperaturecomponent.serviceuuid",{"_index":748,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["template",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["templateurl",{"_index":379,"title":{},"body":{"components/DashboardComponent.html":{}}}],["test",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text",{"_index":185,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["thingy52/battery",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["thingy52/humidity.component",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["thingy52/stepcounter.component",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["thingy52/temperature.component",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["this._config",{"_index":334,"title":{},"body":{"injectables/BleService.html":{}}}],["this._config.characteristic",{"_index":340,"title":{},"body":{"injectables/BleService.html":{}}}],["this._config.service",{"_index":339,"title":{},"body":{"injectables/BleService.html":{}}}],["this.ble",{"_index":338,"title":{},"body":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"index.html":{}}}],["this.ble.disconnectdevice",{"_index":342,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["this.ble.discover",{"_index":489,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.getcharacteristic$(gattservice",{"_index":505,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.getcharacteristic$(primaryservice",{"_index":870,"title":{},"body":{"index.html":{}}}],["this.ble.getdevice",{"_index":335,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["this.ble.getgatt",{"_index":499,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.getprimaryservice$(gatt",{"_index":502,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["this.ble.readvalue$(characteristic",{"_index":875,"title":{},"body":{"index.html":{}}}],["this.ble.readvalue$(gattcharacteristic",{"_index":508,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.requestdevice(options",{"_index":358,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["this.ble.streamdetailedvalues",{"_index":484,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.streamvalues$().pipe",{"_index":336,"title":{},"body":{"injectables/BleService.html":{},"index.html":{}}}],["this.ble.streamvalues$().pipe(map((value",{"_index":851,"title":{},"body":{"index.html":{}}}],["this.characteristics[characteristicuuid].service",{"_index":575,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.characteristics[uuid",{"_index":580,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.chart",{"_index":666,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chart.addtimeseries(this.series",{"_index":679,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chart.start",{"_index":687,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chart.stop",{"_index":684,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chart.streamto(canvas",{"_index":683,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chartref.nativeelement",{"_index":664,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.color",{"_index":284,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.config",{"_index":483,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.config.find(conf",{"_index":514,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.config.map(c",{"_index":492,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.connected",{"_index":557,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.console.log('[dashboardservice::values",{"_index":494,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.console.log('reading",{"_index":294,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.dashboardservice.device",{"_index":272,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.dashboardservice.streamsby",{"_index":275,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.dashboardservice.valuesby",{"_index":293,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.dashboardservice?.disconnectdevice",{"_index":296,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.device",{"_index":282,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.device.connect",{"_index":558,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.device.disconnect",{"_index":570,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.devicesubscription",{"_index":281,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.devicesubscription?.unsubscribe",{"_index":297,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.getdecoder(service",{"_index":487,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.getdevicestatus",{"_index":273,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.haserror(error",{"_index":280,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.haserror.bind(this",{"_index":291,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.id",{"_index":547,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.initchart",{"_index":659,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.initialvalue",{"_index":587,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners",{"_index":550,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners.characteristicvaluechanged.foreach(listener",{"_index":592,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners.gattserverconnected.foreach(listener",{"_index":543,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners.gattserverdisconnected.foreach(listener",{"_index":546,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners[type",{"_index":539,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.mode",{"_index":286,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.name",{"_index":549,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.properties",{"_index":586,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.randomvaluefn",{"_index":588,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.series",{"_index":662,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.series.append(date.now",{"_index":686,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.series.clear",{"_index":688,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.service.device",{"_index":399,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.service.disconnectdevice",{"_index":407,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.service.values",{"_index":400,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.services[uuid",{"_index":568,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.snackbar.open(error",{"_index":299,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.streamsubscription",{"_index":274,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.streamsubscription?.unsubscribe",{"_index":301,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.updatevalue(value",{"_index":279,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.uuid",{"_index":585,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.value",{"_index":288,"title":{},"body":{"components/BatteryLevelComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/StepCounterComponent.html":{}}}],["this.values",{"_index":512,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.valuessubscription",{"_index":292,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.valuessubscription?.unsubscribe",{"_index":298,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["throw",{"_index":350,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["ti_sensorag_services",{"_index":764,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":475,"title":{},"body":{"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{}}}],["timer(0",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeseries",{"_index":650,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["titag",{"_index":765,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["titag[key].service",{"_index":1035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toolbar.mat",{"_index":426,"title":{},"body":{"components/DashboardComponent.html":{}}}],["tooltip",{"_index":678,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["top",{"_index":193,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["tort",{"_index":963,"title":{},"body":{"index.html":{},"license.html":{}}}],["tree",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["trigger",{"_index":865,"title":{},"body":{"index.html":{}}}],["true",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":329,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":975,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/web",{"_index":801,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["undefined",{"_index":548,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["unknown",{"_index":542,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"miscellaneous/variables.html":{}}}],["updatevalue",{"_index":224,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["updatevalue(value",{"_index":242,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["use",{"_index":828,"title":{},"body":{"index.html":{},"license.html":{}}}],["usefactory",{"_index":46,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/variables.html":{}}}],["usevalue",{"_index":47,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["using",{"_index":835,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":554,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"miscellaneous/variables.html":{}}}],["uuids",{"_index":618,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["uuids.includes(uuid",{"_index":566,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["value",{"_index":205,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value.count",{"_index":728,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["value.getint8(0",{"_index":463,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["value.getuint32(0",{"_index":474,"title":{},"body":{"injectables/DashboardService.html":{}}}],["value.getuint32(4",{"_index":476,"title":{},"body":{"injectables/DashboardService.html":{}}}],["value.getuint8(0",{"_index":852,"title":{},"body":{"index.html":{}}}],["value.getuint8(1",{"_index":465,"title":{},"body":{"injectables/DashboardService.html":{}}}],["value.service",{"_index":405,"title":{},"body":{"components/DashboardComponent.html":{}}}],["values",{"_index":382,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["values(service",{"_index":390,"title":{},"body":{"components/DashboardComponent.html":{}}}],["valuesby",{"_index":446,"title":{},"body":{"injectables/DashboardService.html":{}}}],["valuesby(service",{"_index":458,"title":{},"body":{"injectables/DashboardService.html":{}}}],["valuessubscription",{"_index":217,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["var",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["variable",{"_index":332,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"coverage.html":{}}}],["variables",{"_index":982,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["viewchild",{"_index":657,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["viewchild('chart",{"_index":647,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["void",{"_index":233,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["want",{"_index":860,"title":{},"body":{"index.html":{}}}],["warn",{"_index":285,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["warn(...args",{"_index":366,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["warn(args",{"_index":371,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["warranties",{"_index":948,"title":{},"body":{"index.html":{},"license.html":{}}}],["warranty",{"_index":943,"title":{},"body":{"index.html":{},"license.html":{}}}],["wassim",{"_index":906,"title":{},"body":{"index.html":{},"license.html":{}}}],["way",{"_index":831,"title":{},"body":{"index.html":{}}}],["weather",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web",{"_index":7,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["webbluetoothmodule",{"_index":41,"title":{"modules/WebBluetoothModule.html":{}},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["webbluetoothmodule.forroot",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":896,"title":{},"body":{"index.html":{}}}],["whether",{"_index":960,"title":{},"body":{"index.html":{},"license.html":{}}}],["width",{"_index":195,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["window.smoothiechart",{"_index":667,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["window.timeseries",{"_index":663,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["without",{"_index":919,"title":{},"body":{"index.html":{},"license.html":{}}}],["yes",{"_index":596,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["z",{"_index":428,"title":{},"body":{"components/DashboardComponent.html":{}}}],["zone.js",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AWBOptions.html":{"url":"interfaces/AWBOptions.html","title":"interface - AWBOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AWBOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        enableTracing\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableTracing\n                                    \n                                \n                                \n                                    \n                                        enableTracing:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgModule, ModuleWithProviders, InjectionToken, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BluetoothCore } from './bluetooth.service';\nimport { BrowserWebBluetooth } from './platform/browser';\n\nimport { ConsoleLoggerService, NoLoggerService } from './logger.service';\n\nexport interface AWBOptions {\n  enableTracing?: boolean;\n}\n\nexport function browserWebBluetooth() {\n  return new BrowserWebBluetooth();\n}\n\nexport function consoleLoggerServiceConfig(options: AWBOptions) {\n  if (options && options.enableTracing) {\n    return new ConsoleLoggerService();\n  } else {\n    return new NoLoggerService();\n  }\n}\nexport function makeMeTokenInjector() {\n  return new InjectionToken('AWBOptions');\n}\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class WebBluetoothModule {\n  static forRoot(options: AWBOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: WebBluetoothModule,\n      providers: [\n        BluetoothCore,\n        {\n          provide: BrowserWebBluetooth,\n          useFactory: browserWebBluetooth\n        },\n        {\n          provide: makeMeTokenInjector,\n          useValue: options\n        },\n        {\n          provide: ConsoleLoggerService,\n          useFactory: consoleLoggerServiceConfig,\n          deps: [makeMeTokenInjector]\n        }\n      ]\n    };\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-root\n            \n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ble-root',\n  template: `\n   \n  `\n})\nexport class AppComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nBatteryLevelComponent\n\nBatteryLevelComponent\n\nAppModule -->\n\nBatteryLevelComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nHumidityComponent\n\nHumidityComponent\n\nAppModule -->\n\nHumidityComponent->AppModule\n\n\n\n\n\nStepCounterComponent\n\nStepCounterComponent\n\nAppModule -->\n\nStepCounterComponent->AppModule\n\n\n\n\n\nTemperatureComponent\n\nTemperatureComponent\n\nAppModule -->\n\nTemperatureComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nWebBluetoothModule\n\nWebBluetoothModule\n\nAppModule -->\n\nWebBluetoothModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            BatteryLevelComponent\n                        \n                        \n                            DashboardComponent\n                        \n                        \n                            HumidityComponent\n                        \n                        \n                            StepCounterComponent\n                        \n                        \n                            TemperatureComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            WebBluetoothModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { LayoutModule } from '@angular/cdk/layout';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {\n  BluetoothCore,\n  BrowserWebBluetooth,\n  ConsoleLoggerService,\n  WebBluetoothModule\n} from '@manekinekko/angular-web-bluetooth';\nimport { AppComponent } from './app.component';\nimport { DashboardService } from './dashboard/dashboard.service';\nimport { BatteryLevelComponent } from './thingy52/battery-level.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HumidityComponent } from './thingy52/humidity.component';\nimport { StepCounterComponent } from './thingy52/stepcounter.component';\nimport { TemperatureComponent } from './thingy52/temperature.component';\nimport { fakeBrowserWebBluetooth, start } from './fake.utils';\n\nconst bleCore = (b: BrowserWebBluetooth, l: ConsoleLoggerService) => new BluetoothCore(b, l);\nconst fakeBleCore = (b: BrowserWebBluetooth, l: ConsoleLoggerService) => {\n  start().then();\n  return new BluetoothCore(fakeBrowserWebBluetooth as BrowserWebBluetooth, l);\n};\n\nconst PROVIDERS = [\n  {\n    provide: BluetoothCore,\n    useFactory: fakeBleCore, // bleCore or fakeBleCore\n    deps: [BrowserWebBluetooth, ConsoleLoggerService]\n  }, {\n    provide: DashboardService,\n    useFactory: (b: BluetoothCore, l: ConsoleLoggerService) => {\n      return new DashboardService(b, l);\n    },\n    deps: [BluetoothCore, ConsoleLoggerService]\n  }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BatteryLevelComponent,\n    TemperatureComponent,\n    HumidityComponent,\n    StepCounterComponent,\n    DashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    WebBluetoothModule.forRoot({\n      enableTracing: true\n    }),\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatListModule,\n    MatExpansionModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule\n  ],\n  providers: PROVIDERS,\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPage.html":{"url":"classes/AppPage.html","title":"class - AppPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            e2e/src/app.po.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTitleText\n                            \n                            \n                                navigateTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTitleText\n                        \n                        \n                    \n                \n            \n            \n                \ngetTitleText()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateTo\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateTo()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise {\n    return browser.get(browser.baseUrl) as Promise;\n  }\n\n  getTitleText(): Promise {\n    return element(by.css('app-root .content span')).getText() as Promise;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BatteryLevelComponent.html":{"url":"components/BatteryLevelComponent.html","title":"component - BatteryLevelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BatteryLevelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/thingy52/battery-level.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-battery-level\n            \n\n\n            \n                styles\n                \n  :host {\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    text-align: center;\n  }\n  span {\n    font-size: 3em;\n    position: absolute;\n    top: 111px;\n    width: 100px;\n    display: block;\n    text-align: center;\n  }\n  sup {\n    font-size: 24px;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 255px;\n    font-size: 38px;\n  }\n  \n            \n\n            \n                template\n                {{ value || \"000\" }}%\n\n\nbattery_charging_full\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                characteristicUUID\n                            \n                            \n                                color\n                            \n                            \n                                    Public\n                                console\n                            \n                            \n                                    Public\n                                dashboardService\n                            \n                            \n                                deviceSubscription\n                            \n                            \n                                mode\n                            \n                            \n                                    Static\n                                serviceUUID\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                streamSubscription\n                            \n                            \n                                value\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                getDeviceStatus\n                            \n                            \n                                hasError\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService, snackBar: MatSnackBar, console: ConsoleLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/thingy52/battery-level.component.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        console\n                                                  \n                                                        \n                                                                        ConsoleLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDeviceStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetDeviceStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateValue\n                        \n                        \n                    \n                \n            \n            \n                \nupdateValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            characteristicUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'battery_level'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'primary'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            console\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsoleLoggerService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dashboardService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deviceSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'determinate'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            serviceUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothServiceUUID\n\n                        \n                    \n                    \n                        \n                            Default value : '0000180f-0000-1000-8000-00805f9b34fb'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            streamSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:53\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/thingy52/battery-level.component.ts:58\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ConsoleLoggerService } from '@manekinekko/angular-web-bluetooth';\nimport { Subscription } from 'rxjs';\nimport { DashboardService } from '../dashboard/dashboard.service';\n\n\n@Component({\n  selector: 'ble-battery-level',\n  template: `\n    {{ value || \"000\" }}%\n    \n    \n    battery_charging_full\n  `,\n  styles: [`\n  :host {\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    text-align: center;\n  }\n  span {\n    font-size: 3em;\n    position: absolute;\n    top: 111px;\n    width: 100px;\n    display: block;\n    text-align: center;\n  }\n  sup {\n    font-size: 24px;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 255px;\n    font-size: 38px;\n  }\n  `],\n})\nexport class BatteryLevelComponent implements OnInit, OnDestroy {\n  static serviceUUID: BluetoothServiceUUID = '0000180f-0000-1000-8000-00805f9b34fb';\n  static characteristicUUID: BluetoothCharacteristicUUID = 'battery_level';\n\n  value = null;\n  mode = 'determinate';\n  color = 'primary';\n  valuesSubscription: Subscription;\n  streamSubscription: Subscription;\n  deviceSubscription: Subscription;\n\n\n  get device() {\n    return this.dashboardService.device();\n  }\n\n  constructor(\n    public dashboardService: DashboardService,\n    public snackBar: MatSnackBar,\n    public console: ConsoleLoggerService) {}\n\n  ngOnInit() {\n    this.getDeviceStatus();\n\n    this.streamSubscription = this.dashboardService.streamsBy(\n      BatteryLevelComponent.serviceUUID,\n      BatteryLevelComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  getDeviceStatus() {\n    this.deviceSubscription = this.device\n      .subscribe(device => {\n        if (device) {\n          this.color = 'warn';\n          this.mode = 'indeterminate';\n          this.value = null;\n        } else {\n          // device not connected or disconnected\n          this.value = null;\n          this.mode = 'determinate';\n          this.color = 'primary';\n        }\n      }, this.hasError.bind(this));\n  }\n\n  requestValue() {\n    this.valuesSubscription = this.dashboardService.valuesBy(\n      BatteryLevelComponent.serviceUUID,\n      BatteryLevelComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  updateValue(value: number) {\n    this.console.log('Reading battery level %d', value);\n    this.value = value;\n    this.mode = 'determinate';\n  }\n\n  disconnect() {\n    this.dashboardService?.disconnectDevice();\n    this.deviceSubscription?.unsubscribe();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n    this.deviceSubscription?.unsubscribe();\n    this.streamSubscription?.unsubscribe();\n  }\n}\n\n\n\n    \n\n\n    \n            \n  :host {\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    text-align: center;\n  }\n  span {\n    font-size: 3em;\n    position: absolute;\n    top: 111px;\n    width: 100px;\n    display: block;\n    text-align: center;\n  }\n  sup {\n    font-size: 24px;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 255px;\n    font-size: 38px;\n  }\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ value || \"000\" }}%battery_charging_full'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BatteryLevelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BleService.html":{"url":"injectables/BleService.html","title":"injectable - BleService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/ble.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _config\n                            \n                            \n                                    Public\n                                ble\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                            \n                                disconnectDevice\n                            \n                            \n                                getDevice\n                            \n                            \n                                stream\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ble: BluetoothCore)\n                    \n                \n                        \n                            \n                                Defined in src/app/ble.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ble\n                                                  \n                                                        \n                                                                        BluetoothCore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig(options: ServiceOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ServiceOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnectDevice\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnectDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDevice\n                        \n                        \n                    \n                \n            \n            \n                \ngetDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stream\n                        \n                        \n                    \n                \n            \n            \n                \nstream()\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            value\n                        \n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ServiceOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/ble.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ble\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BluetoothCore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/ble.service.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BluetoothCore } from '@manekinekko/angular-web-bluetooth';\nimport { map } from 'rxjs/operators';\n\ntype ServiceOptions = {\n    characteristic: string;\n    service: string,\n    decoder(value: DataView): number | {[key: string]: number}\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BleService {\n\n    // tslint:disable-next-line: variable-name\n    private _config: ServiceOptions;\n\n  constructor(public ble: BluetoothCore) {}\n\n  config(options: ServiceOptions) {\n    this._config = options;\n  }\n\n  getDevice() {\n    return this.ble.getDevice$();\n  }\n\n  stream() {\n    return this.ble.streamValues$().pipe(\n      map(this._config.decoder)\n    );\n  }\n\n  value() {\n    return this.ble\n      .value$({\n        service: this._config.service,\n        characteristic: this._config.characteristic\n      })\n      .pipe(\n        map(this._config.decoder)\n      );\n  }\n\n  disconnectDevice() {\n    this.ble.disconnectDevice();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BrowserWebBluetooth.html":{"url":"injectables/BrowserWebBluetooth.html","title":"injectable - BrowserWebBluetooth","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BrowserWebBluetooth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                ble\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                requestDevice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestDevice\n                        \n                        \n                    \n                \n            \n            \n                \nrequestDevice(options: RequestDeviceOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            RequestDeviceOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ble\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts:5\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class BrowserWebBluetooth {\n  private ble;\n\n  constructor() {\n    this.ble = navigator.bluetooth;\n    if (!this.ble) {\n      throw new Error('Your browser does not support Smart Bluetooth. See http://caniuse.com/#search=Bluetooth for more details.');\n    }\n  }\n\n  requestDevice(options: RequestDeviceOptions): Promise {\n    return this.ble.requestDevice(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsoleLoggerService.html":{"url":"injectables/ConsoleLoggerService.html","title":"injectable - ConsoleLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConsoleLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            error\n                        \n                        \n                    \n                \n            \n            \n                \nerror(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            log\n                        \n                        \n                    \n                \n            \n            \n                \nlog(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \nwarn(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Logger {\n  log(args: string[]): void;\n  error(args: string[]): void;\n  warn(args: string[]): void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConsoleLoggerService implements Logger {\n  log(...args) {\n    console.log.apply(console, args);\n  }\n  error(...args) {\n    console.error.apply(console, args);\n  }\n  warn(...args) {\n    console.warn.apply(console, args);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoLoggerService implements Logger {\n  log(...args) {}\n  error(...args) {}\n  warn(...args) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DashboardComponent.html":{"url":"components/DashboardComponent.html","title":"component - DashboardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/dashboard.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-dashboard\n            \n\n            \n                styleUrls\n                ./dashboard.component.css\n            \n\n\n\n            \n                templateUrl\n                ./dashboard.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                service\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                hasError\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                            \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: DashboardService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/dashboard.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            values\n                        \n                        \n                    \n                \n            \n            \n                \nvalues(service: BluetoothServiceUUID)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            service\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.component.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dashboard/dashboard.component.ts:15\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\nimport { filter, map, mergeAll } from 'rxjs/operators';\nimport { DashboardService } from './dashboard.service';\n\n@Component({\n  selector: 'ble-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnDestroy, OnInit {\n  valuesSubscription: Subscription;\n\n  get device() {\n    return this.service.device();\n  }\n\n  constructor(\n    public readonly service: DashboardService,\n    public snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit() {}\n\n  requestValue() {\n    this.valuesSubscription = this.service.values()\n      .pipe(\n        map(conf => conf.value),\n        mergeAll(),\n      )\n      .subscribe(\n      () => null,\n      error => this.hasError(error)\n    );\n  }\n\n  values(service: BluetoothServiceUUID){\n    return this.service.values()\n      .pipe(\n        filter(value => value.service === service),\n        map(conf => ({\n          characteristic: conf.characteristic,\n          value: conf.value\n        }))\n      );\n  }\n\n  disconnect() {\n    this.service.disconnectDevice();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n  }\n}\n\n    \n\n    \n        \n  \n  Angular Web BLE Demo\n  \n    more_vert\n  \n  \n    \n      bluetooth_searching\n      Connect\n    \n    \n      bluetooth_disabled\n      Disconnect\n    \n  \n\n\n\n  \n\n    \n\n    \n      \n        \n          \n            Battery Level\n            \n              more_vert\n            \n            \n              \n                bluetooth_searching\n                Connect\n              \n              \n                bluetooth_disabled\n                Disconnect\n              \n            \n          \n          \n            {{ connectedDevice.name }}\n          \n        \n        \n          \n        \n      \n    \n\n    \n\n    \n      \n        \n          \n            Step Counter\n            \n              more_vert\n            \n            \n              \n                bluetooth_searching\n                Connect\n              \n              \n                bluetooth_disabled\n                Disconnect\n              \n            \n          \n          \n            {{ connectedDevice.name }}\n          \n        \n        \n          \n        \n      \n    \n\n    \n\n    \n      \n        \n          \n            Humidity Level\n            \n              more_vert\n            \n            \n              \n                bluetooth_searching\n                Connect\n              \n              \n                bluetooth_disabled\n                Disconnect\n              \n            \n          \n          \n            {{ connectedDevice.name }}\n          \n        \n        \n          \n        \n      \n    \n\n    \n\n    \n      \n        \n          \n            Temperature\n            \n              more_vert\n            \n            \n              \n                bluetooth_searching\n                Connect\n              \n              \n                bluetooth_disabled\n                Disconnect\n              \n            \n          \n          \n            {{ connectedDevice.name }}\n          \n        \n        \n          \n        \n      \n    \n\n  \n\n\n    \n\n    \n                \n                    ./dashboard.component.css\n                \n                section {\n  padding: 40px;\n  max-width: 700px;\n  margin: 0 auto;\n}\n\n.mat-toolbar.mat-primary {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.grid-container {\n  margin: 20px;\n}\n\n.dashboard-card {\n  position: absolute;\n  top: 15px;\n  left: 15px;\n  right: 15px;\n  bottom: 15px;\n}\n\n.more-button {\n  position: absolute;\n  top: 5px;\n  right: 10px;\n}\n\n.dashboard-card-content {\n  text-align: center;\n}\n\n\nimg {\n  width: 32px;\n  margin: 0 10px;\n}\n\n.mat-icon {\n  margin: 0 10px 0 0;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Angular Web BLE Demo      more_vert              bluetooth_searching      Connect              bluetooth_disabled      Disconnect                                                    Battery Level                          more_vert                                                      bluetooth_searching                Connect                                            bluetooth_disabled                Disconnect                                                          {{ connectedDevice.name }}                                                                                                  Step Counter                          more_vert                                                      bluetooth_searching                Connect                                            bluetooth_disabled                Disconnect                                                          {{ connectedDevice.name }}                                                                                                  Humidity Level                          more_vert                                                      bluetooth_searching                Connect                                            bluetooth_disabled                Disconnect                                                          {{ connectedDevice.name }}                                                                                                  Temperature                          more_vert                                                      bluetooth_searching                Connect                                            bluetooth_disabled                Disconnect                                                          {{ connectedDevice.name }}                                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DashboardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardService.html":{"url":"injectables/DashboardService.html","title":"injectable - DashboardService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DashboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dashboard/dashboard.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ble\n                            \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Public\n                                console\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                device\n                            \n                            \n                                disconnectDevice\n                            \n                            \n                                getDecoder\n                            \n                            \n                                getServicePredicate\n                            \n                            \n                                streamsBy\n                            \n                            \n                                values\n                            \n                            \n                                valuesBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ble: BluetoothCore, console: ConsoleLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/dashboard.service.ts:55\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ble\n                                                  \n                                                        \n                                                                        BluetoothCore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        console\n                                                  \n                                                        \n                                                                        ConsoleLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            device\n                        \n                        \n                    \n                \n            \n            \n                \ndevice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnectDevice\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnectDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDecoder\n                        \n                        \n                    \n                \n            \n            \n                \ngetDecoder(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    characteristic\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getServicePredicate\n                        \n                        \n                    \n                \n            \n            \n                \ngetServicePredicate(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    characteristic\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     (conf: any) => boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            streamsBy\n                        \n                        \n                    \n                \n            \n            \n                \nstreamsBy(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    characteristic\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            values\n                        \n                        \n                    \n                \n            \n            \n                \nvalues()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            valuesBy\n                        \n                        \n                    \n                \n            \n            \n                \nvaluesBy(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    characteristic\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ble\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BluetoothCore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.service.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ServiceOptions[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    // temperature\n    {\n      decoder: (value: DataView) => {\n        const integer = value.getInt8(0);\n        const decimal = value.getUint8(1);\n        return integer + decimal / 100;\n      },\n      characteristic: 'ef680201-9b35-4933-9b10-52ffa9740042',\n      service: 'ef680200-9b35-4933-9b10-52ffa9740042'\n    },\n    // step counter\n    {\n      decoder: (value: DataView) => {\n        const count = value.getUint32(0, true);\n        const time = value.getUint32(4, true);\n        return {\n          count,\n          time\n        };\n      },\n      service: 'ef680400-9b35-4933-9b10-52ffa9740042',\n      characteristic: 'ef680405-9b35-4933-9b10-52ffa9740042'\n    },\n\n    // humidity\n    {\n      decoder: (value: DataView) => value.getInt8(0),\n      service: 'ef680200-9b35-4933-9b10-52ffa9740042',\n      characteristic: 'ef680203-9b35-4933-9b10-52ffa9740042'\n    },\n\n    // battery level\n    {\n      decoder: (value: DataView) => value.getInt8(0),\n      service: '0000180f-0000-1000-8000-00805f9b34fb',\n      characteristic: 'battery_level'\n    }\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            console\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsoleLoggerService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.service.ts:57\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { merge, of } from 'rxjs';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport { BluetoothCore, ConsoleLoggerService } from '@manekinekko/angular-web-bluetooth';\n\ntype ServiceOptions = {\n  characteristic: string;\n  service: string;\n  decoder(value: DataView): number | { [key: string]: number };\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n  // tslint:disable-next-line: variable-name\n  private config: ServiceOptions[] = [\n    // temperature\n    {\n      decoder: (value: DataView) => {\n        const integer = value.getInt8(0);\n        const decimal = value.getUint8(1);\n        return integer + decimal / 100;\n      },\n      characteristic: 'ef680201-9b35-4933-9b10-52ffa9740042',\n      service: 'ef680200-9b35-4933-9b10-52ffa9740042'\n    },\n    // step counter\n    {\n      decoder: (value: DataView) => {\n        const count = value.getUint32(0, true);\n        const time = value.getUint32(4, true);\n        return {\n          count,\n          time\n        };\n      },\n      service: 'ef680400-9b35-4933-9b10-52ffa9740042',\n      characteristic: 'ef680405-9b35-4933-9b10-52ffa9740042'\n    },\n\n    // humidity\n    {\n      decoder: (value: DataView) => value.getInt8(0),\n      service: 'ef680200-9b35-4933-9b10-52ffa9740042',\n      characteristic: 'ef680203-9b35-4933-9b10-52ffa9740042'\n    },\n\n    // battery level\n    {\n      decoder: (value: DataView) => value.getInt8(0),\n      service: '0000180f-0000-1000-8000-00805f9b34fb',\n      characteristic: 'battery_level'\n    }\n  ];\n\n  constructor(public ble: BluetoothCore, public console: ConsoleLoggerService) {\n    // this.config = [\n    //   // temperature\n    //   {\n    //     decoder: (value: DataView) => {\n    //       const integer = value.getInt8(0);\n    //       const decimal = value.getUint8(1);\n    //       return integer + decimal / 100;\n    //     },\n    //     characteristic: 'ef680201-9b35-4933-9b10-52ffa9740042',\n    //     service: 'ef680200-9b35-4933-9b10-52ffa9740042'\n    //   },\n    //   // step counter\n    //   {\n    //     decoder: (value: DataView) => {\n    //       const count = value.getUint32(0, true);\n    //       const time = value.getUint32(4, true);\n    //       return {\n    //         count,\n    //         time\n    //       };\n    //     },\n    //     service: 'ef680400-9b35-4933-9b10-52ffa9740042',\n    //     characteristic: 'ef680405-9b35-4933-9b10-52ffa9740042'\n    //   },\n    //\n    //   // humidity\n    //   {\n    //     decoder: (value: DataView) => value.getInt8(0),\n    //     service: 'ef680200-9b35-4933-9b10-52ffa9740042',\n    //     characteristic: 'ef680203-9b35-4933-9b10-52ffa9740042'\n    //   },\n    //\n    //   // battery level\n    //   {\n    //     decoder: (value: DataView) => value.getInt8(0),\n    //     service: '0000180f-0000-1000-8000-00805f9b34fb',\n    //     characteristic: 'battery_level'\n    //   }\n    // ];\n  }\n\n  device() {\n    return this.ble.getDevice$();\n  }\n\n  streamsBy(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID) {\n    return this.ble.streamDetailedValues$()\n        .pipe(\n            filter(this.getServicePredicate(service, characteristic)),\n            map(({value}) => this.getDecoder(service, characteristic)(value)),\n        );\n  }\n\n  values() {\n    this.ble.discover$({\n      acceptAllDevices: true,\n      // optionalServices: this.config.map(c => c.service)\n    }).subscribe(() => {\n      this.console.log('[DashboardService::Values] Discovery process launched');\n    });\n\n    const values = this.config.map(c => {\n      return of({\n        service: c.service,\n        characteristic: c.characteristic,\n        value: this.ble.getGATT$()\n          .pipe(\n            mergeMap((gatt: BluetoothRemoteGATTServer) => this.ble.getPrimaryService$(gatt, c.service)),\n            mergeMap((gattService: BluetoothRemoteGATTService) => this.ble.getCharacteristic$(gattService, c.characteristic)),\n            mergeMap((gattCharacteristic: BluetoothRemoteGATTCharacteristic) => this.ble.readValue$(gattCharacteristic)),\n            map((dataView: DataView) => c.decoder(dataView)),\n          )\n      });\n    });\n\n    return merge(...values);\n  }\n\n  valuesBy(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID) {\n    return this.values()\n      .pipe(\n        filter(this.getServicePredicate(service, characteristic)),\n        mergeMap(conf => conf.value),\n      );\n  }\n\n  getDecoder(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID) {\n    return this.config.find(conf => conf.service === service && conf.characteristic === characteristic)?.decoder;\n  }\n\n  getServicePredicate(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID) {\n    return (conf) => {\n      console.log(conf);\n      return conf.service === service && conf.characteristic === characteristic;\n    };\n  }\n\n  disconnectDevice() {\n    this.ble.disconnectDevice();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FakeBluetoothDevice.html":{"url":"classes/FakeBluetoothDevice.html","title":"class - FakeBluetoothDevice","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FakeBluetoothDevice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gatt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Private\n                                listeners\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEventListener\n                            \n                            \n                                clear\n                            \n                            \n                                connect\n                            \n                            \n                                disconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, name: string)\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gatt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothRemoteGATTServer\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            listeners\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  }\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addEventListener\n                        \n                        \n                    \n                \n            \n            \n                \naddEventListener(type: string, listener: EventListener)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                            EventListener\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            connect\n                        \n                        \n                    \n                \n            \n            \n                \nconnect()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class FakeBluetoothDevice {\n  gatt: BluetoothRemoteGATTServer;\n  private listeners: {\n    [key in 'gattserverconnected' | 'gattserverdisconnected']: EventListener[]\n  } = {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  };\n\n  constructor(public id: string, public name: string) {\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  connect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  disconnect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  clear() {\n    this.id = undefined;\n    this.name = undefined;\n    this.listeners = {\n      gattserverconnected: [],\n      gattserverdisconnected: []\n    };\n  }\n}\n\nexport class FakeBluetoothRemoteGATTServer {\n  connected = false;\n\n  constructor(public device, public services: { [uuid: string]: FakeBluetoothRemoteGATTService } = {}) {\n    device.gatt = this;\n  }\n\n  connect() {\n    this.connected = true;\n    this.device.connect();\n    return Promise.resolve(this);\n  }\n\n  getPrimaryService(uuid: BluetoothServiceUUID) {\n    return Promise.resolve(this.services[uuid]);\n  }\n\n  getPrimaryServices(uuids: BluetoothServiceUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.services)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.services[uuid])\n    );\n  }\n\n  disconnect(callbackFn?: () => void) {\n    this.device.disconnect();\n    this.connected = false;\n    if (callbackFn) {\n      callbackFn();\n    }\n  }\n}\n\nexport class FakeBluetoothRemoteGATTService {\n  constructor(\n    public uuid,\n    public device,\n    public characteristics: {[uuid: string]: FakeBluetoothRemoteGATTCharacteristic}) {\n    Object.keys(characteristics).forEach(characteristicUuid => this.characteristics[characteristicUuid].service = this);\n  }\n\n  getCharacteristic(uuid: BluetoothCharacteristicUUID) {\n    return Promise.resolve(this.characteristics[uuid]);\n  }\n\n  getCharacteristics(uuids: BluetoothCharacteristicUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.characteristics)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.characteristics[uuid])\n    );\n  }\n}\n\nexport class FakeBluetoothRemoteGATTCharacteristic {\n  uuid: BluetoothCharacteristicUUID;\n  service: FakeBluetoothRemoteGATTService;\n  value: DataView;\n  properties: BluetoothCharacteristicProperties;\n  private readonly initialValue: DataView;\n  readonly randomValueFn: () => DataView;\n  private listeners: {\n    [key in 'characteristicvaluechanged']: EventListener[]\n  } = {\n    characteristicvaluechanged: []\n  };\n\n  constructor(\n    uuid: BluetoothCharacteristicUUID,\n    properties: BluetoothCharacteristicProperties,\n    initialValue?: DataView,\n    randomValueFn?: () => DataView) {\n    this.uuid = uuid;\n    this.properties = properties;\n    this.value = initialValue;\n    this.initialValue = initialValue;\n    this.randomValueFn = randomValueFn;\n  }\n\n  readValue() {\n    return Promise.resolve(this.value);\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  changeValue(value: DataView) {\n    this.value = value;\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.characteristicvaluechanged.forEach(listener => {\n      listener(mockedEvent as Event);\n    });\n  }\n\n  clear() {\n    this.value = this.initialValue;\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{"url":"classes/FakeBluetoothRemoteGATTCharacteristic.html","title":"class - FakeBluetoothRemoteGATTCharacteristic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FakeBluetoothRemoteGATTCharacteristic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                initialValue\n                            \n                            \n                                    Private\n                                listeners\n                            \n                            \n                                properties\n                            \n                            \n                                    Readonly\n                                randomValueFn\n                            \n                            \n                                service\n                            \n                            \n                                uuid\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEventListener\n                            \n                            \n                                changeValue\n                            \n                            \n                                clear\n                            \n                            \n                                readValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uuid: BluetoothCharacteristicUUID, properties: BluetoothCharacteristicProperties, initialValue?: DataView, randomValueFn?: () => void)\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:111\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uuid\n                                                  \n                                                        \n                                                                    BluetoothCharacteristicUUID\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                    BluetoothCharacteristicProperties\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        initialValue\n                                                  \n                                                        \n                                                                    DataView\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        randomValueFn\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DataView\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            listeners\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : {\n    characteristicvaluechanged: []\n  }\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:107\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            properties\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicProperties\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:104\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            randomValueFn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:106\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            service\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FakeBluetoothRemoteGATTService\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:102\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uuid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:101\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DataView\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:103\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addEventListener\n                        \n                        \n                    \n                \n            \n            \n                \naddEventListener(type: string, listener: EventListener)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                            EventListener\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changeValue\n                        \n                        \n                    \n                \n            \n            \n                \nchangeValue(value: DataView)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            DataView\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            readValue\n                        \n                        \n                    \n                \n            \n            \n                \nreadValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class FakeBluetoothDevice {\n  gatt: BluetoothRemoteGATTServer;\n  private listeners: {\n    [key in 'gattserverconnected' | 'gattserverdisconnected']: EventListener[]\n  } = {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  };\n\n  constructor(public id: string, public name: string) {\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  connect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  disconnect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  clear() {\n    this.id = undefined;\n    this.name = undefined;\n    this.listeners = {\n      gattserverconnected: [],\n      gattserverdisconnected: []\n    };\n  }\n}\n\nexport class FakeBluetoothRemoteGATTServer {\n  connected = false;\n\n  constructor(public device, public services: { [uuid: string]: FakeBluetoothRemoteGATTService } = {}) {\n    device.gatt = this;\n  }\n\n  connect() {\n    this.connected = true;\n    this.device.connect();\n    return Promise.resolve(this);\n  }\n\n  getPrimaryService(uuid: BluetoothServiceUUID) {\n    return Promise.resolve(this.services[uuid]);\n  }\n\n  getPrimaryServices(uuids: BluetoothServiceUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.services)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.services[uuid])\n    );\n  }\n\n  disconnect(callbackFn?: () => void) {\n    this.device.disconnect();\n    this.connected = false;\n    if (callbackFn) {\n      callbackFn();\n    }\n  }\n}\n\nexport class FakeBluetoothRemoteGATTService {\n  constructor(\n    public uuid,\n    public device,\n    public characteristics: {[uuid: string]: FakeBluetoothRemoteGATTCharacteristic}) {\n    Object.keys(characteristics).forEach(characteristicUuid => this.characteristics[characteristicUuid].service = this);\n  }\n\n  getCharacteristic(uuid: BluetoothCharacteristicUUID) {\n    return Promise.resolve(this.characteristics[uuid]);\n  }\n\n  getCharacteristics(uuids: BluetoothCharacteristicUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.characteristics)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.characteristics[uuid])\n    );\n  }\n}\n\nexport class FakeBluetoothRemoteGATTCharacteristic {\n  uuid: BluetoothCharacteristicUUID;\n  service: FakeBluetoothRemoteGATTService;\n  value: DataView;\n  properties: BluetoothCharacteristicProperties;\n  private readonly initialValue: DataView;\n  readonly randomValueFn: () => DataView;\n  private listeners: {\n    [key in 'characteristicvaluechanged']: EventListener[]\n  } = {\n    characteristicvaluechanged: []\n  };\n\n  constructor(\n    uuid: BluetoothCharacteristicUUID,\n    properties: BluetoothCharacteristicProperties,\n    initialValue?: DataView,\n    randomValueFn?: () => DataView) {\n    this.uuid = uuid;\n    this.properties = properties;\n    this.value = initialValue;\n    this.initialValue = initialValue;\n    this.randomValueFn = randomValueFn;\n  }\n\n  readValue() {\n    return Promise.resolve(this.value);\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  changeValue(value: DataView) {\n    this.value = value;\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.characteristicvaluechanged.forEach(listener => {\n      listener(mockedEvent as Event);\n    });\n  }\n\n  clear() {\n    this.value = this.initialValue;\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FakeBluetoothRemoteGATTServer.html":{"url":"classes/FakeBluetoothRemoteGATTServer.html","title":"class - FakeBluetoothRemoteGATTServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FakeBluetoothRemoteGATTServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                connected\n                            \n                            \n                                    Public\n                                device\n                            \n                            \n                                    Public\n                                services\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                connect\n                            \n                            \n                                disconnect\n                            \n                            \n                                getPrimaryService\n                            \n                            \n                                getPrimaryServices\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(device, services: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        device\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        services\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            connected\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            device\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            services\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:48\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            connect\n                        \n                        \n                    \n                \n            \n            \n                \nconnect()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect(callbackFn?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callbackFn\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPrimaryService\n                        \n                        \n                    \n                \n            \n            \n                \ngetPrimaryService(uuid: BluetoothServiceUUID)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPrimaryServices\n                        \n                        \n                    \n                \n            \n            \n                \ngetPrimaryServices(uuids: BluetoothServiceUUID[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuids\n                                    \n                                            BluetoothServiceUUID[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class FakeBluetoothDevice {\n  gatt: BluetoothRemoteGATTServer;\n  private listeners: {\n    [key in 'gattserverconnected' | 'gattserverdisconnected']: EventListener[]\n  } = {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  };\n\n  constructor(public id: string, public name: string) {\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  connect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  disconnect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  clear() {\n    this.id = undefined;\n    this.name = undefined;\n    this.listeners = {\n      gattserverconnected: [],\n      gattserverdisconnected: []\n    };\n  }\n}\n\nexport class FakeBluetoothRemoteGATTServer {\n  connected = false;\n\n  constructor(public device, public services: { [uuid: string]: FakeBluetoothRemoteGATTService } = {}) {\n    device.gatt = this;\n  }\n\n  connect() {\n    this.connected = true;\n    this.device.connect();\n    return Promise.resolve(this);\n  }\n\n  getPrimaryService(uuid: BluetoothServiceUUID) {\n    return Promise.resolve(this.services[uuid]);\n  }\n\n  getPrimaryServices(uuids: BluetoothServiceUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.services)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.services[uuid])\n    );\n  }\n\n  disconnect(callbackFn?: () => void) {\n    this.device.disconnect();\n    this.connected = false;\n    if (callbackFn) {\n      callbackFn();\n    }\n  }\n}\n\nexport class FakeBluetoothRemoteGATTService {\n  constructor(\n    public uuid,\n    public device,\n    public characteristics: {[uuid: string]: FakeBluetoothRemoteGATTCharacteristic}) {\n    Object.keys(characteristics).forEach(characteristicUuid => this.characteristics[characteristicUuid].service = this);\n  }\n\n  getCharacteristic(uuid: BluetoothCharacteristicUUID) {\n    return Promise.resolve(this.characteristics[uuid]);\n  }\n\n  getCharacteristics(uuids: BluetoothCharacteristicUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.characteristics)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.characteristics[uuid])\n    );\n  }\n}\n\nexport class FakeBluetoothRemoteGATTCharacteristic {\n  uuid: BluetoothCharacteristicUUID;\n  service: FakeBluetoothRemoteGATTService;\n  value: DataView;\n  properties: BluetoothCharacteristicProperties;\n  private readonly initialValue: DataView;\n  readonly randomValueFn: () => DataView;\n  private listeners: {\n    [key in 'characteristicvaluechanged']: EventListener[]\n  } = {\n    characteristicvaluechanged: []\n  };\n\n  constructor(\n    uuid: BluetoothCharacteristicUUID,\n    properties: BluetoothCharacteristicProperties,\n    initialValue?: DataView,\n    randomValueFn?: () => DataView) {\n    this.uuid = uuid;\n    this.properties = properties;\n    this.value = initialValue;\n    this.initialValue = initialValue;\n    this.randomValueFn = randomValueFn;\n  }\n\n  readValue() {\n    return Promise.resolve(this.value);\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  changeValue(value: DataView) {\n    this.value = value;\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.characteristicvaluechanged.forEach(listener => {\n      listener(mockedEvent as Event);\n    });\n  }\n\n  clear() {\n    this.value = this.initialValue;\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FakeBluetoothRemoteGATTService.html":{"url":"classes/FakeBluetoothRemoteGATTService.html","title":"class - FakeBluetoothRemoteGATTService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FakeBluetoothRemoteGATTService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                characteristics\n                            \n                            \n                                    Public\n                                device\n                            \n                            \n                                    Public\n                                uuid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCharacteristic\n                            \n                            \n                                getCharacteristics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uuid, device, characteristics: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:79\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uuid\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        device\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        characteristics\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            characteristics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            device\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uuid\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:81\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCharacteristic\n                        \n                        \n                    \n                \n            \n            \n                \ngetCharacteristic(uuid: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCharacteristics\n                        \n                        \n                    \n                \n            \n            \n                \ngetCharacteristics(uuids: BluetoothCharacteristicUUID[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuids\n                                    \n                                            BluetoothCharacteristicUUID[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class FakeBluetoothDevice {\n  gatt: BluetoothRemoteGATTServer;\n  private listeners: {\n    [key in 'gattserverconnected' | 'gattserverdisconnected']: EventListener[]\n  } = {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  };\n\n  constructor(public id: string, public name: string) {\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  connect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  disconnect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  clear() {\n    this.id = undefined;\n    this.name = undefined;\n    this.listeners = {\n      gattserverconnected: [],\n      gattserverdisconnected: []\n    };\n  }\n}\n\nexport class FakeBluetoothRemoteGATTServer {\n  connected = false;\n\n  constructor(public device, public services: { [uuid: string]: FakeBluetoothRemoteGATTService } = {}) {\n    device.gatt = this;\n  }\n\n  connect() {\n    this.connected = true;\n    this.device.connect();\n    return Promise.resolve(this);\n  }\n\n  getPrimaryService(uuid: BluetoothServiceUUID) {\n    return Promise.resolve(this.services[uuid]);\n  }\n\n  getPrimaryServices(uuids: BluetoothServiceUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.services)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.services[uuid])\n    );\n  }\n\n  disconnect(callbackFn?: () => void) {\n    this.device.disconnect();\n    this.connected = false;\n    if (callbackFn) {\n      callbackFn();\n    }\n  }\n}\n\nexport class FakeBluetoothRemoteGATTService {\n  constructor(\n    public uuid,\n    public device,\n    public characteristics: {[uuid: string]: FakeBluetoothRemoteGATTCharacteristic}) {\n    Object.keys(characteristics).forEach(characteristicUuid => this.characteristics[characteristicUuid].service = this);\n  }\n\n  getCharacteristic(uuid: BluetoothCharacteristicUUID) {\n    return Promise.resolve(this.characteristics[uuid]);\n  }\n\n  getCharacteristics(uuids: BluetoothCharacteristicUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.characteristics)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.characteristics[uuid])\n    );\n  }\n}\n\nexport class FakeBluetoothRemoteGATTCharacteristic {\n  uuid: BluetoothCharacteristicUUID;\n  service: FakeBluetoothRemoteGATTService;\n  value: DataView;\n  properties: BluetoothCharacteristicProperties;\n  private readonly initialValue: DataView;\n  readonly randomValueFn: () => DataView;\n  private listeners: {\n    [key in 'characteristicvaluechanged']: EventListener[]\n  } = {\n    characteristicvaluechanged: []\n  };\n\n  constructor(\n    uuid: BluetoothCharacteristicUUID,\n    properties: BluetoothCharacteristicProperties,\n    initialValue?: DataView,\n    randomValueFn?: () => DataView) {\n    this.uuid = uuid;\n    this.properties = properties;\n    this.value = initialValue;\n    this.initialValue = initialValue;\n    this.randomValueFn = randomValueFn;\n  }\n\n  readValue() {\n    return Promise.resolve(this.value);\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  changeValue(value: DataView) {\n    this.value = value;\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.characteristicvaluechanged.forEach(listener => {\n      listener(mockedEvent as Event);\n    });\n  }\n\n  clear() {\n    this.value = this.initialValue;\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HumidityComponent.html":{"url":"components/HumidityComponent.html","title":"component - HumidityComponent","body":"\n                   \n\n\n\n\n\n  Components\n  HumidityComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/thingy52/humidity.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-humidity\n            \n\n\n            \n                styles\n                \n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }\n            \n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                characteristicUUID\n                            \n                            \n                                chart\n                            \n                            \n                                chartRef\n                            \n                            \n                                    Public\n                                dashboardService\n                            \n                            \n                                series\n                            \n                            \n                                    Static\n                                serviceUUID\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                streamSubscription\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                hasError\n                            \n                            \n                                initChart\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/thingy52/humidity.component.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initChart\n                        \n                        \n                    \n                \n            \n            \n                \ninitChart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateValue\n                        \n                        \n                    \n                \n            \n            \n                \nupdateValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            characteristicUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680203-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SmoothieChart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chartRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('chart', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dashboardService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TimeSeries\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            serviceUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothServiceUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680200-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            streamSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:26\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/thingy52/humidity.component.ts:32\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\nimport { SmoothieChart, TimeSeries } from 'smoothie';\nimport { DashboardService } from '../dashboard/dashboard.service';\n\n@Component({\n  selector: 'ble-humidity',\n  template: `\n    \n  `,\n  styles: [`\n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }`],\n})\nexport class HumidityComponent implements OnInit, OnDestroy {\n  static serviceUUID: BluetoothServiceUUID = 'ef680200-9b35-4933-9b10-52ffa9740042';\n  static characteristicUUID: BluetoothCharacteristicUUID = 'ef680203-9b35-4933-9b10-52ffa9740042';\n\n  series: TimeSeries;\n  chart: SmoothieChart;\n  valuesSubscription: Subscription;\n  streamSubscription: Subscription;\n\n  @ViewChild('chart', {static: true})\n  chartRef: ElementRef;\n\n  get device() {\n    return this.dashboardService.device();\n  }\n\n  constructor(\n    public dashboardService: DashboardService,\n    public snackBar: MatSnackBar) {}\n\n  ngOnInit() {\n    this.initChart();\n\n    this.streamSubscription = this.dashboardService.streamsBy(\n      HumidityComponent.serviceUUID,\n      HumidityComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  initChart() {\n    this.series = new window.TimeSeries() as TimeSeries;\n    const canvas = this.chartRef.nativeElement;\n    // tslint:disable-next-line: max-line-length\n    this.chart = new window.SmoothieChart({ interpolation: 'step', grid: { fillStyle: '#ffffff', strokeStyle: 'rgba(119,119,119,0.18)', borderVisible: false }, labels: { fillStyle: '#000000', fontSize: 17 }, tooltip: true });\n    this.chart.addTimeSeries(this.series, { lineWidth: 1, strokeStyle: '#ff0000', fillStyle: 'rgba(255,161,161,0.30)' });\n    this.chart.streamTo(canvas);\n    this.chart.stop();\n  }\n\n  requestValue() {\n    this.valuesSubscription = this.dashboardService.valuesBy(\n      HumidityComponent.serviceUUID,\n      HumidityComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n\n  updateValue(value: number) {\n    console.log('Reading humidity %d', value);\n    this.series.append(Date.now(), value);\n    this.chart.start();\n  }\n\n\n  disconnect() {\n    this.series.clear();\n    this.chart.stop();\n    this.dashboardService?.disconnectDevice();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n    this.streamSubscription?.unsubscribe();\n  }\n}\n\n    \n\n\n    \n            \n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HumidityComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    error\n                                \n                                \n                                    log\n                                \n                                \n                                    warn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            error\n                        \n                        \n                    \n                \n            \n            \n                \nerror(args: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            log\n                        \n                        \n                    \n                \n            \n            \n                \nlog(args: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \nwarn(args: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Logger {\n  log(args: string[]): void;\n  error(args: string[]): void;\n  warn(args: string[]): void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConsoleLoggerService implements Logger {\n  log(...args) {\n    console.log.apply(console, args);\n  }\n  error(...args) {\n    console.error.apply(console, args);\n  }\n  warn(...args) {\n    console.warn.apply(console, args);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoLoggerService implements Logger {\n  log(...args) {}\n  error(...args) {}\n  warn(...args) {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoLoggerService.html":{"url":"injectables/NoLoggerService.html","title":"injectable - NoLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NoLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            error\n                        \n                        \n                    \n                \n            \n            \n                \nerror(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            log\n                        \n                        \n                    \n                \n            \n            \n                \nlog(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \nwarn(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Logger {\n  log(args: string[]): void;\n  error(args: string[]): void;\n  warn(args: string[]): void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConsoleLoggerService implements Logger {\n  log(...args) {\n    console.log.apply(console, args);\n  }\n  error(...args) {\n    console.error.apply(console, args);\n  }\n  warn(...args) {\n    console.warn.apply(console, args);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoLoggerService implements Logger {\n  log(...args) {}\n  error(...args) {}\n  warn(...args) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ServerWebBluetooth.html":{"url":"injectables/ServerWebBluetooth.html","title":"injectable - ServerWebBluetooth","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ServerWebBluetooth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/platform/server.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                instance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            instance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    instance()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/platform/server.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ServerWebBluetooth {\n  static instance() {\n    // mocked object for now\n    return {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StepCounterComponent.html":{"url":"components/StepCounterComponent.html","title":"component - StepCounterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  StepCounterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/thingy52/stepcounter.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-stepcounter\n            \n\n\n            \n                styles\n                \n  :host {\n    display: block;\n  }\n  span {\n    font-size: 5em;\n    position: absolute;\n    top: 112px;\n    left: 214px;\n    width: 120px;\n    display: block;\n    text-align: center;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 55px;\n    left: 258px;\n    font-size: 38px;\n  }\n            \n\n            \n                template\n                {{ value || \"000\" }}\ndirections_walk\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                characteristicUUID\n                            \n                            \n                                    Public\n                                dashboardService\n                            \n                            \n                                    Static\n                                serviceUUID\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                streamSubscription\n                            \n                            \n                                value\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                hasError\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/thingy52/stepcounter.component.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateValue\n                        \n                        \n                    \n                \n            \n            \n                \nupdateValue(value: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            characteristicUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680405-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dashboardService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            serviceUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothServiceUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680400-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            streamSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:37\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/thingy52/stepcounter.component.ts:41\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\nimport { DashboardService } from '../dashboard/dashboard.service';\n\n\n@Component({\n  selector: 'ble-stepcounter',\n  template: `\n  {{ value || \"000\" }}\n  directions_walk\n  `,\n  styles: [`\n  :host {\n    display: block;\n  }\n  span {\n    font-size: 5em;\n    position: absolute;\n    top: 112px;\n    left: 214px;\n    width: 120px;\n    display: block;\n    text-align: center;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 55px;\n    left: 258px;\n    font-size: 38px;\n  }`],\n})\nexport class StepCounterComponent implements OnInit, OnDestroy {\n  static serviceUUID: BluetoothServiceUUID = 'ef680400-9b35-4933-9b10-52ffa9740042';\n  static characteristicUUID: BluetoothCharacteristicUUID = 'ef680405-9b35-4933-9b10-52ffa9740042';\n\n  valuesSubscription: Subscription;\n  streamSubscription: Subscription;\n  value = 0;\n\n  get device() {\n    return this.dashboardService.device();\n  }\n\n  constructor(\n    public dashboardService: DashboardService,\n    public snackBar: MatSnackBar) {}\n\n  ngOnInit() {\n    this.streamSubscription = this.dashboardService.streamsBy(\n      StepCounterComponent.serviceUUID,\n      StepCounterComponent.characteristicUUID)\n        .subscribe((value: { time: number, count: number }) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  requestValue() {\n    this.valuesSubscription = this.dashboardService.valuesBy(\n      StepCounterComponent.serviceUUID,\n      StepCounterComponent.characteristicUUID)\n        .subscribe((value: { time: number, count: number }) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  updateValue(value: { time: number, count: number }) {\n    console.log('Reading step counter %d', value.count);\n    this.value = value.count;\n  }\n\n  disconnect() {\n    this.dashboardService?.disconnectDevice();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n    this.streamSubscription?.unsubscribe();\n  }\n}\n\n\n\n    \n\n\n    \n            \n  :host {\n    display: block;\n  }\n  span {\n    font-size: 5em;\n    position: absolute;\n    top: 112px;\n    left: 214px;\n    width: 120px;\n    display: block;\n    text-align: center;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 55px;\n    left: 258px;\n    font-size: 38px;\n  }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ value || \"000\" }}directions_walk'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StepCounterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TemperatureComponent.html":{"url":"components/TemperatureComponent.html","title":"component - TemperatureComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TemperatureComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/thingy52/temperature.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-temperature\n            \n\n\n            \n                styles\n                \n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }\n            \n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                characteristicUUID\n                            \n                            \n                                chart\n                            \n                            \n                                chartRef\n                            \n                            \n                                    Public\n                                dashboardService\n                            \n                            \n                                series\n                            \n                            \n                                    Static\n                                serviceUUID\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                streamSubscription\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                hasError\n                            \n                            \n                                initChart\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/thingy52/temperature.component.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initChart\n                        \n                        \n                    \n                \n            \n            \n                \ninitChart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateValue\n                        \n                        \n                    \n                \n            \n            \n                \nupdateValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            characteristicUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680201-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SmoothieChart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chartRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('chart', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dashboardService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TimeSeries\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            serviceUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothServiceUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680200-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            streamSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/thingy52/temperature.component.ts:33\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\nimport { SmoothieChart, TimeSeries } from 'smoothie';\nimport { DashboardService } from '../dashboard/dashboard.service';\n\n\n@Component({\n  selector: 'ble-temperature',\n  template: `\n    \n  `,\n  styles: [`\n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }`],\n})\nexport class TemperatureComponent implements OnInit, OnDestroy {\n  static serviceUUID: BluetoothServiceUUID = 'ef680200-9b35-4933-9b10-52ffa9740042';\n  static characteristicUUID: BluetoothCharacteristicUUID = 'ef680201-9b35-4933-9b10-52ffa9740042';\n\n  series: TimeSeries;\n  chart: SmoothieChart;\n  valuesSubscription: Subscription;\n  streamSubscription: Subscription;\n\n  @ViewChild('chart', {static: true})\n  chartRef: ElementRef;\n\n  get device() {\n    return this.dashboardService.device();\n  }\n\n  constructor(\n    public dashboardService: DashboardService,\n    public snackBar: MatSnackBar) {}\n\n  ngOnInit() {\n    this.initChart();\n\n    this.streamSubscription = this.dashboardService.streamsBy(\n      TemperatureComponent.serviceUUID,\n      TemperatureComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  initChart() {\n    this.series = new window.TimeSeries() as TimeSeries;\n    const canvas = this.chartRef.nativeElement;\n    this.chart = new window.SmoothieChart({\n      interpolation: 'step',\n      grid: {\n        fillStyle: '#ffffff',\n        strokeStyle: 'rgba(119,119,119,0.18)',\n        borderVisible: false\n      },\n      labels: {\n        fillStyle: '#000000',\n        fontSize: 17\n      },\n      tooltip: true\n    });\n    this.chart.addTimeSeries(this.series, { lineWidth: 1, strokeStyle: '#ff0000', fillStyle: 'rgba(255,161,161,0.30)' });\n    this.chart.streamTo(canvas);\n    this.chart.stop();\n  }\n\n  requestValue() {\n    this.valuesSubscription = this.dashboardService.valuesBy(\n      TemperatureComponent.serviceUUID,\n      TemperatureComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  updateValue(value: number) {\n    console.log('Reading temperature %d', value);\n    this.series.append(Date.now(), value);\n    this.chart.start();\n  }\n\n  disconnect() {\n    this.series.clear();\n    this.chart.stop();\n    this.dashboardService?.disconnectDevice();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n    this.streamSubscription?.unsubscribe();\n  }\n}\n\n\n\n    \n\n\n    \n            \n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TemperatureComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WebBluetoothModule.html":{"url":"modules/WebBluetoothModule.html","title":"module - WebBluetoothModule","body":"\n                   \n\n\n\n\n    Modules\n    WebBluetoothModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: AWBOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                AWBOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders, InjectionToken, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BluetoothCore } from './bluetooth.service';\nimport { BrowserWebBluetooth } from './platform/browser';\n\nimport { ConsoleLoggerService, NoLoggerService } from './logger.service';\n\nexport interface AWBOptions {\n  enableTracing?: boolean;\n}\n\nexport function browserWebBluetooth() {\n  return new BrowserWebBluetooth();\n}\n\nexport function consoleLoggerServiceConfig(options: AWBOptions) {\n  if (options && options.enableTracing) {\n    return new ConsoleLoggerService();\n  } else {\n    return new NoLoggerService();\n  }\n}\nexport function makeMeTokenInjector() {\n  return new InjectionToken('AWBOptions');\n}\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class WebBluetoothModule {\n  static forRoot(options: AWBOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: WebBluetoothModule,\n      providers: [\n        BluetoothCore,\n        {\n          provide: BrowserWebBluetooth,\n          useFactory: browserWebBluetooth\n        },\n        {\n          provide: makeMeTokenInjector,\n          useValue: options\n        },\n        {\n          provide: ConsoleLoggerService,\n          useFactory: consoleLoggerServiceConfig,\n          deps: [makeMeTokenInjector]\n        }\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                e2e/src/app.po.ts\n            \n            class\n            AppPage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n            \n            interface\n            AWBOptions\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n            \n            function\n            browserWebBluetooth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n            \n            function\n            consoleLoggerServiceConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n            \n            function\n            makeMeTokenInjector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.service.ts\n            \n            injectable\n            BluetoothCore\n            \n                64 %\n                (22/34)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/lang/uuids/ti-sensortag2.ts\n            \n            variable\n            TI_SENSORAG_SERVICES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/lang/uuids/ti-sensortag2.ts\n            \n            variable\n            TiTag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n            \n            injectable\n            ConsoleLoggerService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n            \n            injectable\n            NoLoggerService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n            \n            interface\n            Logger\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts\n            \n            injectable\n            BrowserWebBluetooth\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/platform/server.ts\n            \n            injectable\n            ServerWebBluetooth\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n            \n            class\n            FakeBluetoothDevice\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n            \n            class\n            FakeBluetoothRemoteGATTCharacteristic\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n            \n            class\n            FakeBluetoothRemoteGATTServer\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n            \n            class\n            FakeBluetoothRemoteGATTService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            bleCore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            fakeBleCore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            PROVIDERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/ble.service.ts\n            \n            injectable\n            BleService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/dashboard/dashboard.component.ts\n            \n            component\n            DashboardComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/dashboard/dashboard.service.ts\n            \n            injectable\n            DashboardService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            disconnectSubject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            fakeBrowserWebBluetooth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            fakeDevice\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            fakeGATTServer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            gattServices\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            generateFakeValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            instances\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            start\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/thingy52/battery-level.component.ts\n            \n            component\n            BatteryLevelComponent\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/app/thingy52/humidity.component.ts\n            \n            component\n            HumidityComponent\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/app/thingy52/stepcounter.component.ts\n            \n            component\n            StepCounterComponent\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/app/thingy52/temperature.component.ts\n            \n            component\n            TemperatureComponent\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~11.2.0\n        \n            @angular/cdk : ^11.2.0\n        \n            @angular/common : ~11.2.0\n        \n            @angular/compiler : ~11.2.0\n        \n            @angular/core : ~11.2.0\n        \n            @angular/forms : ~11.2.0\n        \n            @angular/material : ^11.2.0\n        \n            @angular/platform-browser : ~11.2.0\n        \n            @angular/platform-browser-dynamic : ~11.2.0\n        \n            @angular/router : ~11.2.0\n        \n            @release-it/conventional-changelog : ^1.1.4\n        \n            @types/web-bluetooth : 0.0.6\n        \n            rxjs : ~6.6.3\n        \n            smoothie : ^1.35.0\n        \n            tslib : ^2.0.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            browserWebBluetooth   (projects/.../bluetooth.module.ts)\n                        \n                        \n                            consoleLoggerServiceConfig   (projects/.../bluetooth.module.ts)\n                        \n                        \n                            makeMeTokenInjector   (projects/.../bluetooth.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            browserWebBluetooth\n                        \n                        \n                    \n                \n            \n            \n                \nbrowserWebBluetooth()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            consoleLoggerServiceConfig\n                        \n                        \n                    \n                \n            \n            \n                \nconsoleLoggerServiceConfig(options)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            makeMeTokenInjector\n                        \n                        \n                    \n                \n            \n            \n                \nmakeMeTokenInjector()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\nThe missing Web Bluetooth module for Angular\n\n\nInstall\nnpm install -S @manekinekko/angular-web-bluetooth @types/web-bluetooth\nNote: Make also sure the @types/web-bluetooth is installed correctly in your node_modules.\n\nGetting started\n1) import the WebBluetoothModule module\nimport { NgModule } from '@angular/core';\nimport { WebBluetoothModule } from '@manekinekko/angular-web-bluetooth';\n\n@NgModule({\n  imports: [\n    //...,\n    WebBluetoothModule.forRoot({\n      enableTracing: true // or false, this will enable logs in the browser's console\n    })\n  ]\n  //...\n})\nexport class AppModule {}2.a) use it in your service/component (the easiest way)\nHere is an annotated example using the BluetoothCore service:\nimport { Injectable } from '@angular/core';\nimport { BluetoothCore } from '@manekinekko/angular-web-bluetooth';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatteryLevelService {\n\n  constructor(public readonly ble: BluetoothCore) {}\n\n  getDevice() {\n    // call this method to get the connected device\n    return this.ble.getDevice$();\n  }\n\n  stream() {\n    // call this method to get a stream of values emitted by the device for a given characteristic\n    return this.ble.streamValues$().pipe(\n      map((value: DataView) => value.getInt8(0))\n    );\n  }\n\n  disconnectDevice() {\n    // call this method to disconnect from the device. This method will also stop clear all subscribed notifications\n    this.ble.disconnectDevice();\n  }\n\n  value() {\n    console.log('Getting Battery level...');\n\n    return this.ble\n      .value$({\n        service: 'battery_service',\n        characteristic: 'battery_level'\n      });\n  }\n\n}2.b) use it in your service/component (the advanced way)\nHere is an annotated example using the BluetoothCore service:\nimport { Injectable } from '@angular/core';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { BluetoothCore } from '@manekinekko/angular-web-bluetooth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatteryLevelService {\n  static GATT_CHARACTERISTIC_BATTERY_LEVEL = 'battery_level';\n  static GATT_PRIMARY_SERVICE = 'battery_service';\n\n  constructor(public ble: BluetoothCore) {}\n\n  getDevice() {\n    // call this method to get the connected device\n    return this.ble.getDevice$();\n  }\n\n  stream() {\n    // call this method to get a stream of values emitted by the device\n    return this.ble.streamValues$().pipe(map((value: DataView) => value.getUint8(0)));\n  }\n\n  disconnectDevice() {\n    this.ble.disconnectDevice();\n  }\n\n  /**\n   * Get Battery Level GATT Characteristic value.\n   * This logic is specific to this service, this is why we can't abstract it elsewhere.\n   * The developer is free to provide any service, and characteristics they want.\n   *\n   * @return Emites the value of the requested service read from the device\n   */\n  value() {\n    console.log('Getting Battery level...');\n\n    return this.ble\n\n        // 1) call the discover method will trigger the discovery process (by the browser)\n        .discover$({\n          acceptAllDevices: true,\n          optionalServices: [BatteryLevelService.GATT_PRIMARY_SERVICE]\n        })\n        .pipe(\n\n          // 2) get that service\n          mergeMap((gatt: BluetoothRemoteGATTServer) => {\n            return this.ble.getPrimaryService$(gatt, BatteryLevelService.GATT_PRIMARY_SERVICE);\n          }),\n\n          // 3) get a specific characteristic on that service\n          mergeMap((primaryService: BluetoothRemoteGATTService) => {\n            return this.ble.getCharacteristic$(primaryService, BatteryLevelService.GATT_CHARACTERISTIC_BATTERY_LEVEL);\n          }),\n\n          // 4) ask for the value of that characteristic (will return a DataView)\n          mergeMap((characteristic: BluetoothRemoteGATTCharacteristic) => {\n            return this.ble.readValue$(characteristic);\n          }),\n\n          // 5) on that DataView, get the right value\n          map((value: DataView) => value.getUint8(0))\n        )\n  }\n}API documentation\nThe API documentation can be found here:  https://manekinekko.github.io/angular-web-bluetooth/\nNeed a starter?\n\n\nThis project serves also as a starter. Run the following command:\nnpm startBlog post\nCheckout my full blog post on dev.to about how to use this package in your app.\nHave a PR?\nAll contributions are welcome. Here are few open issues that I need help with ;)\nLicense\nThe MIT License (MIT) Copyright (c) 2017 - Wassim CHEGHAM\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT) Copyright (c) 2017 - Wassim CHEGHAM\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WebBluetoothModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nBatteryLevelComponent\n\nBatteryLevelComponent\n\nAppModule -->\n\nBatteryLevelComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nHumidityComponent\n\nHumidityComponent\n\nAppModule -->\n\nHumidityComponent->AppModule\n\n\n\n\n\nStepCounterComponent\n\nStepCounterComponent\n\nAppModule -->\n\nStepCounterComponent->AppModule\n\n\n\n\n\nTemperatureComponent\n\nTemperatureComponent\n\nAppModule -->\n\nTemperatureComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nWebBluetoothModule\n\nWebBluetoothModule\n\nAppModule -->\n\nWebBluetoothModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Components\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DetailedValue   (projects/.../bluetooth.service.ts)\n                        \n                        \n                            ReadValueOptions   (projects/.../bluetooth.service.ts)\n                        \n                        \n                            ServiceOptions   (src/.../ble.service.ts)\n                        \n                        \n                            ServiceOptions   (src/.../dashboard.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.service.ts\n    \n    \n        \n            \n                \n                    \n                    DetailedValue\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReadValueOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/ble.service.ts\n    \n    \n        \n            \n                \n                    \n                    ServiceOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/dashboard/dashboard.service.ts\n    \n    \n        \n            \n                \n                    \n                    ServiceOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bleCore   (src/.../app.module.ts)\n                        \n                        \n                            config   (src/.../fake.utils.ts)\n                        \n                        \n                            disconnectSubject   (src/.../fake.utils.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            fakeBleCore   (src/.../app.module.ts)\n                        \n                        \n                            fakeBrowserWebBluetooth   (src/.../fake.utils.ts)\n                        \n                        \n                            fakeDevice   (src/.../fake.utils.ts)\n                        \n                        \n                            fakeGATTServer   (src/.../fake.utils.ts)\n                        \n                        \n                            gattServices   (src/.../fake.utils.ts)\n                        \n                        \n                            generateFakeValues   (src/.../fake.utils.ts)\n                        \n                        \n                            instances   (src/.../fake.utils.ts)\n                        \n                        \n                            PROVIDERS   (src/.../app.module.ts)\n                        \n                        \n                            start   (src/.../fake.utils.ts)\n                        \n                        \n                            TI_SENSORAG_SERVICES   (projects/.../ti-sensortag2.ts)\n                        \n                        \n                            TiTag   (projects/.../ti-sensortag2.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bleCore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (b: BrowserWebBluetooth, l: ConsoleLoggerService) => new BluetoothCore(b, l)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeBleCore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (b: BrowserWebBluetooth, l: ConsoleLoggerService) => {\n  start().then();\n  return new BluetoothCore(fakeBrowserWebBluetooth as BrowserWebBluetooth, l);\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PROVIDERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: BluetoothCore,\n    useFactory: fakeBleCore, // bleCore or fakeBleCore\n    deps: [BrowserWebBluetooth, ConsoleLoggerService]\n  }, {\n    provide: DashboardService,\n    useFactory: (b: BluetoothCore, l: ConsoleLoggerService) => {\n      return new DashboardService(b, l);\n    },\n    deps: [BluetoothCore, ConsoleLoggerService]\n  }\n]\n                        \n                    \n\n\n            \n        \n\n    src/app/fake.utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  weather: {\n    uuid: 'ef680200-9b35-4933-9b10-52ffa9740042',\n    characteristics: [{\n      uuid: 'ef680201-9b35-4933-9b10-52ffa9740042',\n      randomValueFn: () => {\n        const dataView = new DataView(new ArrayBuffer(8));\n        dataView.setInt8(0, Math.floor(Math.random() * 100) + 10);\n        return dataView;\n      }\n    }, {\n      uuid: 'ef680203-9b35-4933-9b10-52ffa9740042',\n      randomValueFn: () => {\n        const dataView = new DataView(new ArrayBuffer(8));\n        dataView.setInt8(0, Math.floor(Math.random() * 100) + 10);\n        return dataView;\n      }\n    }]\n  },\n  stepCounter: {\n    uuid: 'ef680400-9b35-4933-9b10-52ffa9740042',\n    characteristics: [{\n      uuid: 'ef680405-9b35-4933-9b10-52ffa9740042',\n      randomValueFn: () => {\n        const dataView = new DataView(new ArrayBuffer(8));\n        dataView.setUint32(0, Math.floor(Math.random() * 100) + 10, true);\n        dataView.setUint32(4, Math.floor(Math.random() * 100) + 10, true);\n        return dataView;\n      }\n    }]\n  },\n  batteryLevel: {\n    uuid: '0000180f-0000-1000-8000-00805f9b34fb',\n    characteristics: [{\n      uuid: 'battery_level',\n      randomValueFn: () => {\n        const dataView = new DataView(new ArrayBuffer(8));\n        dataView.setInt8(0, Math.floor(Math.random() * 100) + 10);\n        return dataView;\n      }\n    }]\n  }\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disconnectSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeBrowserWebBluetooth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     unknown\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  test: 'bob',\n  requestDevice: (options: RequestDeviceOptions) => Promise.resolve(fakeDevice),\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeDevice\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FakeBluetoothDevice('1', 'Fake Device')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeGATTServer\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FakeBluetoothRemoteGATTServer(fakeDevice, gattServices)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gattServices\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : instances.reduce((acc, elem) => {\n  return {\n    ...acc,\n    [elem.uuid]: elem.serviceInstance\n  };\n}, {})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            generateFakeValues\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {\n  timer(0, 2000)\n    .pipe(\n      takeUntil(disconnectSubject),\n      tap(_ => {\n        instances.forEach(({characteristicsInstances}) => {\n          Object.keys(characteristicsInstances)\n            .forEach(uuid => {\n              const random = characteristicsInstances[uuid].randomValueFn();\n              characteristicsInstances[uuid].changeValue(random);\n            });\n        });\n      })\n    )\n    .subscribe();\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            instances\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Object.keys(config).map(serviceName => {\n  const characteristicsInstances = config[serviceName].characteristics.reduce((acc, elem) => {\n    return {\n      ...acc,\n      [elem.uuid]: new FakeBluetoothRemoteGATTCharacteristic(\n        elem.uuid,\n        {notify: false} as BluetoothCharacteristicProperties,\n        elem.randomValueFn(),\n        elem.randomValueFn\n      )\n    };\n  }, {});\n\n  const serviceInstance = new FakeBluetoothRemoteGATTService(config[serviceName].uuid , fakeDevice, characteristicsInstances);\n\n  return {\n    name: serviceName,\n    uuid: config[serviceName].uuid,\n    serviceInstance,\n    characteristicsInstances,\n  };\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async () => {\n  // const disconnectSubject = new Subject();\n  //\n  // const generateFakeValues = () => {\n  //   timer(0, 2000)\n  //     .pipe(\n  //       takeUntil(disconnectSubject),\n  //       tap(_ => {\n  //         instances.forEach(({characteristicsInstances}) => {\n  //           Object.keys(characteristicsInstances)\n  //             .forEach(uuid => {\n  //               const random = characteristicsInstances[uuid].randomValueFn();\n  //               characteristicsInstances[uuid].changeValue(random);\n  //             });\n  //         });\n  //       })\n  //     )\n  //     .subscribe();\n  // };\n  //\n  // fakeDevice.addEventListener('gattserverconnected', generateFakeValues);\n  // fakeDevice.addEventListener('gattserverdisconnected', () => disconnectSubject.next());\n  //\n  // await fakeGATTServer.connect();\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    projects/manekinekko/angular-web-bluetooth/src/lib/lang/uuids/ti-sensortag2.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TI_SENSORAG_SERVICES\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Object.keys(TiTag).map(key => TiTag[key].SERVICE)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TiTag\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n\n  DEVICE_INFORMATION : {\n    SERVICE :                 'f000180a-0451-4000-b000-000000000000',\n    SYSTEM_ID :               'f0002a23-0451-4000-b000-000000000000',\n    MODEL_NUMBER :            'f0002a24-0451-4000-b000-000000000000',\n    SERIAL_NUMBER :           'f0002a25-0451-4000-b000-000000000000',\n    FIRMWARE_REV :            'f0002a26-0451-4000-b000-000000000000',\n    HARDWARE_REV :            'f0002a27-0451-4000-b000-000000000000',\n    SOFTWARE_REV :            'f0002a28-0451-4000-b000-000000000000',\n    MANIFACTURER :            'f0002a29-0451-4000-b000-000000000000',\n    IEEE11073 :               'f0002a2a-0451-4000-b000-000000000000',\n    PNP_ID :                  'f0002a50-0451-4000-b000-000000000000'\n  },\n\n  BATTERY : {\n    SERVICE :                 'f000180f-0451-4000-b000-000000000000',\n    LEVEL :                   'f0002a19-0451-4000-b000-000000000000'\n  },\n\n  TEMPERATURE : {\n    SERVICE :                 'f000aa00-0451-4000-b000-000000000000',\n    DATA :                    'f000aa01-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa02-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa03-0451-4000-b000-000000000000'\n  },\n\n  HUMIDITY : {\n    SERVICE :                 'f000aa20-0451-4000-b000-000000000000',\n    DATA :                    'f000aa21-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa22-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa23-0451-4000-b000-000000000000'\n  },\n\n  BAROMETER : {\n    SERVICE :                 'f000aa40-0451-4000-b000-000000000000',\n    DATA :                    'f000aa41-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa42-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa44-0451-4000-b000-000000000000'\n  },\n\n  // service not available in model CC2650\n  // ACCELEROMETER : {\n  //   SERVICE :                 'f000aa10-0451-4000-b000-000000000000',\n  //   DATA :                    'f000aa11-0451-4000-b000-000000000000',\n  //   CONFIGURATION :           'f000aa12-0451-4000-b000-000000000000',\n  //   PERIOD :                  'f000aa13-0451-4000-b000-000000000000'\n  // },\n\n  // service not available in model CC2650\n  // MAGNETOMETER : {\n  //   SERVICE :                 'f000aa30-0451-4000-b000-000000000000',\n  //   DATA :                    'f000aa31-0451-4000-b000-000000000000',\n  //   CONFIGURATION :           'f000aa32-0451-4000-b000-000000000000',\n  //   PERIOD :                  'f000aa33-0451-4000-b000-000000000000'\n  // },\n\n  // service not available in model CC2650\n  // GYROSCOPE : {\n  //   SERVICE :                 'f000aa50-0451-4000-b000-000000000000',\n  //   DATA :                    'f000aa51-0451-4000-b000-000000000000',\n  //   CONFIGURATION :           'f000aa52-0451-4000-b000-000000000000',\n  //   PERIOD :                  'f000aa53-0451-4000-b000-000000000000'\n  // },\n\n  MOVEMENT : {\n    SERVICE :                 'f000aa80-0451-4000-b000-000000000000',\n    DATA :                    'f000aa81-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa82-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa83-0451-4000-b000-000000000000'\n  },\n\n  LIGHT : {\n    SERVICE :                 'f000aa70-0451-4000-b000-000000000000',\n    DATA :                    'f000aa71-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa72-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa73-0451-4000-b000-000000000000'\n  },\n\n  KEYPRESS : {\n    SERVICE :                 'f000ffe0-0451-4000-b000-000000000000',\n    STATE :                   'f000ffe1-0451-4000-b000-000000000000'\n  },\n\n  __REGISTER__ : {\n    SERVICE :                 'f000ac00-0451-4000-b000-000000000000',\n    DATA :                    'f000ac01-0451-4000-b000-000000000000',\n    ADDRESS :                 'f000ac02-0451-4000-b000-000000000000',\n    DEVICE_ID :               'f000ac03-0451-4000-b000-000000000000'\n  },\n\n  CONTROL : {\n    SERVICE :                 'f000ccc0-0451-4000-b000-000000000000',\n    CURRENT_USED_PARAMETERS : 'f000ccc1-0451-4000-b000-000000000000',\n    REQUEST_NEW_PARAMETERS :  'f000ccc2-0451-4000-b000-000000000000',\n    DISCONNECT_REQUEST :      'f000ccc3-0451-4000-b000-000000000000'\n  },\n\n  OAD : {\n    SERVICE :                 'f000ffc0-0451-4000-b000-000000000000',\n    IMAGE_NOTIFY :            'f000ffc1-0451-4000-b000-000000000000',\n    IMAGE_BLOCK_REQUEST :     'f000ffc2-0451-4000-b000-000000000000',\n    IMAGE_COUNT :             'f000ffc3-0451-4000-b000-000000000000',\n    IMAGE_STATUS :            'f000ffc4-0451-4000-b000-000000000000'\n  },\n\n  IO : {\n    SERVICE :                 'f000aa64-0451-4000-b000-000000000000',\n    DATA :                    'f000aa65-0451-4000-b000-000000000000',\n    CONFIG :                  'f000aa66-0451-4000-b000-000000000000'\n  }\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
