var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/AWBOptions.html",[0,1.344,1,2.004]],["body/interfaces/AWBOptions.html",[0,1.623,1,3.573,2,2.736,3,0.459,4,0.459,5,0.402,6,0.869,7,0.459,8,2.421,9,0.402,10,1.328,11,0.908,12,3.573,13,3.835,14,0.519,15,0.035,16,0.987,17,3.393,18,4.023,19,3.158,20,0.648,21,4.023,22,2.736,23,2.067,24,3.158,25,2.474,26,3.158,27,1.743,28,2.267,29,3.158,30,0.613,31,3.04,32,0.886,33,2.395,34,2.736,35,2.496,36,3.158,37,3.393,38,3.158,39,2.421,40,0.105,41,2.267,42,1.623,43,3.158,44,1.96,45,3.04,46,3.084,47,3.158,48,2.421,49,2.421,50,0.02,51,0.026,52,0.02]],["title/components/AppComponent.html",[53,0.863,54,1.124]],["body/components/AppComponent.html",[3,0.513,4,0.513,5,0.449,15,0.034,16,0.723,20,0.723,30,0.449,40,0.118,50,0.023,51,0.028,52,0.023,53,1.537,54,2.085,55,2.43,56,2.189,57,2.189,58,3.528,59,2.189,60,3.208,61,2.223,62,2.215,63,2.675,64,1.813,65,2.675,66,2.43,67,2.189,68,3.008,69,2.189,70,0.794,71,2.189,72,1.517,73,1.658,74,2.189,75,1.517,76,2.189,77,1.517,78,2.189,79,1.517,80,2.189,81,1.517,82,1.813,83,2.189,84,2.189]],["title/modules/AppModule.html",[85,1.796,86,1.796]],["body/modules/AppModule.html",[3,0.353,4,0.353,5,0.31,7,0.353,12,1.864,15,0.035,16,1.076,17,2.591,20,0.499,23,1.737,25,2.267,27,1.654,30,0.31,32,0.448,33,1.737,39,2.591,40,0.081,41,2.487,44,2.737,45,1.67,46,1.864,49,1.864,50,0.016,51,0.022,52,0.016,54,2.153,64,1.25,72,1.964,75,1.964,77,1.964,79,1.964,81,1.964,85,1.67,86,3.586,87,1.67,88,1.864,89,3.885,90,3.885,91,2.432,92,2.432,93,2.432,94,2.432,95,2.432,96,2.432,97,1.799,98,3.38,99,2.432,100,1.864,101,2.107,102,4.066,103,2.925,104,4.066,105,2.925,106,4.066,107,3.38,108,2.925,109,4.066,110,2.925,111,4.066,112,2.925,113,4.066,114,2.925,115,2.925,116,4.066,117,2.925,118,4.066,119,2.925,120,4.066,121,2.925,122,4.066,123,2.925,124,2.925,125,4.066,126,1.371,127,1.371,128,4.066,129,2.925,130,4.066,131,1.509,132,1.67,133,1.371,134,2.925,135,1.67,136,2.925,137,2.925,138,2.925,139,2.925,140,2.925,141,2.925,142,2.107,143,2.107,144,2.925,145,1.825,146,3.365,147,3.38,148,4.198,149,2.432,150,2.928,151,2.432,152,2.432,153,2.432,154,1.046]],["title/classes/AppPage.html",[40,0.087,155,2.265]],["body/classes/AppPage.html",[3,0.541,4,0.541,5,0.474,9,0.474,15,0.034,16,0.764,30,0.474,32,0.82,40,0.124,50,0.024,51,0.029,52,0.024,62,1.914,66,2.099,131,2.311,155,3.859,156,2.311,157,3.724,158,0.913,159,5.939,160,5.939,161,0.913,162,4.48,163,0.913,164,5.123,165,4.48,166,4.48,167,4.48,168,4.48,169,2.855,170,4.48]],["title/components/BatteryLevelComponent.html",[53,0.863,72,1.124]],["body/components/BatteryLevelComponent.html",[3,0.233,4,0.233,5,0.204,7,0.233,9,0.204,10,0.821,11,0.625,14,0.774,15,0.035,16,0.762,20,0.329,27,1.463,30,0.204,32,0.295,40,0.054,42,2.02,50,0.01,51,0.016,52,0.01,53,1.006,54,0.689,55,1.402,56,0.995,57,0.995,59,0.995,60,2.63,61,1.822,63,1.543,64,0.824,65,1.543,66,1.402,67,0.995,68,2.13,69,0.995,70,0.684,71,0.995,72,1.476,73,1.612,74,0.995,75,0.689,76,0.995,77,0.689,78,0.995,79,0.689,80,0.995,81,0.689,82,0.824,83,0.995,84,0.995,97,1.714,126,0.904,127,0.904,132,1.101,133,0.904,135,1.101,158,0.51,161,1.012,163,0.841,169,2.335,171,2.092,172,4.959,173,1.603,174,1.278,175,2.092,176,2.092,177,2.092,178,2.335,179,3.013,180,3.931,181,3.046,182,3.77,183,3.046,184,3.046,185,3.405,186,3.405,187,3.046,188,4.352,189,4.352,190,3.664,191,3.405,192,3.405,193,2.639,194,3.046,195,2.639,196,3.046,197,2.335,198,3.664,199,3.664,200,2.639,201,2.639,202,2.639,203,3.046,204,3.046,205,1.556,206,3.046,207,3.664,208,2.335,209,3.664,210,1.714,211,3.218,212,3.664,213,3.664,214,2.335,215,2.305,216,2.335,217,2.092,218,1.476,219,4.129,220,1.543,221,2.357,222,2.357,223,2.357,224,1.906,225,1.708,226,1.34,227,0.897,228,1.229,229,2.305,230,1.928,231,0.692,232,1.928,233,1.238,234,1.928,235,1.543,236,1.121,237,1.928,238,1.431,239,1.928,240,1.928,241,1.928,242,1.906,243,2.305,244,1.928,245,1.168,246,1.745,247,2.154,248,2.974,249,2.974,250,2.974,251,2.974,252,1.928,253,3.046,254,1.928,255,1.928,256,1.928,257,2.817,258,1.928,259,4.129,260,1.928,261,1.168,262,2.154,263,1.928,264,1.928,265,1.928,266,3.715,267,1.928,268,1.928,269,0.904,270,1.928,271,0.904,272,1.229,273,1.928,274,1.229,275,1.229,276,2.991,277,2.991,278,1.906,279,1.906,280,1.543,281,1.928,282,1.928,283,1.928,284,2.991,285,1.229,286,3.664,287,1.928,288,1.89,289,0.995,290,1.928,291,1.928,292,1.101,293,1.229,294,1.928,295,1.229,296,1.229,297,2.991,298,1.708,299,0.995,300,0.995,301,1.229]],["title/injectables/BleService.html",[302,0.72,303,2.265]],["body/injectables/BleService.html",[3,0.427,4,0.427,5,0.374,7,0.427,9,0.374,10,1.268,11,0.788,14,0.773,15,0.035,16,0.877,20,0.603,23,2.419,30,0.374,32,0.788,35,2.383,40,0.098,50,0.019,51,0.025,52,0.019,61,1.951,62,1.511,70,0.788,132,2.019,133,1.657,158,0.788,161,1.023,163,0.965,205,1.554,210,1.513,227,1.061,231,0.872,233,1.159,236,1.291,243,2.383,269,2.557,302,1.058,303,3.328,304,1.657,305,2.547,306,2.411,307,5.146,308,2.944,309,3.93,310,4.536,311,2.94,312,4.621,313,4.621,314,4.182,315,3.537,316,3.537,317,3.537,318,3.537,319,3.537,320,3.537,321,2.254,322,2.254,323,3.328,324,1.804,325,2.94,326,1.511,327,1.824,328,1.824,329,2.547,330,2.547,331,2.547,332,2.547,333,1.824,334,3.537,335,2.547,336,2.94,337,4.621,338,2.547,339,3.537,340,3.537,341,2.019,342,2.547]],["title/injectables/BrowserWebBluetooth.html",[25,1.344,302,0.72]],["body/injectables/BrowserWebBluetooth.html",[3,0.507,4,0.507,5,0.444,6,1.329,7,0.702,9,0.444,10,1.413,11,0.715,14,0.573,15,0.034,16,0.715,20,0.715,25,2.199,30,0.444,32,0.642,33,1.792,35,2.163,40,0.116,50,0.023,51,0.028,52,0.023,61,1.991,70,0.642,131,2.163,133,1.965,158,0.877,161,0.949,163,0.715,164,4.279,227,1.67,231,0.792,302,1.178,304,1.965,306,2.61,338,3.707,343,3.486,344,4.279,345,5.147,346,5.147,347,4.63,348,4.194,349,4.194,350,4.194,351,4.194,352,3.486,353,4.194,354,4.194,355,4.194,356,3.486,357,4.194,358,4.194]],["title/injectables/ConsoleLoggerService.html",[27,1.03,302,0.72]],["body/injectables/ConsoleLoggerService.html",[0,1.671,3,0.473,4,0.473,5,0.414,6,1.297,7,0.685,9,0.414,11,0.92,14,0.737,15,0.035,16,0.667,20,0.667,27,1.614,28,1.833,30,0.571,40,0.137,50,0.021,51,0.026,52,0.021,62,2.106,70,0.826,158,0.84,161,0.92,163,0.92,174,2.106,231,1.019,233,1.496,236,1.354,238,1.925,285,3.141,302,1.235,304,1.833,328,2.543,359,2.493,360,3.551,361,3.888,362,3.912,363,4.295,364,3.888,365,3.912,366,3.888,367,3.912,368,3.082,369,2.818,370,2.818,371,2.818,372,2.818,373,2.818,374,2.818]],["title/components/DashboardComponent.html",[53,0.863,75,1.124]],["body/components/DashboardComponent.html",[3,0.29,4,0.29,5,0.254,7,0.427,9,0.374,10,0.97,11,0.602,14,0.672,15,0.035,16,0.838,20,0.41,30,0.254,32,0.368,40,0.067,50,0.013,51,0.019,52,0.013,53,1.15,54,0.859,55,1.655,56,1.24,57,1.24,59,1.24,60,2.813,61,2.023,63,1.24,64,1.027,65,1.822,66,1.655,67,1.24,68,2.381,69,1.24,70,0.707,71,1.24,72,0.859,73,1.636,74,1.24,75,1.65,76,1.24,77,0.859,78,1.24,79,0.859,80,1.24,81,0.859,82,1.789,83,1.24,84,1.24,97,1.611,126,1.126,127,1.126,158,0.602,161,0.965,163,0.838,169,1.531,171,1.372,174,1.509,175,2.391,176,2.391,177,2.636,182,1.731,185,1.731,186,1.731,191,3.016,192,2.544,193,3.016,195,2.544,200,3.016,201,1.731,202,1.731,210,1.684,215,2.537,217,2.391,218,2.114,220,1.822,221,2.636,222,2.636,223,2.636,225,2.017,226,1.256,227,1.059,229,2.537,231,0.667,233,1.234,235,1.822,236,1.051,238,1.379,253,1.998,257,2.391,266,1.998,269,1.126,271,1.126,280,1.24,292,1.372,298,2.017,299,1.24,300,1.24,321,1.531,322,1.531,324,1.803,341,1.372,356,1.998,375,1.998,376,4.617,377,3.532,378,4.188,379,3.532,380,3.532,381,2.16,382,2.403,383,2.403,384,2.403,385,2.403,386,2.403,387,2.403,388,2.403,389,2.403,390,2.403,391,2.403,392,2.403,393,3.532,394,2.403,395,2.403,396,2.403,397,2.403,398,1.998,399,1.731,400,2.403,401,2.936,402,3.532,403,5.66,404,5.66,405,3.231,406,5.66,407,5.454,408,2.017,409,2.544,410,2.251,411,2.403,412,2.403,413,2.403,414,1.998,415,2.403,416,3.325,417,3.704,418,2.403,419,2.403,420,2.403,421,2.403,422,1.531,423,1.731,424,2.403,425,3.532,426,4.188,427,4.617,428,1.731,429,2.936,430,2.403,431,2.403,432,2.403,433,2.403,434,2.403,435,4.188,436,2.403,437,2.403]],["title/injectables/DashboardService.html",[97,1.03,302,0.72]],["body/injectables/DashboardService.html",[3,0.265,4,0.265,5,0.232,7,0.265,9,0.232,10,0.906,11,0.848,13,1.581,14,0.768,15,0.035,16,0.807,20,0.374,23,2.023,27,1.55,30,0.232,32,0.872,40,0.061,50,0.012,51,0.018,52,0.012,61,1.578,62,0.938,70,0.79,73,0.857,82,0.938,97,1.081,126,1.028,127,1.028,132,1.253,133,1.028,145,1.849,154,1.419,158,0.563,161,0.982,163,0.905,177,1.253,205,1.3,210,1.779,211,3.41,215,2.442,220,1.703,226,1.324,227,0.99,229,2.442,231,0.939,233,0.828,235,1.703,236,1.248,238,0.857,243,1.703,245,2.224,247,1.581,248,2.378,249,2.378,250,2.378,251,2.378,261,2.224,262,1.581,271,1.028,280,1.703,299,1.132,300,1.132,302,0.756,304,1.028,306,1.86,308,2.529,309,3.18,311,1.824,314,2.859,321,1.398,322,1.398,323,4.375,324,2.224,325,1.824,326,2.125,327,1.132,328,1.132,329,1.581,330,1.581,331,1.581,332,1.581,335,1.581,341,2.266,342,1.581,398,1.824,399,1.581,408,1.253,409,1.581,410,1.398,438,1.581,439,3.302,440,3.302,441,3.302,442,3.936,443,3.302,444,3.302,445,2.195,446,2.195,447,3.302,448,2.195,449,3.302,450,2.195,451,3.302,452,2.195,453,3.302,454,2.195,455,2.195,456,3.302,457,2.195,458,2.195,459,2.195,460,2.195,461,4.415,462,1.581,463,2.195,464,2.195,465,1.824,466,2.195,467,4.415,468,3.302,469,3.3,470,3.302,471,2.195,472,1.824,473,1.581,474,2.84,475,2.84,476,2.84,477,2.84,478,2.104,479,2.745,480,2.195,481,2.745,482,2.195,483,1.581,484,1.581,485,1.581,486,1.824,487,1.824,488,2.195,489,3.302,490,2.195,491,2.195,492,2.195,493,2.195,494,1.824,495,1.824,496,3.302,497,3.969,498,2.195,499,1.824,500,1.824,501,2.195,502,3.302,503,2.195,504,1.824,505,1.132,506,1.824,507,3.302,508,2.195,509,1.824,510,2.195,511,2.195,512,1.824,513,2.195,514,2.195,515,2.195,516,2.195,517,2.195,518,2.195,519,2.195,520,3.302,521,3.302,522,2.195]],["title/classes/FakeBluetoothDevice.html",[40,0.087,523,1.623]],["body/classes/FakeBluetoothDevice.html",[3,0.3,4,0.3,5,0.262,6,1.305,7,0.689,9,0.262,10,1.367,11,0.616,14,0.71,15,0.035,30,0.496,32,0.796,40,0.13,50,0.013,51,0.019,52,0.013,70,0.822,145,1.665,154,0.886,156,1.279,158,0.616,161,0.956,163,0.799,205,1.171,210,1.837,218,1.675,226,1.084,227,1.279,231,0.682,233,1.25,236,1.492,245,1.83,246,0.968,261,1.411,288,2.2,289,1.279,306,2.334,324,0.968,326,2.222,327,1.864,333,1.864,381,1.864,405,2.845,505,1.864,523,1.864,524,1.416,525,2.435,526,2.986,527,2.986,528,3.005,529,2.845,530,2.48,531,2.48,532,2.48,533,3.614,534,2.986,535,2.986,536,2.48,537,2.718,538,3.314,539,3.314,540,2.48,541,2.48,542,2.48,543,2.48,544,2.986,545,2.718,546,2.718,547,2.435,548,1.58,549,2.718,550,2.2,551,1.58,552,1.58,553,2.303,554,1.58,555,2.303,556,1.279,557,1.544,558,1.58,559,2.969,560,2.2,561,1.58,562,2.303,563,1.58,564,1.58,565,1.58,566,1.58,567,1.58,568,2.303,569,1.58,570,2.303,571,2.303,572,2.303,573,1.58,574,1.58,575,1.58,576,2.303,577,1.279,578,1.694,579,1.58,580,1.58,581,1.58,582,1.58,583,1.58,584,1.58,585,1.58,586,2.064,587,2.986,588,2.435,589,2.718,590,1.58,591,1.58,592,2.303,593,1.58,594,1.58,595,1.58,596,1.58,597,1.58]],["title/classes/FakeBluetoothRemoteGATTCharacteristic.html",[40,0.087,578,1.474]],["body/classes/FakeBluetoothRemoteGATTCharacteristic.html",[3,0.284,4,0.284,5,0.249,6,1.336,7,0.706,9,0.249,10,1.519,11,0.705,14,0.769,15,0.035,30,0.483,31,1.985,32,0.781,40,0.127,50,0.013,51,0.019,52,0.013,70,0.699,145,1.615,154,0.841,156,1.213,158,0.593,161,0.985,163,0.779,205,1.401,210,1.596,218,0.841,226,1.043,227,1.24,231,0.781,233,1.223,236,1.36,245,2.062,246,0.918,261,1.358,288,2.133,289,1.213,306,2.474,324,1.615,326,2.469,327,1.793,333,1.793,381,2.633,405,1.985,505,1.213,523,1.213,524,1.343,525,1.343,526,1.499,527,2.912,528,2.89,529,2.784,534,2.636,535,2.636,537,2.636,538,3.252,539,3.252,544,2.912,545,2.636,546,2.636,547,2.361,548,1.499,549,2.636,550,2.133,551,1.499,552,1.499,553,2.215,554,1.499,555,2.215,556,1.213,557,1.485,558,1.499,559,3.161,560,2.357,561,1.499,562,2.215,563,1.499,564,1.499,565,1.499,566,1.499,567,1.499,568,2.215,569,1.499,570,2.215,571,2.215,572,2.215,573,1.499,574,1.499,575,1.499,576,2.215,577,1.213,578,1.938,579,1.499,580,1.499,581,1.499,582,1.499,583,1.499,584,1.499,585,1.499,586,2.784,587,3.454,588,3.015,589,2.912,590,1.499,591,1.499,592,2.215,593,1.499,594,2.912,595,1.499,596,2.215,597,1.499,598,3.477,599,1.955,600,2.352,601,2.89,602,2.352,603,2.352,604,2.352,605,2.352,606,2.352,607,2.352,608,2.352,609,2.352,610,2.352,611,2.352,612,2.352]],["title/classes/FakeBluetoothRemoteGATTServer.html",[40,0.087,556,1.623]],["body/classes/FakeBluetoothRemoteGATTServer.html",[3,0.3,4,0.3,5,0.263,6,1.285,7,0.678,9,0.263,10,1.369,11,0.8,14,0.752,15,0.035,30,0.496,31,1.419,32,0.797,40,0.13,50,0.013,51,0.019,52,0.013,70,0.763,145,1.668,154,0.889,156,1.282,158,0.617,161,0.939,163,0.8,205,1.288,210,1.838,218,1.527,226,1.495,227,1.281,231,0.886,233,1.071,236,1.306,245,1.832,246,1.414,261,2.033,288,2.203,289,2.203,306,2.001,324,0.971,326,2.224,327,1.868,333,1.868,381,1.868,405,2.847,505,1.282,523,1.282,524,1.419,525,1.419,526,1.584,527,2.307,529,2.067,534,2.721,535,2.721,537,2.307,538,2.99,539,2.99,544,2.99,545,2.721,546,2.721,547,2.438,548,1.584,549,2.721,550,2.203,551,1.584,552,1.584,553,2.307,554,1.584,555,2.307,556,1.868,557,1.825,558,3.178,559,3.068,560,2.203,561,1.584,562,2.307,563,1.584,564,1.584,565,2.307,566,1.584,567,2.307,568,2.307,569,1.584,570,2.307,571,2.307,572,2.307,573,1.584,574,2.307,575,1.584,576,2.721,577,1.282,578,1.696,579,1.584,580,1.584,581,1.584,582,1.584,583,1.584,584,1.584,585,1.584,586,2.067,587,2.99,588,2.438,589,2.721,590,1.584,591,1.584,592,2.307,593,1.584,594,1.584,595,1.584,596,1.584,597,1.584,601,2.066,613,3.62,614,3.62,615,2.486,616,2.721,617,3.62,618,3.62,619,2.486,620,2.486,621,2.486,622,2.486,623,2.066]],["title/classes/FakeBluetoothRemoteGATTService.html",[40,0.087,560,1.623]],["body/classes/FakeBluetoothRemoteGATTService.html",[3,0.313,4,0.313,5,0.274,6,1.245,7,0.657,9,0.274,10,1.391,11,0.745,14,0.743,15,0.035,30,0.506,32,0.808,40,0.133,50,0.014,51,0.02,52,0.014,70,0.732,145,1.707,154,0.926,156,1.336,158,0.636,161,0.9,163,0.636,205,1.024,210,1.909,218,0.926,226,1.583,227,1.311,231,0.825,233,0.65,236,1.324,245,2.174,261,1.457,288,2.255,289,1.336,306,2.048,324,1.011,326,2.255,327,1.924,333,1.924,381,1.924,405,2.13,505,1.336,523,1.336,524,1.479,525,1.479,526,1.65,527,2.377,529,2.13,534,2.786,535,2.786,537,2.377,538,3.048,539,3.048,544,3.048,545,2.786,546,2.786,547,2.496,548,1.65,549,2.786,550,2.255,551,1.65,552,1.65,553,2.377,554,1.65,555,2.377,556,1.336,557,1.594,558,1.65,559,3.287,560,2.467,561,1.65,562,2.377,563,1.65,564,1.65,565,1.65,566,1.65,567,1.65,568,2.377,569,1.65,570,2.377,571,2.377,572,2.377,573,1.65,574,1.65,575,1.65,576,2.377,577,2.614,578,1.748,579,1.65,580,1.65,581,2.377,582,1.65,583,2.377,584,1.65,585,1.65,586,2.13,587,3.048,588,2.496,589,2.786,590,1.65,591,1.65,592,2.377,593,1.65,594,1.65,595,1.65,596,1.65,597,1.65,599,2.153,616,2.786,623,2.153,624,3.73,625,3.73,626,2.59,627,2.59,628,2.59,629,2.59,630,2.59,631,2.59]],["title/components/HumidityComponent.html",[53,0.863,77,1.124]],["body/components/HumidityComponent.html",[3,0.276,4,0.276,5,0.242,9,0.242,10,0.933,11,0.693,14,0.784,15,0.035,16,0.821,20,0.389,30,0.242,32,0.349,33,1.453,40,0.063,42,2.296,50,0.012,51,0.018,52,0.012,53,1.115,54,0.816,55,1.593,56,1.178,57,1.178,59,1.178,60,2.772,61,1.921,63,1.754,64,0.975,65,1.754,66,1.593,67,1.178,68,2.323,69,1.178,70,0.737,71,1.178,72,0.816,73,0.891,74,1.178,75,0.816,76,1.178,77,1.61,78,1.178,79,0.816,80,1.178,81,0.816,82,0.975,83,1.178,84,1.178,97,1.798,126,1.07,127,1.07,135,1.303,145,0.891,154,1.453,158,0.58,161,1.026,163,0.891,171,2.32,174,1.453,175,2.32,176,2.32,178,2.59,179,2.59,197,2.59,205,1.322,208,2.59,210,1.653,214,2.59,215,2.484,216,2.59,217,2.32,218,1.61,220,1.754,221,2.571,222,2.571,223,2.571,224,2.167,225,1.942,226,1.219,227,1.02,228,1.455,229,2.484,231,0.767,233,1.312,235,1.754,236,1.02,238,1.587,242,2.167,243,2.484,245,1.328,246,1.328,257,2.749,261,1.328,269,1.07,271,1.07,272,1.455,274,1.455,275,1.455,278,2.167,279,2.167,280,1.754,292,1.303,293,1.455,295,1.455,296,1.455,298,1.942,299,1.178,300,1.178,301,1.455,329,1.644,330,1.644,331,2.449,408,1.303,410,2.59,414,1.898,416,2.927,422,1.455,423,1.644,428,2.927,474,2.571,475,2.571,476,2.571,477,2.571,478,2.167,485,2.449,557,0.975,632,1.898,633,3.743,634,3.378,635,3.378,636,3.378,637,3.378,638,3.743,639,2.283,640,2.283,641,2.283,642,2.283,643,2.283,644,2.283,645,2.283,646,2.283,647,2.283,648,3.378,649,2.283,650,3.378,651,1.898,652,2.827,653,2.283,654,2.283,655,3.743,656,2.283,657,2.283,658,2.283,659,2.283,660,2.283,661,2.283,662,1.898,663,1.644,664,1.898,665,3.401,666,3.401,667,1.898,668,1.898,669,1.898,670,2.283,671,1.898,672,1.898,673,1.898,674,3.378,675,1.898,676,2.827,677,1.898,678,1.898,679,1.898,680,1.898,681,1.898,682,1.898,683,1.898,684,1.898,685,1.898,686,1.898,687,1.898,688,1.898,689,2.827,690,1.644,691,1.898,692,1.898,693,1.898]],["title/interfaces/Logger.html",[0,1.344,368,1.796]],["body/interfaces/Logger.html",[0,1.653,2,2.786,3,0.467,4,0.467,5,0.409,6,1.292,7,0.682,9,0.409,11,0.915,14,0.733,15,0.035,16,0.659,20,0.659,27,1.267,28,1.813,30,0.568,40,0.136,50,0.021,51,0.026,52,0.021,62,2.091,70,0.822,158,0.834,161,0.915,163,0.915,174,2.091,231,1.014,233,1.492,236,1.547,238,1.912,285,3.119,302,1.229,328,2.525,359,2.465,360,3.526,361,3.526,363,4.283,364,3.526,366,3.526,368,3.223,369,3.526,370,3.526,371,3.526,372,2.786,373,2.786,374,2.786,694,3.869,695,3.869,696,3.869]],["title/injectables/NoLoggerService.html",[28,1.474,302,0.72]],["body/injectables/NoLoggerService.html",[0,1.671,3,0.473,4,0.473,5,0.414,6,1.297,7,0.685,9,0.414,11,0.92,14,0.737,15,0.035,16,0.667,20,0.667,27,1.281,28,2.31,30,0.571,40,0.137,50,0.021,51,0.026,52,0.021,62,2.106,70,0.826,158,0.84,161,0.92,163,0.92,174,2.106,231,1.019,233,1.496,236,1.354,238,1.925,285,3.141,302,1.235,304,1.833,328,2.543,359,2.493,360,3.551,361,3.888,363,4.295,364,3.888,366,3.888,368,3.082,369,2.818,370,2.818,371,2.818,372,2.818,373,2.818,374,2.818,697,3.912,698,3.912,699,3.912]],["title/injectables/ServerWebBluetooth.html",[302,0.72,700,2.265]],["body/injectables/ServerWebBluetooth.html",[3,0.552,4,0.552,5,0.483,6,1.24,7,0.655,9,0.483,15,0.034,16,0.779,20,0.779,30,0.483,32,0.699,40,0.127,42,2.469,50,0.025,51,0.029,52,0.025,158,0.924,161,0.779,163,0.779,302,1.24,304,2.14,700,3.903,701,3.797,702,5.977,703,4.568,704,4.568,705,3.797,706,4.568]],["title/components/StepCounterComponent.html",[53,0.863,79,1.124]],["body/components/StepCounterComponent.html",[3,0.267,4,0.267,5,0.233,9,0.233,10,0.91,11,0.679,14,0.779,15,0.035,16,0.755,20,0.376,30,0.233,32,0.338,40,0.061,42,2.13,50,0.012,51,0.018,52,0.012,53,1.093,54,0.789,55,1.553,56,1.138,57,1.138,59,1.138,60,2.744,61,1.902,63,1.71,64,0.943,65,1.71,66,1.553,67,1.138,68,2.284,69,1.138,70,0.726,71,1.138,72,0.789,73,0.862,74,1.138,75,0.789,76,1.138,77,0.789,78,1.138,79,1.582,80,1.138,81,0.789,82,0.943,83,1.138,84,1.138,97,1.782,126,1.034,127,1.034,135,1.26,158,0.565,161,1.001,163,0.85,169,2.537,171,2.273,174,1.416,175,2.273,176,2.273,178,2.537,179,3.176,180,4.144,181,3.31,182,3.919,183,3.31,184,3.31,185,3.59,186,3.59,187,3.31,188,4.144,189,4.144,191,3.59,192,3.59,193,2.868,194,3.31,195,2.868,196,3.31,197,2.537,200,2.868,201,2.868,202,2.868,203,3.31,204,3.31,205,1.521,206,3.31,208,2.537,210,1.632,214,2.537,215,2.448,216,2.537,217,2.273,218,1.582,220,1.71,221,2.528,222,2.528,223,2.528,224,2.112,225,1.893,226,1.194,227,0.994,228,1.406,229,2.448,231,0.752,233,1.251,235,1.71,236,0.999,238,1.555,242,2.112,243,2.667,245,1.294,246,1.555,257,2.71,261,1.294,269,1.034,271,1.034,272,1.406,274,1.406,275,1.406,278,2.112,279,2.112,280,1.71,288,1.138,292,1.26,293,1.406,295,1.406,296,1.406,298,1.893,299,1.138,300,1.138,301,1.406,408,1.26,409,1.589,417,2.387,474,2.528,475,2.528,476,2.528,477,2.528,479,3.31,481,3.31,483,2.387,484,2.387,616,2.112,690,1.589,707,1.834,708,2.756,709,3.982,710,3.982,711,2.206,712,2.206,713,2.206,714,2.206,715,2.206,716,2.206,717,2.206,718,2.206,719,2.206,720,2.206,721,2.206,722,2.206,723,2.206,724,2.206,725,2.206,726,3.315,727,3.315,728,3.315]],["title/components/TemperatureComponent.html",[53,0.863,81,1.124]],["body/components/TemperatureComponent.html",[3,0.278,4,0.278,5,0.243,9,0.243,10,0.939,11,0.696,14,0.786,15,0.035,16,0.823,20,0.392,30,0.243,32,0.352,33,1.461,40,0.064,42,2.301,50,0.012,51,0.018,52,0.012,53,1.121,54,0.822,55,1.602,56,1.187,57,1.187,59,1.187,60,2.778,61,1.925,63,1.764,64,0.983,65,1.764,66,1.602,67,1.187,68,2.331,69,1.187,70,0.739,71,1.187,72,0.822,73,0.898,74,1.187,75,0.822,76,1.187,77,0.822,78,1.187,79,0.822,80,1.187,81,1.616,82,1.931,83,1.187,84,1.187,97,1.802,126,1.078,127,1.078,135,1.313,145,0.898,154,1.459,158,0.583,161,1.027,163,0.894,171,2.331,174,1.461,175,2.331,176,2.331,178,2.601,179,2.601,197,2.601,205,1.326,208,2.601,210,1.658,214,2.601,215,2.492,216,2.601,217,2.331,218,1.616,220,1.764,221,2.581,222,2.581,223,2.581,224,2.179,225,1.953,226,1.224,227,1.026,228,1.466,229,2.492,231,0.771,233,1.315,235,1.764,236,1.024,238,1.594,242,2.179,243,2.492,245,1.336,246,1.336,257,2.758,261,1.336,269,1.078,271,1.078,272,1.466,274,1.466,275,1.466,278,2.179,279,2.179,280,1.764,292,1.313,293,1.466,295,1.466,296,1.466,298,1.953,299,1.187,300,1.187,301,1.466,408,1.313,416,2.94,422,1.466,423,1.657,428,2.94,473,2.463,474,2.581,475,2.581,476,2.581,477,2.581,478,2.179,557,0.983,633,3.757,634,3.394,635,3.394,636,3.394,637,3.394,638,3.757,648,3.394,650,3.394,651,1.912,652,2.843,655,3.757,662,1.912,663,1.657,664,1.912,667,1.912,668,1.912,669,1.912,671,1.912,672,1.912,673,1.912,674,3.394,675,1.912,676,2.843,677,1.912,678,1.912,679,1.912,680,1.912,681,1.912,682,1.912,683,1.912,684,1.912,685,1.912,686,1.912,687,1.912,688,1.912,689,2.843,690,1.657,691,1.912,692,1.912,693,1.912,729,1.912,730,2.3,731,2.3,732,2.3,733,2.3,734,2.3,735,2.3,736,2.3,737,2.3,738,2.3,739,2.3,740,2.3,741,2.3,742,2.3,743,2.3,744,2.3,745,2.3,746,2.3,747,2.3,748,3.42,749,3.42]],["title/modules/WebBluetoothModule.html",[41,1.474,85,1.796]],["body/modules/WebBluetoothModule.html",[0,1.594,1,3.669,3,0.451,4,0.451,5,0.395,6,1.095,7,0.578,8,2.378,11,0.815,12,2.378,13,2.687,14,0.51,15,0.035,16,0.981,17,3.365,18,4.389,19,3.102,20,0.636,21,3.977,22,2.687,23,2.044,24,3.102,25,2.46,26,3.102,27,1.729,28,2.242,29,3.102,30,0.609,31,3.015,32,0.881,33,2.379,34,2.687,35,2.724,36,3.102,37,3.365,38,3.102,39,2.378,40,0.104,41,2.474,42,2.044,43,3.977,44,1.925,45,3.015,46,3.048,47,3.102,48,2.378,49,2.378,50,0.02,51,0.026,52,0.02,70,0.571,87,2.131,158,0.636,161,0.636,163,0.636,205,1.024,231,0.704,246,1.457,750,3.731,751,3.731]],["title/coverage.html",[752,3.553]],["body/coverage.html",[0,1.8,1,1.963,5,0.326,6,1.422,7,0.75,8,3.289,14,0.421,15,0.035,23,1.316,25,1.8,27,1.008,28,1.443,31,2.741,33,1.316,37,1.963,40,0.15,44,1.589,48,1.963,50,0.017,51,0.023,52,0.017,53,1.532,54,1.101,58,2.56,72,1.101,75,1.101,77,1.101,79,1.101,81,1.101,97,1.008,101,3.458,142,2.218,143,2.218,146,2.218,150,2.218,155,2.218,157,2.56,172,2.56,173,2.56,302,1.308,303,2.218,305,2.218,308,1.963,332,4.431,343,2.56,359,3.059,368,1.759,375,2.56,417,4.648,438,2.218,523,1.589,524,2.947,556,1.589,560,1.589,578,1.443,632,2.56,700,2.218,701,2.56,707,2.56,729,2.56,752,2.56,753,2.218,754,3.08,755,3.08,756,3.08,757,4.213,758,6.258,759,2.56,760,3.08,761,3.08,762,3.502,763,3.502,764,2.56,765,2.56,766,5.162,767,4.213,768,3.08,769,4.213,770,3.08,771,3.08,772,4.75,773,2.56,774,2.56,775,2.56,776,2.56,777,3.08,778,4.213,779,3.08,780,2.56,781,3.502,782,2.56,783,3.08,784,3.08]],["title/dependencies.html",[88,2.407,785,2.192]],["body/dependencies.html",[15,0.035,20,0.76,22,3.213,50,0.024,51,0.029,52,0.024,88,2.843,107,4.443,131,2.756,133,2.09,271,2.09,663,3.213,786,4.461,787,6.349,788,4.461,789,4.461,790,4.461,791,4.461,792,4.461,793,4.461,794,4.461,795,4.461,796,4.461,797,4.461,798,3.708,799,4.461,800,4.461,801,4.461,802,4.461,803,4.461,804,4.461,805,4.461]],["title/miscellaneous/functions.html",[806,1.36,807,3.141]],["body/miscellaneous/functions.html",[6,1.095,7,0.578,8,3.05,9,0.506,11,0.816,15,0.032,25,2.518,34,3.447,35,2.469,37,3.755,48,3.55,50,0.026,51,0.03,52,0.026,70,0.733,231,0.904,806,2.469,807,3.979,808,5.893]],["title/index.html",[9,0.279,809,1.899,810,1.899]],["body/index.html",[7,0.618,12,1.507,15,0.035,16,0.945,17,2.225,20,0.707,23,2.185,30,0.439,32,0.875,39,1.507,40,0.115,41,1.636,42,1.492,45,1.35,50,0.013,51,0.019,52,0.013,61,1.248,62,1.492,73,1.62,85,1.993,86,1.35,100,1.507,131,1.22,132,2.616,133,2.544,153,1.966,154,1.248,177,2.369,205,1.452,211,1.703,218,0.845,226,1.534,269,1.636,289,1.801,302,1.049,309,2.514,310,3.809,321,2.225,322,2.225,323,3.52,324,2.12,326,2.088,328,1.801,333,1.801,335,2.514,336,1.966,338,2.514,341,1.35,342,2.514,381,1.22,401,1.966,422,2.225,429,1.966,442,2.902,462,1.703,465,1.966,469,1.966,486,2.902,487,2.902,494,1.966,495,1.966,499,1.966,500,1.966,504,1.966,505,1.22,506,1.966,509,1.966,512,1.966,525,1.35,529,1.35,550,1.22,557,1.01,577,1.22,753,2.989,785,1.966,798,2.902,809,1.703,810,1.703,811,2.365,812,3.491,813,3.491,814,2.365,815,2.365,816,2.365,817,2.365,818,2.365,819,2.365,820,2.365,821,2.365,822,2.365,823,2.365,824,2.365,825,4.063,826,3.491,827,2.365,828,3.491,829,4.581,830,3.491,831,3.491,832,3.491,833,3.491,834,5.114,835,5.29,836,3.491,837,2.365,838,3.491,839,2.365,840,2.365,841,2.365,842,3.491,843,2.365,844,2.365,845,2.365,846,2.365,847,2.365,848,3.491,849,2.365,850,3.491,851,2.365,852,2.365,853,2.365,854,2.365,855,2.902,856,2.365,857,2.365,858,2.365,859,2.365,860,3.491,861,2.365,862,3.491,863,1.966,864,2.365,865,2.365,866,2.365,867,2.365,868,2.365,869,2.365,870,2.365,871,2.365,872,1.966,873,3.491,874,2.365,875,2.365,876,3.491,877,3.491,878,2.365,879,2.365,880,2.365,881,2.902,882,2.365,883,2.365,884,3.491,885,2.365,886,2.365,887,2.365,888,2.365,889,2.365,890,2.365,891,2.365,892,2.365,893,2.365,894,2.365,895,2.365,896,2.365,897,2.514,898,2.902,899,3.45,900,1.966,901,1.966,902,1.966,903,1.966,904,2.902,905,1.966,906,1.966,907,1.966,908,1.966,909,1.966,910,2.902,911,4.608,912,1.966,913,1.966,914,1.966,915,3.45,916,1.966,917,2.902,918,1.966,919,1.966,920,1.966,921,1.966,922,1.966,923,1.966,924,1.966,925,1.966,926,2.902,927,1.966,928,1.966,929,1.966,930,1.703,931,1.966,932,1.966,933,2.902,934,2.902,935,1.966,936,1.966,937,1.966,938,1.966,939,1.966,940,1.966,941,1.966,942,1.966,943,1.966,944,1.966,945,1.966,946,1.966,947,1.966,948,1.966,949,1.966,950,1.966,951,1.966,952,1.966,953,1.966,954,1.966,955,1.966,956,1.966,957,1.966,958,1.966,959,1.966,960,1.966,961,1.966,962,1.966,963,1.966]],["title/license.html",[809,1.899,810,1.899,897,1.899]],["body/license.html",[15,0.027,50,0.022,51,0.027,52,0.022,100,2.625,462,2.967,550,2.125,753,2.967,825,4.232,855,3.425,881,3.425,897,2.967,898,4.232,899,4.594,900,3.425,901,3.425,902,3.425,903,3.425,904,4.232,905,3.425,906,3.425,907,3.425,908,3.425,909,3.425,910,4.232,911,5.183,912,3.425,913,3.425,914,3.425,915,4.594,916,3.425,917,4.232,918,3.425,919,3.425,920,3.425,921,3.425,922,3.425,923,3.425,924,3.425,925,3.425,926,4.232,927,3.425,928,3.425,929,3.425,930,2.967,931,3.425,932,3.425,933,4.232,934,4.232,935,3.425,936,3.425,937,3.425,938,3.425,939,3.425,940,3.425,941,3.425,942,3.425,943,3.425,944,3.425,945,3.425,946,3.425,947,3.425,948,3.425,949,3.425,950,3.425,951,3.425,952,3.425,953,3.425,954,3.425,955,3.425,956,3.425,957,3.425,958,3.425,959,3.425,960,3.425,961,3.425,962,3.425,963,3.425]],["title/modules.html",[87,2.44]],["body/modules.html",[15,0.03,41,2.311,50,0.026,51,0.03,52,0.026,86,2.816,87,2.816,131,2.544,352,4.101,964,4.933,965,5.669,966,4.933,967,4.101]],["title/overview.html",[968,3.553]],["body/overview.html",[2,3.032,15,0.034,41,2.614,44,2.172,50,0.023,51,0.028,52,0.023,54,2.199,55,1.973,64,1.799,72,1.994,75,1.994,77,1.994,79,1.994,81,1.994,85,2.404,86,3.691,87,2.404,88,2.683,89,3.5,90,3.5,91,3.5,92,3.5,93,3.5,94,3.5,95,3.5,96,3.5,97,1.827,98,4.29,99,3.5,100,2.683,156,2.172,304,1.973,863,4.29,872,3.5,968,3.5,969,4.21,970,4.21]],["title/miscellaneous/typealiases.html",[806,1.36,971,3.778]],["body/miscellaneous/typealiases.html",[6,1.081,7,0.571,9,0.5,14,0.841,15,0.03,50,0.025,51,0.03,52,0.025,305,3.401,314,4.351,438,3.401,616,3.85,759,3.925,806,2.436,972,4.722,973,5.527,974,5.527,975,5.527,976,4.722,977,4.722]],["title/miscellaneous/variables.html",[806,1.36,978,3.141]],["body/miscellaneous/variables.html",[6,0.349,7,0.184,9,0.161,14,0.583,15,0.035,23,0.652,25,1.546,27,1.028,32,0.718,33,2.18,35,0.787,44,1.281,45,0.871,46,0.972,49,0.972,50,0.008,51,0.013,52,0.008,70,0.234,73,0.596,82,0.652,97,0.5,101,1.099,142,1.789,143,1.789,145,1.894,146,2.606,147,2.064,148,3.008,149,1.269,150,2.261,151,1.269,152,1.269,154,1.122,177,0.871,205,1.474,226,0.458,246,2.098,247,1.099,248,1.789,249,1.789,250,1.789,251,1.789,262,1.099,308,2.001,324,2.192,326,2.004,341,0.871,344,1.269,347,1.269,399,1.099,410,0.972,472,3.31,473,1.099,474,2.274,475,2.274,476,2.274,477,2.274,478,0.972,483,1.099,484,1.099,485,1.099,547,0.871,557,1.061,559,2.678,577,1.62,578,0.715,586,0.871,588,2.066,705,3.008,708,1.269,762,1.269,763,2.61,764,2.064,765,2.064,772,1.269,773,2.61,774,2.064,775,2.61,776,2.064,780,1.269,781,3.008,782,1.269,806,0.787,930,1.099,967,2.61,978,1.269,979,3.14,980,4.499,981,1.526,982,1.526,983,2.483,984,1.526,985,3.618,986,3.618,987,3.14,988,3.982,989,3.982,990,1.526,991,1.526,992,1.526,993,1.526,994,1.526,995,1.526,996,1.526,997,1.526,998,1.526,999,1.526,1000,2.483,1001,2.483,1002,3.14,1003,1.526,1004,1.526,1005,3.14,1006,1.526,1007,1.526,1008,2.483,1009,2.483,1010,1.526,1011,1.526,1012,1.526,1013,1.526,1014,1.526,1015,2.483,1016,1.526,1017,1.526,1018,1.526,1019,1.526,1020,1.526,1021,1.526,1022,1.526,1023,1.526,1024,1.526,1025,1.526,1026,1.526,1027,1.526,1028,1.526,1029,1.526,1030,1.526,1031,2.483,1032,1.526,1033,1.526,1034,1.526,1035,1.526,1036,6.32,1037,6.32,1038,6.32,1039,6.32,1040,1.526,1041,1.526,1042,1.526,1043,1.526,1044,1.526,1045,1.526,1046,1.526,1047,1.526,1048,1.526,1049,1.526,1050,1.526,1051,1.526,1052,1.526,1053,1.526,1054,1.526,1055,1.526,1056,1.526,1057,1.526,1058,1.526,1059,1.526,1060,1.526,1061,4.985,1062,1.526,1063,4.69,1064,1.526,1065,4.69,1066,1.526,1067,1.526,1068,1.526,1069,1.526,1070,1.526,1071,1.526,1072,1.526,1073,1.526,1074,1.526,1075,1.526,1076,3.14,1077,3.14,1078,1.526,1079,1.526,1080,1.526,1081,1.526,1082,1.526,1083,1.526,1084,1.526,1085,1.526,1086,1.526,1087,1.526,1088,1.526,1089,1.526,1090,1.526,1091,1.526,1092,1.526,1093,1.526,1094,1.526,1095,1.526,1096,1.526,1097,1.526,1098,1.526,1099,1.526,1100,1.526,1101,1.526,1102,1.526,1103,1.526,1104,1.526,1105,1.526,1106,1.526,1107,1.526,1108,1.526,1109,1.526,1110,1.526,1111,1.526,1112,1.526,1113,1.526,1114,1.526,1115,1.526,1116,1.526,1117,1.526,1118,1.526,1119,1.526,1120,1.526,1121,1.526,1122,1.526,1123,1.526,1124,1.526,1125,1.526,1126,1.526,1127,1.526,1128,1.526,1129,1.526,1130,1.526,1131,1.526,1132,1.526,1133,1.526,1134,1.526,1135,1.526]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":417,"title":{},"body":{"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{},"coverage.html":{}}}],["0.0.6",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":768,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":779,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":778,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":777,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["000",{"_index":206,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["0000",{"_index":248,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["000000",{"_index":680,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["000000000000",{"_index":1039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0000180f",{"_index":262,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["00002a19",{"_index":247,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["00805f9b34fb",{"_index":251,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["0451",{"_index":1036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":422,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{}}}],["1.1.4",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["1.35.0",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100",{"_index":472,"title":{},"body":{"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":249,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["100px",{"_index":196,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["10px",{"_index":435,"title":{},"body":{"components/DashboardComponent.html":{}}}],["11.2.0",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["111px",{"_index":194,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["15px",{"_index":427,"title":{},"body":{"components/DashboardComponent.html":{}}}],["16px",{"_index":634,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["17",{"_index":682,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["2",{"_index":863,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0.0",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["2.a",{"_index":824,"title":{},"body":{"index.html":{}}}],["2.b",{"_index":843,"title":{},"body":{"index.html":{}}}],["2000",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2017",{"_index":901,"title":{},"body":{"index.html":{},"license.html":{}}}],["20px",{"_index":425,"title":{},"body":{"components/DashboardComponent.html":{}}}],["22/34",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":199,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["3",{"_index":864,"title":{},"body":{"index.html":{}}}],["32px",{"_index":437,"title":{},"body":{"components/DashboardComponent.html":{}}}],["38px",{"_index":204,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["3em",{"_index":190,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["4",{"_index":868,"title":{},"body":{"index.html":{}}}],["4000",{"_index":1037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["40px",{"_index":413,"title":{},"body":{"components/DashboardComponent.html":{}}}],["4933",{"_index":475,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":872,"title":{},"body":{"index.html":{},"overview.html":{}}}],["52ffa9740042",{"_index":477,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["5em",{"_index":709,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["5px",{"_index":434,"title":{},"body":{"components/DashboardComponent.html":{}}}],["6",{"_index":969,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["64",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":970,"title":{},"body":{"overview.html":{}}}],["700px",{"_index":415,"title":{},"body":{"components/DashboardComponent.html":{}}}],["8000",{"_index":250,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["80px",{"_index":203,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["9b10",{"_index":476,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["9b35",{"_index":474,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["__register__",{"_index":1107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_config",{"_index":307,"title":{},"body":{"injectables/BleService.html":{}}}],["above",{"_index":932,"title":{},"body":{"index.html":{},"license.html":{}}}],["absolute",{"_index":192,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["abstract",{"_index":852,"title":{},"body":{"index.html":{}}}],["acc",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accelerometer",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["acceptalldevices",{"_index":494,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["accessors",{"_index":225,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["action",{"_index":957,"title":{},"body":{"index.html":{},"license.html":{}}}],["actual_component",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["addeventlistener",{"_index":528,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["addeventlistener(type",{"_index":537,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["address",{"_index":1110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["advanced",{"_index":844,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":972,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":186,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["and/or",{"_index":924,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular",{"_index":401,"title":{},"body":{"components/DashboardComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/common",{"_index":22,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/card",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/expansion",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/grid",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/icon",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/list",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/menu",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/progress",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/snack",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["angular/material/toolbar",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/platform",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["annotated",{"_index":830,"title":{},"body":{"index.html":{}}}],["api",{"_index":873,"title":{},"body":{"index.html":{}}}],["app",{"_index":889,"title":{},"body":{"index.html":{}}}],["app.component",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":54,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appmodule",{"_index":86,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["apppage",{"_index":155,"title":{"classes/AppPage.html":{}},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["args",{"_index":363,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["arising",{"_index":961,"title":{},"body":{"index.html":{},"license.html":{}}}],["arraybuffer(8",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ask",{"_index":869,"title":{},"body":{"index.html":{}}}],["associated",{"_index":912,"title":{},"body":{"index.html":{},"license.html":{}}}],["async",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":950,"title":{},"body":{"index.html":{},"license.html":{}}}],["auto",{"_index":418,"title":{},"body":{"components/DashboardComponent.html":{}}}],["available",{"_index":967,"title":{},"body":{"modules.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["awboptions",{"_index":1,"title":{"interfaces/AWBOptions.html":{}},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["b",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["b000",{"_index":1038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bar",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["barometer",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["battery",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["battery_charging_full",{"_index":207,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["battery_level",{"_index":487,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["battery_service",{"_index":486,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["batterylevel",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["batterylevelcomponent",{"_index":72,"title":{"components/BatteryLevelComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["batterylevelcomponent.characteristicuuid",{"_index":277,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["batterylevelcomponent.serviceuuid",{"_index":276,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["batterylevelservice",{"_index":833,"title":{},"body":{"index.html":{}}}],["batterylevelservice.gatt_characteristic_battery_level",{"_index":867,"title":{},"body":{"index.html":{}}}],["batterylevelservice.gatt_primary_service",{"_index":862,"title":{},"body":{"index.html":{}}}],["ble",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{}}}],["blecore",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bleservice",{"_index":303,"title":{"injectables/BleService.html":{}},"body":{"injectables/BleService.html":{},"coverage.html":{}}}],["block",{"_index":197,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["blog",{"_index":887,"title":{},"body":{"index.html":{}}}],["bluetooth",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/DashboardService.html":{},"dependencies.html":{},"index.html":{}}}],["bluetooth.service",{"_index":24,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["bluetooth/src/lib/bluetooth.module.ts",{"_index":8,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["bluetooth/src/lib/bluetooth.module.ts:32",{"_index":751,"title":{},"body":{"modules/WebBluetoothModule.html":{}}}],["bluetooth/src/lib/bluetooth.service.ts",{"_index":759,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["bluetooth/src/lib/lang/uuids/ti",{"_index":762,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bluetooth/src/lib/logger.service.ts",{"_index":359,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"coverage.html":{}}}],["bluetooth/src/lib/logger.service.ts:13",{"_index":365,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:16",{"_index":362,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:19",{"_index":367,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:28",{"_index":698,"title":{},"body":{"injectables/NoLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:29",{"_index":697,"title":{},"body":{"injectables/NoLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:30",{"_index":699,"title":{},"body":{"injectables/NoLoggerService.html":{}}}],["bluetooth/src/lib/logger.service.ts:4",{"_index":695,"title":{},"body":{"interfaces/Logger.html":{}}}],["bluetooth/src/lib/logger.service.ts:5",{"_index":694,"title":{},"body":{"interfaces/Logger.html":{}}}],["bluetooth/src/lib/logger.service.ts:6",{"_index":696,"title":{},"body":{"interfaces/Logger.html":{}}}],["bluetooth/src/lib/platform/browser.ts",{"_index":343,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"coverage.html":{}}}],["bluetooth/src/lib/platform/browser.ts:14",{"_index":348,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["bluetooth/src/lib/platform/browser.ts:5",{"_index":345,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["bluetooth/src/lib/platform/server.ts",{"_index":701,"title":{},"body":{"injectables/ServerWebBluetooth.html":{},"coverage.html":{}}}],["bluetooth/src/lib/platform/server.ts:5",{"_index":703,"title":{},"body":{"injectables/ServerWebBluetooth.html":{}}}],["bluetooth/src/lib/test.utils.ts",{"_index":524,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{}}}],["bluetooth/src/lib/test.utils.ts:101",{"_index":607,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:102",{"_index":606,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:103",{"_index":608,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:104",{"_index":604,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:105",{"_index":602,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:106",{"_index":605,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:107",{"_index":603,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:111",{"_index":600,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:125",{"_index":612,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:129",{"_index":609,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:13",{"_index":531,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:136",{"_index":610,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:144",{"_index":611,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["bluetooth/src/lib/test.utils.ts:15",{"_index":533,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:18",{"_index":540,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:25",{"_index":542,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:30",{"_index":543,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:35",{"_index":541,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:46",{"_index":617,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:48",{"_index":618,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:52",{"_index":619,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:58",{"_index":621,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:62",{"_index":622,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:7",{"_index":532,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:70",{"_index":620,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["bluetooth/src/lib/test.utils.ts:79",{"_index":626,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:8",{"_index":536,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["bluetooth/src/lib/test.utils.ts:81",{"_index":629,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:82",{"_index":628,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:83",{"_index":627,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:87",{"_index":630,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth/src/lib/test.utils.ts:91",{"_index":631,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["bluetooth_disabled",{"_index":406,"title":{},"body":{"components/DashboardComponent.html":{}}}],["bluetooth_searching",{"_index":404,"title":{},"body":{"components/DashboardComponent.html":{}}}],["bluetoothcharacteristicproperties",{"_index":586,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"miscellaneous/variables.html":{}}}],["bluetoothcharacteristicuuid",{"_index":245,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["bluetoothcore",{"_index":23,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"injectables/BleService.html":{},"injectables/DashboardService.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["bluetoothcore(b",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["bluetoothcore(fakebrowserwebbluetooth",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["bluetoothremotegattcharacteristic",{"_index":512,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["bluetoothremotegattserver",{"_index":505,"title":{},"body":{"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["bluetoothremotegattservice",{"_index":509,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["bluetoothserviceuuid",{"_index":261,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["bob",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":13,"title":{},"body":{"interfaces/AWBOptions.html":{},"injectables/DashboardService.html":{},"modules/WebBluetoothModule.html":{}}}],["bootstrap",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["bordervisible",{"_index":678,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["bottom",{"_index":202,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["browse",{"_index":965,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"classes/AppPage.html":{},"injectables/BrowserWebBluetooth.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser's",{"_index":823,"title":{},"body":{"index.html":{}}}],["browser.get(browser.baseurl",{"_index":167,"title":{},"body":{"classes/AppPage.html":{}}}],["browser/animations",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["browserwebbluetooth",{"_index":25,"title":{"injectables/BrowserWebBluetooth.html":{}},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"injectables/BrowserWebBluetooth.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["button",{"_index":433,"title":{},"body":{"components/DashboardComponent.html":{}}}],["c",{"_index":900,"title":{},"body":{"index.html":{},"license.html":{}}}],["c.characteristic",{"_index":502,"title":{},"body":{"injectables/DashboardService.html":{}}}],["c.decoder(dataview",{"_index":515,"title":{},"body":{"injectables/DashboardService.html":{}}}],["c.service",{"_index":497,"title":{},"body":{"injectables/DashboardService.html":{}}}],["call",{"_index":834,"title":{},"body":{"index.html":{}}}],["callbackfn",{"_index":576,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["can't",{"_index":851,"title":{},"body":{"index.html":{}}}],["canvas",{"_index":633,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["card",{"_index":426,"title":{},"body":{"components/DashboardComponent.html":{}}}],["catcherror",{"_index":463,"title":{},"body":{"injectables/DashboardService.html":{}}}],["cc2650",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["center",{"_index":182,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["changelog",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["changevalue",{"_index":598,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}}}],["changevalue(value",{"_index":596,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["characteristic",{"_index":323,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["characteristic)(value",{"_index":492,"title":{},"body":{"injectables/DashboardService.html":{}}}],["characteristic)?.decoder",{"_index":522,"title":{},"body":{"injectables/DashboardService.html":{}}}],["characteristics",{"_index":577,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["characteristicsinstances",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["characteristicsinstances[uuid].changevalue(random",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["characteristicsinstances[uuid].randomvaluefn",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["characteristicuuid",{"_index":208,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["characteristicvaluechanged",{"_index":589,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["charge",{"_index":907,"title":{},"body":{"index.html":{},"license.html":{}}}],["chart",{"_index":635,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["chartref",{"_index":636,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["checkout",{"_index":885,"title":{},"body":{"index.html":{}}}],["chegham",{"_index":903,"title":{},"body":{"index.html":{},"license.html":{}}}],["claim",{"_index":953,"title":{},"body":{"index.html":{},"license.html":{}}}],["class",{"_index":40,"title":{"classes/AppPage.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":156,"title":{},"body":{"classes/AppPage.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"overview.html":{}}}],["clear",{"_index":529,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["close",{"_index":300,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["cluster_appmodule",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["color",{"_index":209,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["command",{"_index":882,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":21,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["component",{"_index":53,"title":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["components",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"overview.html":{}}}],["conditions",{"_index":931,"title":{},"body":{"index.html":{},"license.html":{}}}],["conf",{"_index":451,"title":{},"body":{"injectables/DashboardService.html":{}}}],["conf.characteristic",{"_index":521,"title":{},"body":{"injectables/DashboardService.html":{}}}],["conf.service",{"_index":520,"title":{},"body":{"injectables/DashboardService.html":{}}}],["conf.value",{"_index":398,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{}}}],["config",{"_index":308,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config(options",{"_index":313,"title":{},"body":{"injectables/BleService.html":{}}}],["config[servicename].characteristics.reduce((acc",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config[servicename].uuid",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":405,"title":{},"body":{"components/DashboardComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["connected",{"_index":289,"title":{},"body":{"components/BatteryLevelComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["connecteddevice.name",{"_index":407,"title":{},"body":{"components/DashboardComponent.html":{}}}],["connection",{"_index":962,"title":{},"body":{"index.html":{},"license.html":{}}}],["console",{"_index":211,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["console.error.apply(console",{"_index":373,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["console.log('getting",{"_index":842,"title":{},"body":{"index.html":{}}}],["console.log('reading",{"_index":690,"title":{},"body":{"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["console.log.apply(console",{"_index":372,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["console.warn.apply(console",{"_index":374,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["consoleloggerservice",{"_index":27,"title":{"injectables/ConsoleLoggerService.html":{}},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consoleloggerserviceconfig",{"_index":48,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["consoleloggerserviceconfig(options",{"_index":34,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{}}}],["const",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":227,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["constructor(ble",{"_index":311,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{}}}],["constructor(dashboardservice",{"_index":228,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["constructor(device",{"_index":615,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["constructor(id",{"_index":530,"title":{},"body":{"classes/FakeBluetoothDevice.html":{}}}],["constructor(public",{"_index":333,"title":{},"body":{"injectables/BleService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["constructor(service",{"_index":382,"title":{},"body":{"components/DashboardComponent.html":{}}}],["constructor(uuid",{"_index":599,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["container",{"_index":424,"title":{},"body":{"components/DashboardComponent.html":{}}}],["content",{"_index":169,"title":{},"body":{"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["contract",{"_index":958,"title":{},"body":{"index.html":{},"license.html":{}}}],["contributions",{"_index":891,"title":{},"body":{"index.html":{}}}],["control",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["copies",{"_index":926,"title":{},"body":{"index.html":{},"license.html":{}}}],["copy",{"_index":910,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":899,"title":{},"body":{"index.html":{},"license.html":{}}}],["correctly",{"_index":819,"title":{},"body":{"index.html":{}}}],["count",{"_index":479,"title":{},"body":{"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{}}}],["counter",{"_index":409,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{}}}],["coverage",{"_index":752,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current_used_parameters",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d",{"_index":295,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["damages",{"_index":954,"title":{},"body":{"index.html":{},"license.html":{}}}],["dashboard",{"_index":376,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard'},{'name",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["dashboard.component.css",{"_index":378,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.component.html",{"_index":380,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.service",{"_index":394,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard/dashboard.component",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["dashboard/dashboard.service",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["dashboardcomponent",{"_index":75,"title":{"components/DashboardComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["dashboardservice",{"_index":97,"title":{"injectables/DashboardService.html":{}},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataview",{"_index":326,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dataview(new",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataview.setint8(0",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataview.setuint32(0",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataview.setuint32(4",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deal",{"_index":914,"title":{},"body":{"index.html":{},"license.html":{}}}],["dealings",{"_index":963,"title":{},"body":{"index.html":{},"license.html":{}}}],["decimal",{"_index":470,"title":{},"body":{"injectables/DashboardService.html":{}}}],["declarations",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decoder",{"_index":467,"title":{},"body":{"injectables/DashboardService.html":{}}}],["decoder(value",{"_index":325,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{}}}],["decorators",{"_index":651,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["default",{"_index":246,"title":{},"body":{"components/BatteryLevelComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":161,"title":{},"body":{"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["demo",{"_index":402,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dependencies",{"_index":88,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":49,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/variables.html":{}}}],["detailedvalue",{"_index":973,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["details",{"_index":357,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["determinate",{"_index":259,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["dev.to",{"_index":888,"title":{},"body":{"index.html":{}}}],["developer",{"_index":854,"title":{},"body":{"index.html":{}}}],["device",{"_index":226,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["device.gatt",{"_index":561,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["device_id",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["device_information",{"_index":1034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["devicesubscription",{"_index":212,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["direction",{"_index":183,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["directions_walk",{"_index":710,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["directive",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["directives",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["disconnect",{"_index":218,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{}}}],["disconnect(callbackfn",{"_index":574,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["disconnect_request",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disconnectdevice",{"_index":309,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["disconnected",{"_index":290,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["disconnectsubject",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disconnectsubject.next",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["discover",{"_index":860,"title":{},"body":{"index.html":{}}}],["discovery",{"_index":499,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["display",{"_index":179,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["distribute",{"_index":922,"title":{},"body":{"index.html":{},"license.html":{}}}],["documentation",{"_index":753,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dom",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["dynamic",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["e2e/src/app.po.ts",{"_index":157,"title":{},"body":{"classes/AppPage.html":{},"coverage.html":{}}}],["e2e/src/app.po.ts:4",{"_index":165,"title":{},"body":{"classes/AppPage.html":{}}}],["e2e/src/app.po.ts:8",{"_index":162,"title":{},"body":{"classes/AppPage.html":{}}}],["easiest",{"_index":827,"title":{},"body":{"index.html":{}}}],["ef680200",{"_index":478,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["ef680201",{"_index":473,"title":{},"body":{"injectables/DashboardService.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["ef680203",{"_index":485,"title":{},"body":{"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"miscellaneous/variables.html":{}}}],["ef680400",{"_index":483,"title":{},"body":{"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{},"miscellaneous/variables.html":{}}}],["ef680405",{"_index":484,"title":{},"body":{"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{},"miscellaneous/variables.html":{}}}],["elem",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elem.randomvaluefn",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elem.serviceinstance",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elem.uuid",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["element(by.css('app",{"_index":168,"title":{},"body":{"classes/AppPage.html":{}}}],["elementref",{"_index":650,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["elsewhere",{"_index":853,"title":{},"body":{"index.html":{}}}],["emites",{"_index":857,"title":{},"body":{"index.html":{}}}],["emitted",{"_index":836,"title":{},"body":{"index.html":{}}}],["empty",{"_index":461,"title":{},"body":{"injectables/DashboardService.html":{}}}],["enable",{"_index":821,"title":{},"body":{"index.html":{}}}],["enabletracing",{"_index":12,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["environment",{"_index":781,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":238,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["error('your",{"_index":351,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["error(...args",{"_index":361,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["error(args",{"_index":370,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["event",{"_index":550,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{},"license.html":{}}}],["eventlistener",{"_index":539,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["example",{"_index":831,"title":{},"body":{"index.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["exports",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":941,"title":{},"body":{"index.html":{},"license.html":{}}}],["f000180a",{"_index":1035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000180f",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a19",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a23",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a24",{"_index":1043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a25",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a26",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a27",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a28",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a29",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a2a",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f0002a50",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa00",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa01",{"_index":1062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa02",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa03",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa10",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa11",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa12",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa13",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa20",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa21",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa22",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa23",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa30",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa31",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa32",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa33",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa40",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa41",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa42",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa44",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa50",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa51",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa52",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa53",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa64",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa65",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa66",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa70",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa71",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa72",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa73",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa80",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa81",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa82",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000aa83",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ac00",{"_index":1108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ac01",{"_index":1109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ac02",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ac03",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ccc0",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ccc1",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ccc2",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ccc3",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc0",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc1",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc2",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc3",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffc4",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffe0",{"_index":1104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f000ffe1",{"_index":1106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fake",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fake.utils",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["fakeblecore",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakebluetoothdevice",{"_index":523,"title":{"classes/FakeBluetoothDevice.html":{}},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{}}}],["fakebluetoothdevice('1",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakebluetoothremotegattcharacteristic",{"_index":578,"title":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{}},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakebluetoothremotegattserver",{"_index":556,"title":{"classes/FakeBluetoothRemoteGATTServer.html":{}},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{}}}],["fakebluetoothremotegattserver(fakedevice",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakebluetoothremotegattservice",{"_index":560,"title":{"classes/FakeBluetoothRemoteGATTService.html":{}},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"coverage.html":{}}}],["fakebluetoothremotegattservice(config[servicename].uuid",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakebrowserwebbluetooth",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakedevice",{"_index":773,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakedevice.addeventlistener('gattserverconnected",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakedevice.addeventlistener('gattserverdisconnected",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fakegattserver",{"_index":774,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakegattserver.connect",{"_index":1030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":557,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["few",{"_index":893,"title":{},"body":{"index.html":{}}}],["ff0000",{"_index":686,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["ffffff",{"_index":675,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["files",{"_index":913,"title":{},"body":{"index.html":{},"license.html":{}}}],["fillstyle",{"_index":674,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["filter",{"_index":464,"title":{},"body":{"injectables/DashboardService.html":{}}}],["filter(this.getservicepredicate(service",{"_index":489,"title":{},"body":{"injectables/DashboardService.html":{}}}],["filter(uuid",{"_index":570,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["firmware_rev",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fitness",{"_index":946,"title":{},"body":{"index.html":{},"license.html":{}}}],["flex",{"_index":180,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["following",{"_index":881,"title":{},"body":{"index.html":{},"license.html":{}}}],["font",{"_index":188,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["fontsize",{"_index":681,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["foreach(uuid",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroot",{"_index":750,"title":{},"body":{"modules/WebBluetoothModule.html":{}}}],["forroot(options",{"_index":43,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["found",{"_index":874,"title":{},"body":{"index.html":{}}}],["free",{"_index":855,"title":{},"body":{"index.html":{},"license.html":{}}}],["full",{"_index":886,"title":{},"body":{"index.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/AWBOptions.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["functions",{"_index":807,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":929,"title":{},"body":{"index.html":{},"license.html":{}}}],["gatt",{"_index":525,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["gatt_characteristic_battery_level",{"_index":845,"title":{},"body":{"index.html":{}}}],["gatt_primary_service",{"_index":846,"title":{},"body":{"index.html":{}}}],["gattserverconnected",{"_index":534,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["gattserverdisconnected",{"_index":535,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["gattservices",{"_index":775,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["generatefakevalues",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getcharacteristic",{"_index":624,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getcharacteristic(uuid",{"_index":581,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getcharacteristics",{"_index":625,"title":{},"body":{"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getcharacteristics(uuids",{"_index":583,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getdecoder",{"_index":439,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getdecoder(service",{"_index":447,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getdevice",{"_index":269,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{}}}],["getdevicestatus",{"_index":219,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["getprimaryservice",{"_index":613,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["getprimaryservice(uuid",{"_index":565,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getprimaryservices",{"_index":614,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["getprimaryservices(uuids",{"_index":567,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["getservicepredicate",{"_index":440,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getservicepredicate(service",{"_index":449,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getting",{"_index":809,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["gettitletext",{"_index":159,"title":{},"body":{"classes/AppPage.html":{}}}],["given",{"_index":837,"title":{},"body":{"index.html":{}}}],["granted",{"_index":906,"title":{},"body":{"index.html":{},"license.html":{}}}],["graph",{"_index":966,"title":{},"body":{"modules.html":{}}}],["grid",{"_index":423,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["gyroscope",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hardware_rev",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["haserror",{"_index":220,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["haserror(error",{"_index":235,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["height",{"_index":432,"title":{},"body":{"components/DashboardComponent.html":{}}}],["help",{"_index":896,"title":{},"body":{"index.html":{}}}],["here",{"_index":829,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":905,"title":{},"body":{"index.html":{},"license.html":{}}}],["holders",{"_index":951,"title":{},"body":{"index.html":{},"license.html":{}}}],["host",{"_index":178,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["html",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["http://caniuse.com/#search=bluetooth",{"_index":355,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["https://manekinekko.github.io/angular",{"_index":875,"title":{},"body":{"index.html":{}}}],["humidity",{"_index":410,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"miscellaneous/variables.html":{}}}],["humidity'},{'name",{"_index":78,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["humiditycomponent",{"_index":77,"title":{"components/HumidityComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["humiditycomponent.characteristicuuid",{"_index":666,"title":{},"body":{"components/HumidityComponent.html":{}}}],["humiditycomponent.serviceuuid",{"_index":665,"title":{},"body":{"components/HumidityComponent.html":{}}}],["icon",{"_index":201,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["id",{"_index":526,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["identifier",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["ieee11073",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image_block_request",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image_count",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image_notify",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image_status",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["img",{"_index":436,"title":{},"body":{"components/DashboardComponent.html":{}}}],["implements",{"_index":174,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["implied",{"_index":942,"title":{},"body":{"index.html":{},"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["imports",{"_index":39,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["included",{"_index":935,"title":{},"body":{"index.html":{},"license.html":{}}}],["including",{"_index":917,"title":{},"body":{"index.html":{},"license.html":{}}}],["indeterminate",{"_index":287,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/AWBOptions.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["initchart",{"_index":638,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["initialvalue",{"_index":587,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["injectable",{"_index":302,"title":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{}},"body":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":304,"title":{},"body":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"overview.html":{}}}],["injectiontoken",{"_index":19,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["injectiontoken('awboptions",{"_index":38,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["install",{"_index":812,"title":{},"body":{"index.html":{}}}],["installed",{"_index":818,"title":{},"body":{"index.html":{}}}],["instance",{"_index":702,"title":{},"body":{"injectables/ServerWebBluetooth.html":{}}}],["instances",{"_index":776,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["instances.foreach(({characteristicsinstances",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instances.reduce((acc",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer",{"_index":468,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AWBOptions.html":{},"interfaces/Logger.html":{}},"body":{"interfaces/AWBOptions.html":{},"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AWBOptions.html":{},"interfaces/Logger.html":{},"overview.html":{}}}],["interpolation",{"_index":673,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["io",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["issues",{"_index":895,"title":{},"body":{"index.html":{}}}],["it/conventional",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":181,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["key",{"_index":327,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["keypress",{"_index":1103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":940,"title":{},"body":{"index.html":{},"license.html":{}}}],["l",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["labels",{"_index":679,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["launched",{"_index":501,"title":{},"body":{"injectables/DashboardService.html":{}}}],["layoutmodule",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["left",{"_index":428,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["legend",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"overview.html":{}}}],["length",{"_index":670,"title":{},"body":{"components/HumidityComponent.html":{}}}],["level",{"_index":177,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["level'},{'name",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["level.component",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["level.component.ts",{"_index":173,"title":{},"body":{"components/BatteryLevelComponent.html":{},"coverage.html":{}}}],["level.component.ts:103",{"_index":244,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:109",{"_index":232,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:115",{"_index":237,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:119",{"_index":239,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:47",{"_index":263,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:48",{"_index":252,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:50",{"_index":267,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:51",{"_index":260,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:52",{"_index":254,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:53",{"_index":268,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:54",{"_index":265,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:55",{"_index":258,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:58",{"_index":270,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:60",{"_index":230,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:63",{"_index":256,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:64",{"_index":264,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:65",{"_index":255,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:67",{"_index":240,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:78",{"_index":234,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["level.component.ts:94",{"_index":241,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["liability",{"_index":955,"title":{},"body":{"index.html":{},"license.html":{}}}],["liable",{"_index":952,"title":{},"body":{"index.html":{},"license.html":{}}}],["license",{"_index":897,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["light",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limitation",{"_index":918,"title":{},"body":{"index.html":{},"license.html":{}}}],["limited",{"_index":943,"title":{},"body":{"index.html":{},"license.html":{}}}],["line",{"_index":331,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{}}}],["linewidth",{"_index":685,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["list",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["listener",{"_index":538,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["listener(mockedevent",{"_index":549,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["listeners",{"_index":527,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["literal",{"_index":616,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/StepCounterComponent.html":{},"miscellaneous/typealiases.html":{}}}],["log",{"_index":360,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["log(...args",{"_index":364,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["log(args",{"_index":369,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["logger",{"_index":368,"title":{"interfaces/Logger.html":{}},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"coverage.html":{}}}],["logger.service",{"_index":29,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["logic",{"_index":849,"title":{},"body":{"index.html":{}}}],["logs",{"_index":822,"title":{},"body":{"index.html":{}}}],["magnetometer",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":816,"title":{},"body":{"index.html":{}}}],["makemetokeninjector",{"_index":37,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["manekinekko/angular",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["manifacturer",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":321,"title":{},"body":{"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["map((dataview",{"_index":514,"title":{},"body":{"injectables/DashboardService.html":{}}}],["map((value",{"_index":838,"title":{},"body":{"index.html":{}}}],["map(({value",{"_index":490,"title":{},"body":{"injectables/DashboardService.html":{}}}],["map(conf",{"_index":397,"title":{},"body":{"components/DashboardComponent.html":{}}}],["map(this._config.decoder",{"_index":337,"title":{},"body":{"injectables/BleService.html":{}}}],["map(uuid",{"_index":572,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["margin",{"_index":416,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["mat",{"_index":200,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["matbuttonmodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["matcardmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["matching",{"_index":51,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matexpansionmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["matgridlistmodule",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["math.floor(math.random",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maticonmodule",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["matlistmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["matmenumodule",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["matprogressspinnermodule",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["matsnackbar",{"_index":229,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["matsnackbarmodule",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["mattoolbarmodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["max",{"_index":414,"title":{},"body":{"components/DashboardComponent.html":{},"components/HumidityComponent.html":{}}}],["merchantability",{"_index":945,"title":{},"body":{"index.html":{},"license.html":{}}}],["merge",{"_index":462,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{},"license.html":{}}}],["merge(...values",{"_index":516,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mergeall",{"_index":393,"title":{},"body":{"components/DashboardComponent.html":{}}}],["mergemap",{"_index":465,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["mergemap((characteristic",{"_index":870,"title":{},"body":{"index.html":{}}}],["mergemap((gatt",{"_index":504,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["mergemap((gattcharacteristic",{"_index":511,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mergemap((gattservice",{"_index":508,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mergemap((primaryservice",{"_index":865,"title":{},"body":{"index.html":{}}}],["mergemap(conf",{"_index":518,"title":{},"body":{"injectables/DashboardService.html":{}}}],["metadata",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["method",{"_index":835,"title":{},"body":{"index.html":{}}}],["methods",{"_index":158,"title":{},"body":{"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["min",{"_index":431,"title":{},"body":{"components/DashboardComponent.html":{}}}],["miscellaneous",{"_index":806,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":811,"title":{},"body":{"index.html":{}}}],["mit",{"_index":898,"title":{},"body":{"index.html":{},"license.html":{}}}],["mocked",{"_index":704,"title":{},"body":{"injectables/ServerWebBluetooth.html":{}}}],["mockedevent",{"_index":545,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["mode",{"_index":213,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["model",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model_number",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":920,"title":{},"body":{"index.html":{},"license.html":{}}}],["module",{"_index":85,"title":{"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":87,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"modules.html":{},"overview.html":{}}}],["modulewithproviders",{"_index":18,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["more",{"_index":356,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{}}}],["more_vert",{"_index":403,"title":{},"body":{"components/DashboardComponent.html":{}}}],["movement",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["navigateto",{"_index":160,"title":{},"body":{"classes/AppPage.html":{}}}],["navigator.bluetooth",{"_index":349,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["need",{"_index":876,"title":{},"body":{"index.html":{}}}],["new",{"_index":33,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"injectables/BrowserWebBluetooth.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":330,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{}}}],["ngmodule",{"_index":17,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":221,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["ngoninit",{"_index":222,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["node_modules",{"_index":820,"title":{},"body":{"index.html":{}}}],["nologgerservice",{"_index":28,"title":{"injectables/NoLoggerService.html":{}},"body":{"interfaces/AWBOptions.html":{},"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{}}}],["noninfringement",{"_index":949,"title":{},"body":{"index.html":{},"license.html":{}}}],["note",{"_index":815,"title":{},"body":{"index.html":{}}}],["notice",{"_index":933,"title":{},"body":{"index.html":{},"license.html":{}}}],["notifications",{"_index":841,"title":{},"body":{"index.html":{}}}],["notify",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["now",{"_index":706,"title":{},"body":{"injectables/ServerWebBluetooth.html":{}}}],["npm",{"_index":813,"title":{},"body":{"index.html":{}}}],["null",{"_index":266,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{}}}],["number",{"_index":243,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["oad",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":705,"title":{},"body":{"injectables/ServerWebBluetooth.html":{},"miscellaneous/variables.html":{}}}],["object.keys(characteristics).foreach(characteristicuuid",{"_index":579,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["object.keys(characteristicsinstances",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(config).map(servicename",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(this.characteristics",{"_index":584,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["object.keys(this.services",{"_index":569,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["object.keys(titag).map(key",{"_index":1032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtaining",{"_index":909,"title":{},"body":{"index.html":{},"license.html":{}}}],["ondestroy",{"_index":176,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["oninit",{"_index":175,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["open",{"_index":894,"title":{},"body":{"index.html":{}}}],["optional",{"_index":11,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{}}}],["optionalservices",{"_index":495,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["options",{"_index":35,"title":{},"body":{"interfaces/AWBOptions.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["options.enabletracing",{"_index":36,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["otherwise",{"_index":960,"title":{},"body":{"index.html":{},"license.html":{}}}],["out",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":968,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":785,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":412,"title":{},"body":{"components/DashboardComponent.html":{}}}],["parameters",{"_index":231,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":947,"title":{},"body":{"index.html":{},"license.html":{}}}],["period",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":904,"title":{},"body":{"index.html":{},"license.html":{}}}],["permit",{"_index":927,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":908,"title":{},"body":{"index.html":{},"license.html":{}}}],["persons",{"_index":928,"title":{},"body":{"index.html":{},"license.html":{}}}],["pipe",{"_index":341,"title":{},"body":{"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["pipe(catcherror(error",{"_index":507,"title":{},"body":{"injectables/DashboardService.html":{}}}],["platform/browser",{"_index":26,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["pnp_id",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":937,"title":{},"body":{"index.html":{},"license.html":{}}}],["position",{"_index":191,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["post",{"_index":884,"title":{},"body":{"index.html":{}}}],["pr",{"_index":890,"title":{},"body":{"index.html":{}}}],["primary",{"_index":253,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{}}}],["private",{"_index":306,"title":{},"body":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["process",{"_index":500,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["production",{"_index":1031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":878,"title":{},"body":{"index.html":{}}}],["projects/.../bluetooth.module.ts",{"_index":808,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../bluetooth.service.ts",{"_index":974,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../ti",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/manekinekko/angular",{"_index":6,"title":{},"body":{"interfaces/AWBOptions.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":164,"title":{},"body":{"classes/AppPage.html":{},"injectables/BrowserWebBluetooth.html":{}}}],["promise.resolve",{"_index":568,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["promise.resolve(fakedevice",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise.resolve(this",{"_index":564,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["promise.resolve(this.characteristics[uuid",{"_index":582,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["promise.resolve(this.services[uuid",{"_index":566,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["promise.resolve(this.value",{"_index":595,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["protractor",{"_index":166,"title":{},"body":{"classes/AppPage.html":{}}}],["provide",{"_index":45,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":938,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":328,"title":{},"body":{"injectables/BleService.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"index.html":{}}}],["providers",{"_index":44,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":210,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["publish",{"_index":921,"title":{},"body":{"index.html":{},"license.html":{}}}],["purpose",{"_index":948,"title":{},"body":{"index.html":{},"license.html":{}}}],["random",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomvaluefn",{"_index":588,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"miscellaneous/variables.html":{}}}],["read",{"_index":859,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":381,"title":{},"body":{"components/DashboardComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{}}}],["readvalue",{"_index":594,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["readvalueoptions",{"_index":975,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["release",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["request_new_parameters",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestdevice",{"_index":344,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"miscellaneous/variables.html":{}}}],["requestdevice(options",{"_index":346,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["requestdeviceoptions",{"_index":347,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":858,"title":{},"body":{"index.html":{}}}],["requestvalue",{"_index":223,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["reset",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["restriction",{"_index":916,"title":{},"body":{"index.html":{},"license.html":{}}}],["result",{"_index":50,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":52,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":32,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":163,"title":{},"body":{"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["rgba(119,119,119,0.18",{"_index":677,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["rgba(255,161,161,0.30",{"_index":687,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["right",{"_index":429,"title":{},"body":{"components/DashboardComponent.html":{},"index.html":{}}}],["rights",{"_index":919,"title":{},"body":{"index.html":{},"license.html":{}}}],["root",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"classes/AppPage.html":{},"injectables/BleService.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/DashboardService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"index.html":{}}}],["root'},{'name",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["row",{"_index":184,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["run",{"_index":880,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":271,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":322,"title":{},"body":{"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["s",{"_index":814,"title":{},"body":{"index.html":{}}}],["section",{"_index":411,"title":{},"body":{"components/DashboardComponent.html":{}}}],["see",{"_index":354,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["selector",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["sell",{"_index":925,"title":{},"body":{"index.html":{},"license.html":{}}}],["sensortag2.ts",{"_index":763,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["serial_number",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["series",{"_index":637,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["serverwebbluetooth",{"_index":700,"title":{"injectables/ServerWebBluetooth.html":{}},"body":{"injectables/ServerWebBluetooth.html":{},"coverage.html":{}}}],["serves",{"_index":879,"title":{},"body":{"index.html":{}}}],["service",{"_index":324,"title":{},"body":{"injectables/BleService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["service/component",{"_index":826,"title":{},"body":{"index.html":{}}}],["serviceinstance",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servicename",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serviceoptions",{"_index":314,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"miscellaneous/typealiases.html":{}}}],["services",{"_index":558,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["serviceuuid",{"_index":214,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["shall",{"_index":934,"title":{},"body":{"index.html":{},"license.html":{}}}],["size",{"_index":189,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["smart",{"_index":353,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["smoothie",{"_index":663,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"dependencies.html":{}}}],["smoothiechart",{"_index":648,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["snackbar",{"_index":215,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["software",{"_index":911,"title":{},"body":{"index.html":{},"license.html":{}}}],["software_rev",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/AppPage.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{}}}],["span",{"_index":187,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/StepCounterComponent.html":{}}}],["span')).gettext",{"_index":170,"title":{},"body":{"classes/AppPage.html":{}}}],["specific",{"_index":850,"title":{},"body":{"index.html":{}}}],["spinner",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["src/.../app.module.ts",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ble.service.ts",{"_index":976,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../dashboard.service.ts",{"_index":977,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../environment.prod.ts",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../fake.utils.ts",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/ble.service.ts",{"_index":305,"title":{},"body":{"injectables/BleService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/ble.service.ts:17",{"_index":312,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:19",{"_index":320,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:21",{"_index":315,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:25",{"_index":317,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:29",{"_index":318,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:35",{"_index":319,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/ble.service.ts:46",{"_index":316,"title":{},"body":{"injectables/BleService.html":{}}}],["src/app/dashboard/dashboard.component.ts",{"_index":375,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/dashboard.component.ts:13",{"_index":391,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:15",{"_index":392,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:17",{"_index":383,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:20",{"_index":389,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:21",{"_index":390,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:24",{"_index":387,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:26",{"_index":388,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:38",{"_index":384,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:43",{"_index":385,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:47",{"_index":386,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.service.ts",{"_index":438,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/dashboard/dashboard.service.ts:108",{"_index":457,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:116",{"_index":448,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:120",{"_index":450,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:126",{"_index":446,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:130",{"_index":452,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:18",{"_index":444,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:21",{"_index":458,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:22",{"_index":460,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:23",{"_index":459,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:63",{"_index":445,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:67",{"_index":454,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/dashboard/dashboard.service.ts:75",{"_index":455,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/fake.utils.ts",{"_index":772,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/thingy52/battery",{"_index":172,"title":{},"body":{"components/BatteryLevelComponent.html":{},"coverage.html":{}}}],["src/app/thingy52/humidity.component.ts",{"_index":632,"title":{},"body":{"components/HumidityComponent.html":{},"coverage.html":{}}}],["src/app/thingy52/humidity.component.ts:22",{"_index":657,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:23",{"_index":647,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:25",{"_index":656,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:26",{"_index":649,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:27",{"_index":660,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:28",{"_index":659,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:31",{"_index":653,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:33",{"_index":661,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:35",{"_index":639,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:38",{"_index":654,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:39",{"_index":658,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:41",{"_index":644,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:52",{"_index":642,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:62",{"_index":645,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:71",{"_index":646,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:77",{"_index":640,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:84",{"_index":641,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/humidity.component.ts:88",{"_index":643,"title":{},"body":{"components/HumidityComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts",{"_index":707,"title":{},"body":{"components/StepCounterComponent.html":{},"coverage.html":{}}}],["src/app/thingy52/stepcounter.component.ts:35",{"_index":720,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:36",{"_index":718,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:38",{"_index":724,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:39",{"_index":722,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:40",{"_index":723,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:42",{"_index":725,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:44",{"_index":711,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:47",{"_index":719,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:48",{"_index":721,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:50",{"_index":715,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:59",{"_index":716,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:68",{"_index":717,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:73",{"_index":712,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:78",{"_index":713,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/stepcounter.component.ts:82",{"_index":714,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["src/app/thingy52/temperature.component.ts",{"_index":729,"title":{},"body":{"components/TemperatureComponent.html":{},"coverage.html":{}}}],["src/app/thingy52/temperature.component.ts:22",{"_index":743,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:23",{"_index":738,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:25",{"_index":742,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:26",{"_index":739,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:27",{"_index":746,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:28",{"_index":745,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:31",{"_index":740,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:33",{"_index":747,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:35",{"_index":730,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:38",{"_index":741,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:39",{"_index":744,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:41",{"_index":735,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:52",{"_index":733,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:73",{"_index":736,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:82",{"_index":737,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:88",{"_index":731,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:95",{"_index":732,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/app/thingy52/temperature.component.ts:99",{"_index":734,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["src/environments/environment.prod.ts",{"_index":780,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":782,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["start().then",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["startblog",{"_index":883,"title":{},"body":{"index.html":{}}}],["started",{"_index":810,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starter",{"_index":877,"title":{},"body":{"index.html":{}}}],["state",{"_index":1105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":42,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"injectables/ServerWebBluetooth.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{}}}],["step",{"_index":408,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["stepcounter",{"_index":708,"title":{},"body":{"components/StepCounterComponent.html":{},"miscellaneous/variables.html":{}}}],["stepcounter'},{'name",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["stepcountercomponent",{"_index":79,"title":{"components/StepCounterComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["stepcountercomponent.characteristicuuid",{"_index":727,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["stepcountercomponent.serviceuuid",{"_index":726,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["sticky",{"_index":420,"title":{},"body":{"components/DashboardComponent.html":{}}}],["stop",{"_index":839,"title":{},"body":{"index.html":{}}}],["stream",{"_index":310,"title":{},"body":{"injectables/BleService.html":{},"index.html":{}}}],["streamsby",{"_index":441,"title":{},"body":{"injectables/DashboardService.html":{}}}],["streamsby(service",{"_index":453,"title":{},"body":{"injectables/DashboardService.html":{}}}],["streamsubscription",{"_index":216,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["string",{"_index":236,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["strokestyle",{"_index":676,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["styles",{"_index":171,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["styleurls",{"_index":377,"title":{},"body":{"components/DashboardComponent.html":{}}}],["subject",{"_index":930,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["sublicense",{"_index":923,"title":{},"body":{"index.html":{},"license.html":{}}}],["subscribe",{"_index":399,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["subscribe((value",{"_index":278,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["subscribe(device",{"_index":283,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["subscribed",{"_index":840,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":257,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["substantial",{"_index":936,"title":{},"body":{"index.html":{},"license.html":{}}}],["subtitle",{"_index":430,"title":{},"body":{"components/DashboardComponent.html":{}}}],["sup",{"_index":198,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["support",{"_index":352,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{},"modules.html":{}}}],["sure",{"_index":817,"title":{},"body":{"index.html":{}}}],["svg",{"_index":964,"title":{},"body":{"modules.html":{}}}],["system_id",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":784,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":783,"title":{},"body":{"coverage.html":{}}}],["takeuntil(disconnectsubject",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tap(_",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target",{"_index":546,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["temperature",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"miscellaneous/variables.html":{}}}],["temperaturecomponent",{"_index":81,"title":{"components/TemperatureComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"coverage.html":{},"overview.html":{}}}],["temperaturecomponent.characteristicuuid",{"_index":749,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["temperaturecomponent.serviceuuid",{"_index":748,"title":{},"body":{"components/TemperatureComponent.html":{}}}],["template",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["templateurl",{"_index":379,"title":{},"body":{"components/DashboardComponent.html":{}}}],["test",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text",{"_index":185,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["thingy52/battery",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["thingy52/humidity.component",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["thingy52/stepcounter.component",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["thingy52/temperature.component",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["this._config",{"_index":334,"title":{},"body":{"injectables/BleService.html":{}}}],["this._config.characteristic",{"_index":340,"title":{},"body":{"injectables/BleService.html":{}}}],["this._config.service",{"_index":339,"title":{},"body":{"injectables/BleService.html":{}}}],["this.ble",{"_index":338,"title":{},"body":{"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"index.html":{}}}],["this.ble.disconnectdevice",{"_index":342,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["this.ble.discover",{"_index":493,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.getcharacteristic$(gattservice",{"_index":510,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.getcharacteristic$(primaryservice",{"_index":866,"title":{},"body":{"index.html":{}}}],["this.ble.getdevice",{"_index":335,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["this.ble.getgatt",{"_index":503,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.getprimaryservice$(gatt",{"_index":506,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["this.ble.readvalue$(characteristic",{"_index":871,"title":{},"body":{"index.html":{}}}],["this.ble.readvalue$(gattcharacteristic",{"_index":513,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.requestdevice(options",{"_index":358,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["this.ble.streamdetailedvalues",{"_index":488,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.ble.streamvalues$().pipe",{"_index":336,"title":{},"body":{"injectables/BleService.html":{},"index.html":{}}}],["this.ble.streamvalues$().pipe(map((value",{"_index":847,"title":{},"body":{"index.html":{}}}],["this.characteristics[characteristicuuid].service",{"_index":580,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.characteristics[uuid",{"_index":585,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.chart",{"_index":671,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chart.addtimeseries(this.series",{"_index":684,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chart.start",{"_index":692,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chart.stop",{"_index":689,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chart.streamto(canvas",{"_index":688,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.chartref.nativeelement",{"_index":669,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.color",{"_index":284,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.config",{"_index":466,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.config.find(conf",{"_index":519,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.config.map(c",{"_index":496,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.connected",{"_index":562,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.console.log('[dashboardservice::values",{"_index":498,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.console.log('reading",{"_index":294,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.dashboardservice.device",{"_index":272,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.dashboardservice.streamsby",{"_index":275,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.dashboardservice.valuesby",{"_index":293,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.dashboardservice?.disconnectdevice",{"_index":296,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.device",{"_index":282,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.device.connect",{"_index":563,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.device.disconnect",{"_index":575,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.devicesubscription",{"_index":281,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.devicesubscription?.unsubscribe",{"_index":297,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.getdecoder(service",{"_index":491,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.getdevicestatus",{"_index":273,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.haserror(error",{"_index":280,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.haserror.bind(this",{"_index":291,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.id",{"_index":552,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.initchart",{"_index":664,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.initialvalue",{"_index":592,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners",{"_index":555,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners.characteristicvaluechanged.foreach(listener",{"_index":597,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners.gattserverconnected.foreach(listener",{"_index":548,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners.gattserverdisconnected.foreach(listener",{"_index":551,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.listeners[type",{"_index":544,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.mode",{"_index":286,"title":{},"body":{"components/BatteryLevelComponent.html":{}}}],["this.name",{"_index":554,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.properties",{"_index":591,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.randomvaluefn",{"_index":593,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.series",{"_index":667,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.series.append(date.now",{"_index":691,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.series.clear",{"_index":693,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.service.device",{"_index":395,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.service.disconnectdevice",{"_index":400,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.service.values",{"_index":396,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.services[uuid",{"_index":573,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.snackbar.open(error",{"_index":299,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.streamsubscription",{"_index":274,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.streamsubscription?.unsubscribe",{"_index":301,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.updatevalue(value",{"_index":279,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.uuid",{"_index":590,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["this.value",{"_index":288,"title":{},"body":{"components/BatteryLevelComponent.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/StepCounterComponent.html":{}}}],["this.values",{"_index":517,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.valuessubscription",{"_index":292,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["this.valuessubscription?.unsubscribe",{"_index":298,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["throw",{"_index":350,"title":{},"body":{"injectables/BrowserWebBluetooth.html":{}}}],["ti_sensorag_services",{"_index":764,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":481,"title":{},"body":{"injectables/DashboardService.html":{},"components/StepCounterComponent.html":{}}}],["timer(0",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeseries",{"_index":655,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["titag",{"_index":765,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["titag[key].service",{"_index":1033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toolbar.mat",{"_index":419,"title":{},"body":{"components/DashboardComponent.html":{}}}],["tooltip",{"_index":683,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["top",{"_index":193,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["tort",{"_index":959,"title":{},"body":{"index.html":{},"license.html":{}}}],["tree",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["trigger",{"_index":861,"title":{},"body":{"index.html":{}}}],["true",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":329,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"components/HumidityComponent.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/AWBOptions.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":971,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/web",{"_index":798,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["undefined",{"_index":553,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["unknown",{"_index":547,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"miscellaneous/variables.html":{}}}],["updatevalue",{"_index":224,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["updatevalue(value",{"_index":242,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["use",{"_index":825,"title":{},"body":{"index.html":{},"license.html":{}}}],["usefactory",{"_index":46,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"miscellaneous/variables.html":{}}}],["usevalue",{"_index":47,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/WebBluetoothModule.html":{}}}],["using",{"_index":832,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":559,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"miscellaneous/variables.html":{}}}],["uuids",{"_index":623,"title":{},"body":{"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["uuids.includes(uuid",{"_index":571,"title":{},"body":{"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{}}}],["value",{"_index":205,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{},"modules/WebBluetoothModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value.count",{"_index":728,"title":{},"body":{"components/StepCounterComponent.html":{}}}],["value.getint8(0",{"_index":469,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["value.getuint32(0",{"_index":480,"title":{},"body":{"injectables/DashboardService.html":{}}}],["value.getuint32(4",{"_index":482,"title":{},"body":{"injectables/DashboardService.html":{}}}],["value.getuint8(0",{"_index":848,"title":{},"body":{"index.html":{}}}],["value.getuint8(1",{"_index":471,"title":{},"body":{"injectables/DashboardService.html":{}}}],["values",{"_index":442,"title":{},"body":{"injectables/DashboardService.html":{},"index.html":{}}}],["valuesby",{"_index":443,"title":{},"body":{"injectables/DashboardService.html":{}}}],["valuesby(service",{"_index":456,"title":{},"body":{"injectables/DashboardService.html":{}}}],["valuessubscription",{"_index":217,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["var",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/HumidityComponent.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["variable",{"_index":332,"title":{},"body":{"injectables/BleService.html":{},"injectables/DashboardService.html":{},"coverage.html":{}}}],["variables",{"_index":978,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["viewchild",{"_index":662,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["viewchild('chart",{"_index":652,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["void",{"_index":233,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"components/HumidityComponent.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"components/StepCounterComponent.html":{},"components/TemperatureComponent.html":{}}}],["want",{"_index":856,"title":{},"body":{"index.html":{}}}],["warn",{"_index":285,"title":{},"body":{"components/BatteryLevelComponent.html":{},"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["warn(...args",{"_index":366,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["warn(args",{"_index":371,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{}}}],["warranties",{"_index":944,"title":{},"body":{"index.html":{},"license.html":{}}}],["warranty",{"_index":939,"title":{},"body":{"index.html":{},"license.html":{}}}],["wassim",{"_index":902,"title":{},"body":{"index.html":{},"license.html":{}}}],["way",{"_index":828,"title":{},"body":{"index.html":{}}}],["weather",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web",{"_index":7,"title":{},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"components/BatteryLevelComponent.html":{},"injectables/BleService.html":{},"injectables/BrowserWebBluetooth.html":{},"injectables/ConsoleLoggerService.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"classes/FakeBluetoothDevice.html":{},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{},"classes/FakeBluetoothRemoteGATTService.html":{},"interfaces/Logger.html":{},"injectables/NoLoggerService.html":{},"injectables/ServerWebBluetooth.html":{},"modules/WebBluetoothModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["webbluetoothmodule",{"_index":41,"title":{"modules/WebBluetoothModule.html":{}},"body":{"interfaces/AWBOptions.html":{},"modules/AppModule.html":{},"modules/WebBluetoothModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["webbluetoothmodule.forroot",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":892,"title":{},"body":{"index.html":{}}}],["whether",{"_index":956,"title":{},"body":{"index.html":{},"license.html":{}}}],["width",{"_index":195,"title":{},"body":{"components/BatteryLevelComponent.html":{},"components/DashboardComponent.html":{},"components/StepCounterComponent.html":{}}}],["window.smoothiechart",{"_index":672,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["window.timeseries",{"_index":668,"title":{},"body":{"components/HumidityComponent.html":{},"components/TemperatureComponent.html":{}}}],["without",{"_index":915,"title":{},"body":{"index.html":{},"license.html":{}}}],["yes",{"_index":601,"title":{},"body":{"classes/FakeBluetoothRemoteGATTCharacteristic.html":{},"classes/FakeBluetoothRemoteGATTServer.html":{}}}],["z",{"_index":421,"title":{},"body":{"components/DashboardComponent.html":{}}}],["zone.js",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AWBOptions.html":{"url":"interfaces/AWBOptions.html","title":"interface - AWBOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AWBOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        enableTracing\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableTracing\n                                    \n                                \n                                \n                                    \n                                        enableTracing:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgModule, ModuleWithProviders, InjectionToken, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BluetoothCore } from './bluetooth.service';\nimport { BrowserWebBluetooth } from './platform/browser';\n\nimport { ConsoleLoggerService, NoLoggerService } from './logger.service';\n\nexport interface AWBOptions {\n  enableTracing?: boolean;\n}\n\nexport function browserWebBluetooth() {\n  return new BrowserWebBluetooth();\n}\n\nexport function consoleLoggerServiceConfig(options: AWBOptions) {\n  if (options && options.enableTracing) {\n    return new ConsoleLoggerService();\n  } else {\n    return new NoLoggerService();\n  }\n}\nexport function makeMeTokenInjector() {\n  return new InjectionToken('AWBOptions');\n}\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class WebBluetoothModule {\n  static forRoot(options: AWBOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: WebBluetoothModule,\n      providers: [\n        BluetoothCore,\n        {\n          provide: BrowserWebBluetooth,\n          useFactory: browserWebBluetooth\n        },\n        {\n          provide: makeMeTokenInjector,\n          useValue: options\n        },\n        {\n          provide: ConsoleLoggerService,\n          useFactory: consoleLoggerServiceConfig,\n          deps: [makeMeTokenInjector]\n        }\n      ]\n    };\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-root\n            \n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ble-root',\n  template: `\n   \n  `\n})\nexport class AppComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nBatteryLevelComponent\n\nBatteryLevelComponent\n\nAppModule -->\n\nBatteryLevelComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nHumidityComponent\n\nHumidityComponent\n\nAppModule -->\n\nHumidityComponent->AppModule\n\n\n\n\n\nStepCounterComponent\n\nStepCounterComponent\n\nAppModule -->\n\nStepCounterComponent->AppModule\n\n\n\n\n\nTemperatureComponent\n\nTemperatureComponent\n\nAppModule -->\n\nTemperatureComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nWebBluetoothModule\n\nWebBluetoothModule\n\nAppModule -->\n\nWebBluetoothModule->AppModule\n\n\n\n\n\nDashboardService\n\nDashboardService\n\nAppModule -->\n\nDashboardService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            BatteryLevelComponent\n                        \n                        \n                            DashboardComponent\n                        \n                        \n                            HumidityComponent\n                        \n                        \n                            StepCounterComponent\n                        \n                        \n                            TemperatureComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            DashboardService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            WebBluetoothModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { LayoutModule } from '@angular/cdk/layout';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {\n  BluetoothCore,\n  BrowserWebBluetooth,\n  ConsoleLoggerService,\n  WebBluetoothModule\n} from '@manekinekko/angular-web-bluetooth';\nimport { AppComponent } from './app.component';\nimport { DashboardService } from './dashboard/dashboard.service';\nimport { BatteryLevelComponent } from './thingy52/battery-level.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HumidityComponent } from './thingy52/humidity.component';\nimport { StepCounterComponent } from './thingy52/stepcounter.component';\nimport { TemperatureComponent } from './thingy52/temperature.component';\nimport { fakeBrowserWebBluetooth, start } from './fake.utils';\n\nconst bleCore = (b: BrowserWebBluetooth, l: ConsoleLoggerService) => new BluetoothCore(b, l);\nconst fakeBleCore = (b: BrowserWebBluetooth, l: ConsoleLoggerService) => {\n  start().then();\n  return new BluetoothCore(fakeBrowserWebBluetooth as BrowserWebBluetooth, l);\n};\n\nconst PROVIDERS = [\n  {\n    provide: BluetoothCore,\n    useFactory: bleCore, // bleCore or fakeBleCore\n    deps: [BrowserWebBluetooth, ConsoleLoggerService]\n  },\n  DashboardService\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BatteryLevelComponent,\n    TemperatureComponent,\n    HumidityComponent,\n    StepCounterComponent,\n    DashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    WebBluetoothModule.forRoot({\n      enableTracing: true\n    }),\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatListModule,\n    MatExpansionModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule\n  ],\n  providers: PROVIDERS,\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppPage.html":{"url":"classes/AppPage.html","title":"class - AppPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            e2e/src/app.po.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTitleText\n                            \n                            \n                                navigateTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTitleText\n                        \n                        \n                    \n                \n            \n            \n                \ngetTitleText()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateTo\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateTo()\n                \n            \n\n\n            \n                \n                    Defined in e2e/src/app.po.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise {\n    return browser.get(browser.baseUrl) as Promise;\n  }\n\n  getTitleText(): Promise {\n    return element(by.css('app-root .content span')).getText() as Promise;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BatteryLevelComponent.html":{"url":"components/BatteryLevelComponent.html","title":"component - BatteryLevelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BatteryLevelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/thingy52/battery-level.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-battery-level\n            \n\n\n            \n                styles\n                \n  :host {\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    text-align: center;\n  }\n  span {\n    font-size: 3em;\n    position: absolute;\n    top: 111px;\n    width: 100px;\n    display: block;\n    text-align: center;\n  }\n  sup {\n    font-size: 24px;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 80px;\n    font-size: 38px;\n  }\n  \n            \n\n            \n                template\n                {{ value || \"000\" }}%\n\n\nbattery_charging_full\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                characteristicUUID\n                            \n                            \n                                color\n                            \n                            \n                                    Public\n                                console\n                            \n                            \n                                    Public\n                                dashboardService\n                            \n                            \n                                deviceSubscription\n                            \n                            \n                                mode\n                            \n                            \n                                    Static\n                                serviceUUID\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                streamSubscription\n                            \n                            \n                                value\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                getDeviceStatus\n                            \n                            \n                                hasError\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService, snackBar: MatSnackBar, console: ConsoleLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/thingy52/battery-level.component.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        console\n                                                  \n                                                        \n                                                                        ConsoleLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDeviceStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetDeviceStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateValue\n                        \n                        \n                    \n                \n            \n            \n                \nupdateValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/battery-level.component.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            characteristicUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                    \n                        \n                            Default value : '00002a19-0000-1000-8000-00805f9b34fb'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'primary'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            console\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsoleLoggerService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dashboardService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deviceSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'determinate'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            serviceUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothServiceUUID\n\n                        \n                    \n                    \n                        \n                            Default value : '0000180f-0000-1000-8000-00805f9b34fb'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            streamSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/battery-level.component.ts:53\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/thingy52/battery-level.component.ts:58\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ConsoleLoggerService } from '@manekinekko/angular-web-bluetooth';\nimport { Subscription } from 'rxjs';\nimport { DashboardService } from '../dashboard/dashboard.service';\n\n\n@Component({\n  selector: 'ble-battery-level',\n  template: `\n    {{ value || \"000\" }}%\n    \n    \n    battery_charging_full\n  `,\n  styles: [`\n  :host {\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    text-align: center;\n  }\n  span {\n    font-size: 3em;\n    position: absolute;\n    top: 111px;\n    width: 100px;\n    display: block;\n    text-align: center;\n  }\n  sup {\n    font-size: 24px;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 80px;\n    font-size: 38px;\n  }\n  `],\n})\nexport class BatteryLevelComponent implements OnInit, OnDestroy {\n  static serviceUUID: BluetoothServiceUUID = '0000180f-0000-1000-8000-00805f9b34fb';\n  static characteristicUUID: BluetoothCharacteristicUUID = '00002a19-0000-1000-8000-00805f9b34fb';\n\n  value = null;\n  mode = 'determinate';\n  color = 'primary';\n  valuesSubscription: Subscription;\n  streamSubscription: Subscription;\n  deviceSubscription: Subscription;\n\n\n  get device() {\n    return this.dashboardService.device();\n  }\n\n  constructor(\n    public dashboardService: DashboardService,\n    public snackBar: MatSnackBar,\n    public console: ConsoleLoggerService) {}\n\n  ngOnInit() {\n    this.getDeviceStatus();\n\n    this.streamSubscription = this.dashboardService.streamsBy(\n      BatteryLevelComponent.serviceUUID,\n      BatteryLevelComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  getDeviceStatus() {\n    this.deviceSubscription = this.device\n      .subscribe(device => {\n        if (device) {\n          this.color = 'warn';\n          this.mode = 'indeterminate';\n          this.value = null;\n        } else {\n          // device not connected or disconnected\n          this.value = null;\n          this.mode = 'determinate';\n          this.color = 'primary';\n        }\n      }, this.hasError.bind(this));\n  }\n\n  requestValue() {\n    this.valuesSubscription = this.dashboardService.valuesBy(\n      BatteryLevelComponent.serviceUUID,\n      BatteryLevelComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  updateValue(value: number) {\n    this.console.log('Reading battery level %d', value);\n    this.value = value;\n    this.mode = 'determinate';\n  }\n\n  disconnect() {\n    this.dashboardService?.disconnectDevice();\n    this.deviceSubscription?.unsubscribe();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n    this.deviceSubscription?.unsubscribe();\n    this.streamSubscription?.unsubscribe();\n  }\n}\n\n\n\n    \n\n\n    \n            \n  :host {\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    text-align: center;\n  }\n  span {\n    font-size: 3em;\n    position: absolute;\n    top: 111px;\n    width: 100px;\n    display: block;\n    text-align: center;\n  }\n  sup {\n    font-size: 24px;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 80px;\n    font-size: 38px;\n  }\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ value || \"000\" }}%battery_charging_full'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BatteryLevelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BleService.html":{"url":"injectables/BleService.html","title":"injectable - BleService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/ble.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _config\n                            \n                            \n                                    Public\n                                ble\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                config\n                            \n                            \n                                disconnectDevice\n                            \n                            \n                                getDevice\n                            \n                            \n                                stream\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ble: BluetoothCore)\n                    \n                \n                        \n                            \n                                Defined in src/app/ble.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ble\n                                                  \n                                                        \n                                                                        BluetoothCore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig(options: ServiceOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ServiceOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnectDevice\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnectDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDevice\n                        \n                        \n                    \n                \n            \n            \n                \ngetDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stream\n                        \n                        \n                    \n                \n            \n            \n                \nstream()\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            value\n                        \n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/ble.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ServiceOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/ble.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ble\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BluetoothCore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/ble.service.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BluetoothCore } from '@manekinekko/angular-web-bluetooth';\nimport { map } from 'rxjs/operators';\n\ntype ServiceOptions = {\n    characteristic: string;\n    service: string,\n    decoder(value: DataView): number | {[key: string]: number}\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BleService {\n\n    // tslint:disable-next-line: variable-name\n    private _config: ServiceOptions;\n\n  constructor(public ble: BluetoothCore) {}\n\n  config(options: ServiceOptions) {\n    this._config = options;\n  }\n\n  getDevice() {\n    return this.ble.getDevice$();\n  }\n\n  stream() {\n    return this.ble.streamValues$().pipe(\n      map(this._config.decoder)\n    );\n  }\n\n  value() {\n    return this.ble\n      .value$({\n        service: this._config.service,\n        characteristic: this._config.characteristic\n      })\n      .pipe(\n        map(this._config.decoder)\n      );\n  }\n\n  disconnectDevice() {\n    this.ble.disconnectDevice();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BrowserWebBluetooth.html":{"url":"injectables/BrowserWebBluetooth.html","title":"injectable - BrowserWebBluetooth","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BrowserWebBluetooth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                ble\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                requestDevice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestDevice\n                        \n                        \n                    \n                \n            \n            \n                \nrequestDevice(options: RequestDeviceOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            RequestDeviceOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ble\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts:5\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class BrowserWebBluetooth {\n  private ble;\n\n  constructor() {\n    this.ble = navigator.bluetooth;\n    if (!this.ble) {\n      throw new Error('Your browser does not support Smart Bluetooth. See http://caniuse.com/#search=Bluetooth for more details.');\n    }\n  }\n\n  requestDevice(options: RequestDeviceOptions): Promise {\n    return this.ble.requestDevice(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsoleLoggerService.html":{"url":"injectables/ConsoleLoggerService.html","title":"injectable - ConsoleLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConsoleLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            error\n                        \n                        \n                    \n                \n            \n            \n                \nerror(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            log\n                        \n                        \n                    \n                \n            \n            \n                \nlog(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \nwarn(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Logger {\n  log(args: string[]): void;\n  error(args: string[]): void;\n  warn(args: string[]): void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConsoleLoggerService implements Logger {\n  log(...args) {\n    console.log.apply(console, args);\n  }\n  error(...args) {\n    console.error.apply(console, args);\n  }\n  warn(...args) {\n    console.warn.apply(console, args);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoLoggerService implements Logger {\n  log(...args) {}\n  error(...args) {}\n  warn(...args) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DashboardComponent.html":{"url":"components/DashboardComponent.html","title":"component - DashboardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/dashboard.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-dashboard\n            \n\n            \n                styleUrls\n                ./dashboard.component.css\n            \n\n\n\n            \n                templateUrl\n                ./dashboard.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                service\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                hasError\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: DashboardService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/dashboard.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            service\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.component.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dashboard/dashboard.component.ts:15\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\nimport { map, mergeAll } from 'rxjs/operators';\nimport { DashboardService } from './dashboard.service';\n\n@Component({\n  selector: 'ble-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnDestroy, OnInit {\n  valuesSubscription: Subscription;\n\n  get device() {\n    return this.service.device();\n  }\n\n  constructor(\n    public readonly service: DashboardService,\n    public snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit() {}\n\n  requestValue() {\n    this.valuesSubscription = this.service.values()\n      .pipe(\n        map(conf => conf.value),\n        mergeAll(),\n      )\n      .subscribe(\n      () => null,\n      error => this.hasError(error)\n    );\n  }\n\n  disconnect() {\n    this.service.disconnectDevice();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n  }\n}\n\n    \n\n    \n        \n  \n  Angular Web BLE Demo\n  \n    more_vert\n  \n  \n    \n      bluetooth_searching\n      Connect\n    \n    \n      bluetooth_disabled\n      Disconnect\n    \n  \n\n\n\n  \n\n    \n\n    \n      \n        \n          \n            Battery Level\n            \n              more_vert\n            \n            \n              \n                bluetooth_searching\n                Connect\n              \n              \n                bluetooth_disabled\n                Disconnect\n              \n            \n          \n          \n            {{ connectedDevice.name }}\n          \n        \n        \n          \n        \n      \n    \n\n    \n\n    \n      \n        \n          \n            Step Counter\n            \n              more_vert\n            \n            \n              \n                bluetooth_searching\n                Connect\n              \n              \n                bluetooth_disabled\n                Disconnect\n              \n            \n          \n          \n            {{ connectedDevice.name }}\n          \n        \n        \n          \n        \n      \n    \n\n    \n\n    \n      \n        \n          \n            Humidity Level\n            \n              more_vert\n            \n            \n              \n                bluetooth_searching\n                Connect\n              \n              \n                bluetooth_disabled\n                Disconnect\n              \n            \n          \n          \n            {{ connectedDevice.name }}\n          \n        \n        \n          \n        \n      \n    \n\n    \n\n    \n      \n        \n          \n            Temperature\n            \n              more_vert\n            \n            \n              \n                bluetooth_searching\n                Connect\n              \n              \n                bluetooth_disabled\n                Disconnect\n              \n            \n          \n          \n            {{ connectedDevice.name }}\n          \n        \n        \n          \n        \n      \n    \n\n  \n\n\n    \n\n    \n                \n                    ./dashboard.component.css\n                \n                section {\n  padding: 40px;\n  max-width: 700px;\n  margin: 0 auto;\n}\n\n.mat-toolbar.mat-primary {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.grid-container {\n  margin: 20px;\n}\n\n.dashboard-card {\n  position: absolute;\n  top: 15px;\n  left: 15px;\n  right: 15px;\n  bottom: 15px;\n}\n\n.mat-card-subtitle {\n  min-height: 20px;\n}\n\n.more-button {\n  position: absolute;\n  top: 5px;\n  right: 10px;\n}\n\n.dashboard-card-content {\n  text-align: center;\n}\n\n\nimg {\n  width: 32px;\n  margin: 0 10px;\n}\n\n.mat-icon {\n  margin: 0 10px 0 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Angular Web BLE Demo      more_vert              bluetooth_searching      Connect              bluetooth_disabled      Disconnect                                                    Battery Level                          more_vert                                                      bluetooth_searching                Connect                                            bluetooth_disabled                Disconnect                                                          {{ connectedDevice.name }}                                                                                                  Step Counter                          more_vert                                                      bluetooth_searching                Connect                                            bluetooth_disabled                Disconnect                                                          {{ connectedDevice.name }}                                                                                                  Humidity Level                          more_vert                                                      bluetooth_searching                Connect                                            bluetooth_disabled                Disconnect                                                          {{ connectedDevice.name }}                                                                                                  Temperature                          more_vert                                                      bluetooth_searching                Connect                                            bluetooth_disabled                Disconnect                                                          {{ connectedDevice.name }}                                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DashboardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardService.html":{"url":"injectables/DashboardService.html","title":"injectable - DashboardService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DashboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dashboard/dashboard.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ble\n                            \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Public\n                                console\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                device\n                            \n                            \n                                disconnectDevice\n                            \n                            \n                                getDecoder\n                            \n                            \n                                getServicePredicate\n                            \n                            \n                                hasError\n                            \n                            \n                                streamsBy\n                            \n                            \n                                values\n                            \n                            \n                                valuesBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ble: BluetoothCore, snackBar: MatSnackBar, console: ConsoleLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/dashboard.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ble\n                                                  \n                                                        \n                                                                        BluetoothCore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        console\n                                                  \n                                                        \n                                                                        ConsoleLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            device\n                        \n                        \n                    \n                \n            \n            \n                \ndevice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnectDevice\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnectDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDecoder\n                        \n                        \n                    \n                \n            \n            \n                \ngetDecoder(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    characteristic\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getServicePredicate\n                        \n                        \n                    \n                \n            \n            \n                \ngetServicePredicate(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    characteristic\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     (conf: any) => boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            streamsBy\n                        \n                        \n                    \n                \n            \n            \n                \nstreamsBy(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    characteristic\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            values\n                        \n                        \n                    \n                \n            \n            \n                \nvalues()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            valuesBy\n                        \n                        \n                    \n                \n            \n            \n                \nvaluesBy(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    service\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    characteristic\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ble\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BluetoothCore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.service.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ServiceOptions[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.service.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            console\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ConsoleLoggerService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.service.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/dashboard.service.ts:22\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { EMPTY, empty, merge, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap } from 'rxjs/operators';\nimport { BluetoothCore, ConsoleLoggerService } from '@manekinekko/angular-web-bluetooth';\n\ntype ServiceOptions = {\n  characteristic: string;\n  service: string;\n  decoder(value: DataView): number | { [key: string]: number };\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n  // tslint:disable-next-line: variable-name\n  private config: ServiceOptions[];\n\n  constructor(\n    public ble: BluetoothCore,\n    public snackBar: MatSnackBar,\n    public console: ConsoleLoggerService) {\n    this.config = [\n      // temperature\n      {\n        decoder: (value: DataView) => {\n          const integer = value.getInt8(0);\n          const decimal = value.getUint8(1);\n          return integer + decimal / 100;\n        },\n        characteristic: 'ef680201-9b35-4933-9b10-52ffa9740042',\n        service: 'ef680200-9b35-4933-9b10-52ffa9740042'\n      },\n      // step counter\n      {\n        decoder: (value: DataView) => {\n          const count = value.getUint32(0, true);\n          const time = value.getUint32(4, true);\n          return {\n            count,\n            time\n          };\n        },\n        service: 'ef680400-9b35-4933-9b10-52ffa9740042',\n        characteristic: 'ef680405-9b35-4933-9b10-52ffa9740042'\n      },\n      // humidity\n      {\n        decoder: (value: DataView) => value.getInt8(0),\n        service: 'ef680200-9b35-4933-9b10-52ffa9740042',\n        characteristic: 'ef680203-9b35-4933-9b10-52ffa9740042'\n      },\n      // battery level\n      {\n        decoder: (value: DataView) => value.getInt8(0),\n        service: '0000180f-0000-1000-8000-00805f9b34fb', // battery_service\n        characteristic: '00002a19-0000-1000-8000-00805f9b34fb' // battery_level\n      }\n    ];\n  }\n\n  device() {\n    return this.ble.getDevice$();\n  }\n\n  streamsBy(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID) {\n    return this.ble.streamDetailedValues$()\n        .pipe(\n            filter(this.getServicePredicate(service, characteristic)),\n            map(({value}) => this.getDecoder(service, characteristic)(value)),\n        );\n  }\n\n  values() {\n    this.ble.discover$({\n      acceptAllDevices: true,\n      optionalServices: this.config.map(c => c.service)\n    }).subscribe(() => {\n      this.console.log('[DashboardService::Values] Discovery process launched');\n    });\n\n    const values = this.config.map(c => {\n      return of({\n        service: c.service,\n        characteristic: c.characteristic,\n        value: this.ble.getGATT$()\n          .pipe(\n            mergeMap((gatt: BluetoothRemoteGATTServer) => this.ble.getPrimaryService$(gatt, c.service)\n              .pipe(catchError(error => {\n                this.hasError(error);\n                return EMPTY;\n              }))),\n            mergeMap((gattService: BluetoothRemoteGATTService) => this.ble.getCharacteristic$(gattService, c.characteristic)\n              .pipe(catchError(error => {\n                this.hasError(error);\n                return EMPTY;\n              }))),\n            mergeMap((gattCharacteristic: BluetoothRemoteGATTCharacteristic) => this.ble.readValue$(gattCharacteristic)),\n            map((dataView: DataView) => c.decoder(dataView)),\n          )\n      });\n    });\n\n    return merge(...values);\n  }\n\n  valuesBy(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID) {\n    return this.values()\n      .pipe(\n        filter(this.getServicePredicate(service, characteristic)),\n        mergeMap(conf => conf.value),\n      );\n  }\n\n  getDecoder(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID) {\n    return this.config.find(conf => conf.service === service && conf.characteristic === characteristic)?.decoder;\n  }\n\n  getServicePredicate(service: BluetoothServiceUUID, characteristic: BluetoothCharacteristicUUID) {\n    return (conf) => {\n      return conf.service === service && conf.characteristic === characteristic;\n    };\n  }\n\n  disconnectDevice() {\n    this.ble.disconnectDevice();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FakeBluetoothDevice.html":{"url":"classes/FakeBluetoothDevice.html","title":"class - FakeBluetoothDevice","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FakeBluetoothDevice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gatt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Private\n                                listeners\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEventListener\n                            \n                            \n                                clear\n                            \n                            \n                                connect\n                            \n                            \n                                disconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, name: string)\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gatt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothRemoteGATTServer\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            listeners\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  }\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addEventListener\n                        \n                        \n                    \n                \n            \n            \n                \naddEventListener(type: string, listener: EventListener)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                            EventListener\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            connect\n                        \n                        \n                    \n                \n            \n            \n                \nconnect()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class FakeBluetoothDevice {\n  gatt: BluetoothRemoteGATTServer;\n  private listeners: {\n    [key in 'gattserverconnected' | 'gattserverdisconnected']: EventListener[]\n  } = {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  };\n\n  constructor(public id: string, public name: string) {\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  connect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  disconnect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  clear() {\n    this.id = undefined;\n    this.name = undefined;\n    this.listeners = {\n      gattserverconnected: [],\n      gattserverdisconnected: []\n    };\n  }\n}\n\nexport class FakeBluetoothRemoteGATTServer {\n  connected = false;\n\n  constructor(public device, public services: { [uuid: string]: FakeBluetoothRemoteGATTService } = {}) {\n    device.gatt = this;\n  }\n\n  connect() {\n    this.connected = true;\n    this.device.connect();\n    return Promise.resolve(this);\n  }\n\n  getPrimaryService(uuid: BluetoothServiceUUID) {\n    return Promise.resolve(this.services[uuid]);\n  }\n\n  getPrimaryServices(uuids: BluetoothServiceUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.services)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.services[uuid])\n    );\n  }\n\n  disconnect(callbackFn?: () => void) {\n    this.device.disconnect();\n    this.connected = false;\n    if (callbackFn) {\n      callbackFn();\n    }\n  }\n}\n\nexport class FakeBluetoothRemoteGATTService {\n  constructor(\n    public uuid,\n    public device,\n    public characteristics: {[uuid: string]: FakeBluetoothRemoteGATTCharacteristic}) {\n    Object.keys(characteristics).forEach(characteristicUuid => this.characteristics[characteristicUuid].service = this);\n  }\n\n  getCharacteristic(uuid: BluetoothCharacteristicUUID) {\n    return Promise.resolve(this.characteristics[uuid]);\n  }\n\n  getCharacteristics(uuids: BluetoothCharacteristicUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.characteristics)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.characteristics[uuid])\n    );\n  }\n}\n\nexport class FakeBluetoothRemoteGATTCharacteristic {\n  uuid: BluetoothCharacteristicUUID;\n  service: FakeBluetoothRemoteGATTService;\n  value: DataView;\n  properties: BluetoothCharacteristicProperties;\n  private readonly initialValue: DataView;\n  readonly randomValueFn: () => DataView;\n  private listeners: {\n    [key in 'characteristicvaluechanged']: EventListener[]\n  } = {\n    characteristicvaluechanged: []\n  };\n\n  constructor(\n    uuid: BluetoothCharacteristicUUID,\n    properties: BluetoothCharacteristicProperties,\n    initialValue?: DataView,\n    randomValueFn?: () => DataView) {\n    this.uuid = uuid;\n    this.properties = properties;\n    this.value = initialValue;\n    this.initialValue = initialValue;\n    this.randomValueFn = randomValueFn;\n  }\n\n  readValue() {\n    return Promise.resolve(this.value);\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  changeValue(value: DataView) {\n    this.value = value;\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.characteristicvaluechanged.forEach(listener => {\n      listener(mockedEvent as Event);\n    });\n  }\n\n  clear() {\n    this.value = this.initialValue;\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FakeBluetoothRemoteGATTCharacteristic.html":{"url":"classes/FakeBluetoothRemoteGATTCharacteristic.html","title":"class - FakeBluetoothRemoteGATTCharacteristic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FakeBluetoothRemoteGATTCharacteristic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                initialValue\n                            \n                            \n                                    Private\n                                listeners\n                            \n                            \n                                properties\n                            \n                            \n                                    Readonly\n                                randomValueFn\n                            \n                            \n                                service\n                            \n                            \n                                uuid\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEventListener\n                            \n                            \n                                changeValue\n                            \n                            \n                                clear\n                            \n                            \n                                readValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uuid: BluetoothCharacteristicUUID, properties: BluetoothCharacteristicProperties, initialValue?: DataView, randomValueFn?: () => void)\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:111\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uuid\n                                                  \n                                                        \n                                                                    BluetoothCharacteristicUUID\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                    BluetoothCharacteristicProperties\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        initialValue\n                                                  \n                                                        \n                                                                    DataView\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        randomValueFn\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            initialValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DataView\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            listeners\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : {\n    characteristicvaluechanged: []\n  }\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:107\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            properties\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicProperties\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:104\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            randomValueFn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:106\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            service\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FakeBluetoothRemoteGATTService\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:102\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uuid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:101\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DataView\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:103\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addEventListener\n                        \n                        \n                    \n                \n            \n            \n                \naddEventListener(type: string, listener: EventListener)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                            EventListener\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changeValue\n                        \n                        \n                    \n                \n            \n            \n                \nchangeValue(value: DataView)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            DataView\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            readValue\n                        \n                        \n                    \n                \n            \n            \n                \nreadValue()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class FakeBluetoothDevice {\n  gatt: BluetoothRemoteGATTServer;\n  private listeners: {\n    [key in 'gattserverconnected' | 'gattserverdisconnected']: EventListener[]\n  } = {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  };\n\n  constructor(public id: string, public name: string) {\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  connect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  disconnect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  clear() {\n    this.id = undefined;\n    this.name = undefined;\n    this.listeners = {\n      gattserverconnected: [],\n      gattserverdisconnected: []\n    };\n  }\n}\n\nexport class FakeBluetoothRemoteGATTServer {\n  connected = false;\n\n  constructor(public device, public services: { [uuid: string]: FakeBluetoothRemoteGATTService } = {}) {\n    device.gatt = this;\n  }\n\n  connect() {\n    this.connected = true;\n    this.device.connect();\n    return Promise.resolve(this);\n  }\n\n  getPrimaryService(uuid: BluetoothServiceUUID) {\n    return Promise.resolve(this.services[uuid]);\n  }\n\n  getPrimaryServices(uuids: BluetoothServiceUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.services)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.services[uuid])\n    );\n  }\n\n  disconnect(callbackFn?: () => void) {\n    this.device.disconnect();\n    this.connected = false;\n    if (callbackFn) {\n      callbackFn();\n    }\n  }\n}\n\nexport class FakeBluetoothRemoteGATTService {\n  constructor(\n    public uuid,\n    public device,\n    public characteristics: {[uuid: string]: FakeBluetoothRemoteGATTCharacteristic}) {\n    Object.keys(characteristics).forEach(characteristicUuid => this.characteristics[characteristicUuid].service = this);\n  }\n\n  getCharacteristic(uuid: BluetoothCharacteristicUUID) {\n    return Promise.resolve(this.characteristics[uuid]);\n  }\n\n  getCharacteristics(uuids: BluetoothCharacteristicUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.characteristics)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.characteristics[uuid])\n    );\n  }\n}\n\nexport class FakeBluetoothRemoteGATTCharacteristic {\n  uuid: BluetoothCharacteristicUUID;\n  service: FakeBluetoothRemoteGATTService;\n  value: DataView;\n  properties: BluetoothCharacteristicProperties;\n  private readonly initialValue: DataView;\n  readonly randomValueFn: () => DataView;\n  private listeners: {\n    [key in 'characteristicvaluechanged']: EventListener[]\n  } = {\n    characteristicvaluechanged: []\n  };\n\n  constructor(\n    uuid: BluetoothCharacteristicUUID,\n    properties: BluetoothCharacteristicProperties,\n    initialValue?: DataView,\n    randomValueFn?: () => DataView) {\n    this.uuid = uuid;\n    this.properties = properties;\n    this.value = initialValue;\n    this.initialValue = initialValue;\n    this.randomValueFn = randomValueFn;\n  }\n\n  readValue() {\n    return Promise.resolve(this.value);\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  changeValue(value: DataView) {\n    this.value = value;\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.characteristicvaluechanged.forEach(listener => {\n      listener(mockedEvent as Event);\n    });\n  }\n\n  clear() {\n    this.value = this.initialValue;\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FakeBluetoothRemoteGATTServer.html":{"url":"classes/FakeBluetoothRemoteGATTServer.html","title":"class - FakeBluetoothRemoteGATTServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FakeBluetoothRemoteGATTServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                connected\n                            \n                            \n                                    Public\n                                device\n                            \n                            \n                                    Public\n                                services\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                connect\n                            \n                            \n                                disconnect\n                            \n                            \n                                getPrimaryService\n                            \n                            \n                                getPrimaryServices\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(device, services: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        device\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        services\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            connected\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            device\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            services\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:48\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            connect\n                        \n                        \n                    \n                \n            \n            \n                \nconnect()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect(callbackFn?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callbackFn\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPrimaryService\n                        \n                        \n                    \n                \n            \n            \n                \ngetPrimaryService(uuid: BluetoothServiceUUID)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                            BluetoothServiceUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPrimaryServices\n                        \n                        \n                    \n                \n            \n            \n                \ngetPrimaryServices(uuids: BluetoothServiceUUID[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuids\n                                    \n                                            BluetoothServiceUUID[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class FakeBluetoothDevice {\n  gatt: BluetoothRemoteGATTServer;\n  private listeners: {\n    [key in 'gattserverconnected' | 'gattserverdisconnected']: EventListener[]\n  } = {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  };\n\n  constructor(public id: string, public name: string) {\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  connect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  disconnect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  clear() {\n    this.id = undefined;\n    this.name = undefined;\n    this.listeners = {\n      gattserverconnected: [],\n      gattserverdisconnected: []\n    };\n  }\n}\n\nexport class FakeBluetoothRemoteGATTServer {\n  connected = false;\n\n  constructor(public device, public services: { [uuid: string]: FakeBluetoothRemoteGATTService } = {}) {\n    device.gatt = this;\n  }\n\n  connect() {\n    this.connected = true;\n    this.device.connect();\n    return Promise.resolve(this);\n  }\n\n  getPrimaryService(uuid: BluetoothServiceUUID) {\n    return Promise.resolve(this.services[uuid]);\n  }\n\n  getPrimaryServices(uuids: BluetoothServiceUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.services)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.services[uuid])\n    );\n  }\n\n  disconnect(callbackFn?: () => void) {\n    this.device.disconnect();\n    this.connected = false;\n    if (callbackFn) {\n      callbackFn();\n    }\n  }\n}\n\nexport class FakeBluetoothRemoteGATTService {\n  constructor(\n    public uuid,\n    public device,\n    public characteristics: {[uuid: string]: FakeBluetoothRemoteGATTCharacteristic}) {\n    Object.keys(characteristics).forEach(characteristicUuid => this.characteristics[characteristicUuid].service = this);\n  }\n\n  getCharacteristic(uuid: BluetoothCharacteristicUUID) {\n    return Promise.resolve(this.characteristics[uuid]);\n  }\n\n  getCharacteristics(uuids: BluetoothCharacteristicUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.characteristics)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.characteristics[uuid])\n    );\n  }\n}\n\nexport class FakeBluetoothRemoteGATTCharacteristic {\n  uuid: BluetoothCharacteristicUUID;\n  service: FakeBluetoothRemoteGATTService;\n  value: DataView;\n  properties: BluetoothCharacteristicProperties;\n  private readonly initialValue: DataView;\n  readonly randomValueFn: () => DataView;\n  private listeners: {\n    [key in 'characteristicvaluechanged']: EventListener[]\n  } = {\n    characteristicvaluechanged: []\n  };\n\n  constructor(\n    uuid: BluetoothCharacteristicUUID,\n    properties: BluetoothCharacteristicProperties,\n    initialValue?: DataView,\n    randomValueFn?: () => DataView) {\n    this.uuid = uuid;\n    this.properties = properties;\n    this.value = initialValue;\n    this.initialValue = initialValue;\n    this.randomValueFn = randomValueFn;\n  }\n\n  readValue() {\n    return Promise.resolve(this.value);\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  changeValue(value: DataView) {\n    this.value = value;\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.characteristicvaluechanged.forEach(listener => {\n      listener(mockedEvent as Event);\n    });\n  }\n\n  clear() {\n    this.value = this.initialValue;\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FakeBluetoothRemoteGATTService.html":{"url":"classes/FakeBluetoothRemoteGATTService.html","title":"class - FakeBluetoothRemoteGATTService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FakeBluetoothRemoteGATTService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                characteristics\n                            \n                            \n                                    Public\n                                device\n                            \n                            \n                                    Public\n                                uuid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCharacteristic\n                            \n                            \n                                getCharacteristics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uuid, device, characteristics: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:79\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uuid\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        device\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        characteristics\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            characteristics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            device\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uuid\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:81\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCharacteristic\n                        \n                        \n                    \n                \n            \n            \n                \ngetCharacteristic(uuid: BluetoothCharacteristicUUID)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                            BluetoothCharacteristicUUID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCharacteristics\n                        \n                        \n                    \n                \n            \n            \n                \ngetCharacteristics(uuids: BluetoothCharacteristicUUID[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuids\n                                    \n                                            BluetoothCharacteristicUUID[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class FakeBluetoothDevice {\n  gatt: BluetoothRemoteGATTServer;\n  private listeners: {\n    [key in 'gattserverconnected' | 'gattserverdisconnected']: EventListener[]\n  } = {\n    gattserverconnected: [],\n    gattserverdisconnected: []\n  };\n\n  constructor(public id: string, public name: string) {\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  connect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  disconnect() {\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent as Event));\n  }\n\n  clear() {\n    this.id = undefined;\n    this.name = undefined;\n    this.listeners = {\n      gattserverconnected: [],\n      gattserverdisconnected: []\n    };\n  }\n}\n\nexport class FakeBluetoothRemoteGATTServer {\n  connected = false;\n\n  constructor(public device, public services: { [uuid: string]: FakeBluetoothRemoteGATTService } = {}) {\n    device.gatt = this;\n  }\n\n  connect() {\n    this.connected = true;\n    this.device.connect();\n    return Promise.resolve(this);\n  }\n\n  getPrimaryService(uuid: BluetoothServiceUUID) {\n    return Promise.resolve(this.services[uuid]);\n  }\n\n  getPrimaryServices(uuids: BluetoothServiceUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.services)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.services[uuid])\n    );\n  }\n\n  disconnect(callbackFn?: () => void) {\n    this.device.disconnect();\n    this.connected = false;\n    if (callbackFn) {\n      callbackFn();\n    }\n  }\n}\n\nexport class FakeBluetoothRemoteGATTService {\n  constructor(\n    public uuid,\n    public device,\n    public characteristics: {[uuid: string]: FakeBluetoothRemoteGATTCharacteristic}) {\n    Object.keys(characteristics).forEach(characteristicUuid => this.characteristics[characteristicUuid].service = this);\n  }\n\n  getCharacteristic(uuid: BluetoothCharacteristicUUID) {\n    return Promise.resolve(this.characteristics[uuid]);\n  }\n\n  getCharacteristics(uuids: BluetoothCharacteristicUUID[]) {\n    return Promise.resolve(\n      Object.keys(this.characteristics)\n        .filter(uuid => uuids.includes(uuid))\n        .map(uuid => this.characteristics[uuid])\n    );\n  }\n}\n\nexport class FakeBluetoothRemoteGATTCharacteristic {\n  uuid: BluetoothCharacteristicUUID;\n  service: FakeBluetoothRemoteGATTService;\n  value: DataView;\n  properties: BluetoothCharacteristicProperties;\n  private readonly initialValue: DataView;\n  readonly randomValueFn: () => DataView;\n  private listeners: {\n    [key in 'characteristicvaluechanged']: EventListener[]\n  } = {\n    characteristicvaluechanged: []\n  };\n\n  constructor(\n    uuid: BluetoothCharacteristicUUID,\n    properties: BluetoothCharacteristicProperties,\n    initialValue?: DataView,\n    randomValueFn?: () => DataView) {\n    this.uuid = uuid;\n    this.properties = properties;\n    this.value = initialValue;\n    this.initialValue = initialValue;\n    this.randomValueFn = randomValueFn;\n  }\n\n  readValue() {\n    return Promise.resolve(this.value);\n  }\n\n  addEventListener(type: string, listener: EventListener) {\n    this.listeners[type] = [\n      ...this.listeners[type],\n      listener\n    ];\n  }\n\n  changeValue(value: DataView) {\n    this.value = value;\n    const mockedEvent = {target: this} as unknown;\n    this.listeners.characteristicvaluechanged.forEach(listener => {\n      listener(mockedEvent as Event);\n    });\n  }\n\n  clear() {\n    this.value = this.initialValue;\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HumidityComponent.html":{"url":"components/HumidityComponent.html","title":"component - HumidityComponent","body":"\n                   \n\n\n\n\n\n  Components\n  HumidityComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/thingy52/humidity.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-humidity\n            \n\n\n            \n                styles\n                \n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }\n            \n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                characteristicUUID\n                            \n                            \n                                chart\n                            \n                            \n                                chartRef\n                            \n                            \n                                    Public\n                                dashboardService\n                            \n                            \n                                series\n                            \n                            \n                                    Static\n                                serviceUUID\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                streamSubscription\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                hasError\n                            \n                            \n                                initChart\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/thingy52/humidity.component.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initChart\n                        \n                        \n                    \n                \n            \n            \n                \ninitChart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateValue\n                        \n                        \n                    \n                \n            \n            \n                \nupdateValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/humidity.component.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            characteristicUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680203-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SmoothieChart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chartRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('chart', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dashboardService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TimeSeries\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            serviceUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothServiceUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680200-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            streamSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/humidity.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/thingy52/humidity.component.ts:33\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\nimport { SmoothieChart, TimeSeries } from 'smoothie';\nimport { DashboardService } from '../dashboard/dashboard.service';\n\n\n@Component({\n  selector: 'ble-humidity',\n  template: `\n    \n  `,\n  styles: [`\n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }`],\n})\nexport class HumidityComponent implements OnInit, OnDestroy {\n  static serviceUUID: BluetoothServiceUUID = 'ef680200-9b35-4933-9b10-52ffa9740042';\n  static characteristicUUID: BluetoothCharacteristicUUID = 'ef680203-9b35-4933-9b10-52ffa9740042';\n\n  series: TimeSeries;\n  chart: SmoothieChart;\n  valuesSubscription: Subscription;\n  streamSubscription: Subscription;\n\n  @ViewChild('chart', {static: true})\n  chartRef: ElementRef;\n\n  get device() {\n    return this.dashboardService.device();\n  }\n\n  constructor(\n    public dashboardService: DashboardService,\n    public snackBar: MatSnackBar) {}\n\n  ngOnInit() {\n    this.initChart();\n\n    this.streamSubscription = this.dashboardService.streamsBy(\n      HumidityComponent.serviceUUID,\n      HumidityComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  initChart() {\n    this.series = new window.TimeSeries() as TimeSeries;\n    const canvas = this.chartRef.nativeElement;\n    // tslint:disable-next-line: max-line-length\n    this.chart = new window.SmoothieChart({ interpolation: 'step', grid: { fillStyle: '#ffffff', strokeStyle: 'rgba(119,119,119,0.18)', borderVisible: false }, labels: { fillStyle: '#000000', fontSize: 17 }, tooltip: true });\n    this.chart.addTimeSeries(this.series, { lineWidth: 1, strokeStyle: '#ff0000', fillStyle: 'rgba(255,161,161,0.30)' });\n    this.chart.streamTo(canvas);\n    this.chart.stop();\n  }\n\n  requestValue() {\n    this.valuesSubscription = this.dashboardService.valuesBy(\n      HumidityComponent.serviceUUID,\n      HumidityComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  updateValue(value: number) {\n    console.log('Reading humidity %d', value);\n    this.series.append(Date.now(), value);\n    this.chart.start();\n  }\n\n  disconnect() {\n    this.series.clear();\n    this.chart.stop();\n    this.dashboardService?.disconnectDevice();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n    this.streamSubscription?.unsubscribe();\n  }\n}\n\n    \n\n\n    \n            \n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HumidityComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    error\n                                \n                                \n                                    log\n                                \n                                \n                                    warn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            error\n                        \n                        \n                    \n                \n            \n            \n                \nerror(args: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            log\n                        \n                        \n                    \n                \n            \n            \n                \nlog(args: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \nwarn(args: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Logger {\n  log(args: string[]): void;\n  error(args: string[]): void;\n  warn(args: string[]): void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConsoleLoggerService implements Logger {\n  log(...args) {\n    console.log.apply(console, args);\n  }\n  error(...args) {\n    console.error.apply(console, args);\n  }\n  warn(...args) {\n    console.warn.apply(console, args);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoLoggerService implements Logger {\n  log(...args) {}\n  error(...args) {}\n  warn(...args) {}\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoLoggerService.html":{"url":"injectables/NoLoggerService.html","title":"injectable - NoLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NoLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            error\n                        \n                        \n                    \n                \n            \n            \n                \nerror(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            log\n                        \n                        \n                    \n                \n            \n            \n                \nlog(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \nwarn(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Logger {\n  log(args: string[]): void;\n  error(args: string[]): void;\n  warn(args: string[]): void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConsoleLoggerService implements Logger {\n  log(...args) {\n    console.log.apply(console, args);\n  }\n  error(...args) {\n    console.error.apply(console, args);\n  }\n  warn(...args) {\n    console.warn.apply(console, args);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoLoggerService implements Logger {\n  log(...args) {}\n  error(...args) {}\n  warn(...args) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ServerWebBluetooth.html":{"url":"injectables/ServerWebBluetooth.html","title":"injectable - ServerWebBluetooth","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ServerWebBluetooth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/platform/server.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                instance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            instance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    instance()\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/platform/server.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ServerWebBluetooth {\n  static instance() {\n    // mocked object for now\n    return {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StepCounterComponent.html":{"url":"components/StepCounterComponent.html","title":"component - StepCounterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  StepCounterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/thingy52/stepcounter.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-stepcounter\n            \n\n\n            \n                styles\n                \n  :host {\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    text-align: center;\n  }\n  span {\n    font-size: 5em;\n    position: absolute;\n    top: 111px;\n    width: 100px;\n    display: block;\n    text-align: center;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 80px;\n    font-size: 38px;\n  }\n            \n\n            \n                template\n                {{ value || \"000\" }}\ndirections_walk\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                characteristicUUID\n                            \n                            \n                                    Public\n                                dashboardService\n                            \n                            \n                                    Static\n                                serviceUUID\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                streamSubscription\n                            \n                            \n                                value\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                hasError\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/thingy52/stepcounter.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateValue\n                        \n                        \n                    \n                \n            \n            \n                \nupdateValue(value: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/stepcounter.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            characteristicUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680405-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dashboardService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            serviceUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothServiceUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680400-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            streamSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/stepcounter.component.ts:38\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/thingy52/stepcounter.component.ts:42\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\nimport { DashboardService } from '../dashboard/dashboard.service';\n\n\n@Component({\n  selector: 'ble-stepcounter',\n  template: `\n  {{ value || \"000\" }}\n  directions_walk\n  `,\n  styles: [`\n  :host {\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    text-align: center;\n  }\n  span {\n    font-size: 5em;\n    position: absolute;\n    top: 111px;\n    width: 100px;\n    display: block;\n    text-align: center;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 80px;\n    font-size: 38px;\n  }`],\n})\nexport class StepCounterComponent implements OnInit, OnDestroy {\n  static serviceUUID: BluetoothServiceUUID = 'ef680400-9b35-4933-9b10-52ffa9740042';\n  static characteristicUUID: BluetoothCharacteristicUUID = 'ef680405-9b35-4933-9b10-52ffa9740042';\n\n  valuesSubscription: Subscription;\n  streamSubscription: Subscription;\n  value = 0;\n\n  get device() {\n    return this.dashboardService.device();\n  }\n\n  constructor(\n    public dashboardService: DashboardService,\n    public snackBar: MatSnackBar) {}\n\n  ngOnInit() {\n    this.streamSubscription = this.dashboardService.streamsBy(\n      StepCounterComponent.serviceUUID,\n      StepCounterComponent.characteristicUUID)\n        .subscribe((value: { time: number, count: number }) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  requestValue() {\n    this.valuesSubscription = this.dashboardService.valuesBy(\n      StepCounterComponent.serviceUUID,\n      StepCounterComponent.characteristicUUID)\n        .subscribe((value: { time: number, count: number }) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  updateValue(value: { time: number, count: number }) {\n    console.log('Reading step counter %d', value.count);\n    this.value = value.count;\n  }\n\n  disconnect() {\n    this.dashboardService?.disconnectDevice();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n    this.streamSubscription?.unsubscribe();\n  }\n}\n\n\n\n    \n\n\n    \n            \n  :host {\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    text-align: center;\n  }\n  span {\n    font-size: 5em;\n    position: absolute;\n    top: 111px;\n    width: 100px;\n    display: block;\n    text-align: center;\n  }\n  mat-icon {\n    position: absolute;\n    bottom: 80px;\n    font-size: 38px;\n  }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ value || \"000\" }}directions_walk'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StepCounterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TemperatureComponent.html":{"url":"components/TemperatureComponent.html","title":"component - TemperatureComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TemperatureComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/thingy52/temperature.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ble-temperature\n            \n\n\n            \n                styles\n                \n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }\n            \n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                characteristicUUID\n                            \n                            \n                                chart\n                            \n                            \n                                chartRef\n                            \n                            \n                                    Public\n                                dashboardService\n                            \n                            \n                                series\n                            \n                            \n                                    Static\n                                serviceUUID\n                            \n                            \n                                    Public\n                                snackBar\n                            \n                            \n                                streamSubscription\n                            \n                            \n                                valuesSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                disconnect\n                            \n                            \n                                hasError\n                            \n                            \n                                initChart\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                requestValue\n                            \n                            \n                                updateValue\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    device\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/thingy52/temperature.component.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            disconnect\n                        \n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError(error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initChart\n                        \n                        \n                    \n                \n            \n            \n                \ninitChart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requestValue\n                        \n                        \n                    \n                \n            \n            \n                \nrequestValue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateValue\n                        \n                        \n                    \n                \n            \n            \n                \nupdateValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/thingy52/temperature.component.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            characteristicUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothCharacteristicUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680201-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SmoothieChart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chartRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('chart', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dashboardService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TimeSeries\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            serviceUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BluetoothServiceUUID\n\n                        \n                    \n                    \n                        \n                            Default value : 'ef680200-9b35-4933-9b10-52ffa9740042'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snackBar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MatSnackBar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            streamSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/thingy52/temperature.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        device\n                    \n                \n\n                \n                    \n                        getdevice()\n                    \n                \n                            \n                                \n                                    Defined in src/app/thingy52/temperature.component.ts:33\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\nimport { SmoothieChart, TimeSeries } from 'smoothie';\nimport { DashboardService } from '../dashboard/dashboard.service';\n\n\n@Component({\n  selector: 'ble-temperature',\n  template: `\n    \n  `,\n  styles: [`\n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }`],\n})\nexport class TemperatureComponent implements OnInit, OnDestroy {\n  static serviceUUID: BluetoothServiceUUID = 'ef680200-9b35-4933-9b10-52ffa9740042';\n  static characteristicUUID: BluetoothCharacteristicUUID = 'ef680201-9b35-4933-9b10-52ffa9740042';\n\n  series: TimeSeries;\n  chart: SmoothieChart;\n  valuesSubscription: Subscription;\n  streamSubscription: Subscription;\n\n  @ViewChild('chart', {static: true})\n  chartRef: ElementRef;\n\n  get device() {\n    return this.dashboardService.device();\n  }\n\n  constructor(\n    public dashboardService: DashboardService,\n    public snackBar: MatSnackBar) {}\n\n  ngOnInit() {\n    this.initChart();\n\n    this.streamSubscription = this.dashboardService.streamsBy(\n      TemperatureComponent.serviceUUID,\n      TemperatureComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  initChart() {\n    this.series = new window.TimeSeries() as TimeSeries;\n    const canvas = this.chartRef.nativeElement;\n    this.chart = new window.SmoothieChart({\n      interpolation: 'step',\n      grid: {\n        fillStyle: '#ffffff',\n        strokeStyle: 'rgba(119,119,119,0.18)',\n        borderVisible: false\n      },\n      labels: {\n        fillStyle: '#000000',\n        fontSize: 17\n      },\n      tooltip: true\n    });\n    this.chart.addTimeSeries(this.series, { lineWidth: 1, strokeStyle: '#ff0000', fillStyle: 'rgba(255,161,161,0.30)' });\n    this.chart.streamTo(canvas);\n    this.chart.stop();\n  }\n\n  requestValue() {\n    this.valuesSubscription = this.dashboardService.valuesBy(\n      TemperatureComponent.serviceUUID,\n      TemperatureComponent.characteristicUUID)\n        .subscribe((value: number) => {\n          this.updateValue(value);\n        }, error => this.hasError(error));\n  }\n\n  updateValue(value: number) {\n    console.log('Reading temperature %d', value);\n    this.series.append(Date.now(), value);\n    this.chart.start();\n  }\n\n  disconnect() {\n    this.series.clear();\n    this.chart.stop();\n    this.dashboardService?.disconnectDevice();\n    this.valuesSubscription?.unsubscribe();\n  }\n\n  hasError(error: string) {\n    this.snackBar.open(error, 'Close');\n  }\n\n  ngOnDestroy() {\n    this.valuesSubscription?.unsubscribe();\n    this.streamSubscription?.unsubscribe();\n  }\n}\n\n\n\n    \n\n\n    \n            \n  :host {\n    display: block;\n  }\n  canvas {\n    margin-left: -16px;\n  }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ble-root'},{'name': 'BatteryLevelComponent', 'selector': 'ble-battery-level'},{'name': 'DashboardComponent', 'selector': 'ble-dashboard'},{'name': 'HumidityComponent', 'selector': 'ble-humidity'},{'name': 'StepCounterComponent', 'selector': 'ble-stepcounter'},{'name': 'TemperatureComponent', 'selector': 'ble-temperature'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TemperatureComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WebBluetoothModule.html":{"url":"modules/WebBluetoothModule.html","title":"module - WebBluetoothModule","body":"\n                   \n\n\n\n\n    Modules\n    WebBluetoothModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: AWBOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                AWBOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders, InjectionToken, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BluetoothCore } from './bluetooth.service';\nimport { BrowserWebBluetooth } from './platform/browser';\n\nimport { ConsoleLoggerService, NoLoggerService } from './logger.service';\n\nexport interface AWBOptions {\n  enableTracing?: boolean;\n}\n\nexport function browserWebBluetooth() {\n  return new BrowserWebBluetooth();\n}\n\nexport function consoleLoggerServiceConfig(options: AWBOptions) {\n  if (options && options.enableTracing) {\n    return new ConsoleLoggerService();\n  } else {\n    return new NoLoggerService();\n  }\n}\nexport function makeMeTokenInjector() {\n  return new InjectionToken('AWBOptions');\n}\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class WebBluetoothModule {\n  static forRoot(options: AWBOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: WebBluetoothModule,\n      providers: [\n        BluetoothCore,\n        {\n          provide: BrowserWebBluetooth,\n          useFactory: browserWebBluetooth\n        },\n        {\n          provide: makeMeTokenInjector,\n          useValue: options\n        },\n        {\n          provide: ConsoleLoggerService,\n          useFactory: consoleLoggerServiceConfig,\n          deps: [makeMeTokenInjector]\n        }\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                e2e/src/app.po.ts\n            \n            class\n            AppPage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n            \n            interface\n            AWBOptions\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n            \n            function\n            browserWebBluetooth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n            \n            function\n            consoleLoggerServiceConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n            \n            function\n            makeMeTokenInjector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.service.ts\n            \n            injectable\n            BluetoothCore\n            \n                64 %\n                (22/34)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/lang/uuids/ti-sensortag2.ts\n            \n            variable\n            TI_SENSORAG_SERVICES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/lang/uuids/ti-sensortag2.ts\n            \n            variable\n            TiTag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n            \n            injectable\n            ConsoleLoggerService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n            \n            injectable\n            NoLoggerService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/logger.service.ts\n            \n            interface\n            Logger\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/platform/browser.ts\n            \n            injectable\n            BrowserWebBluetooth\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/platform/server.ts\n            \n            injectable\n            ServerWebBluetooth\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n            \n            class\n            FakeBluetoothDevice\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n            \n            class\n            FakeBluetoothRemoteGATTCharacteristic\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n            \n            class\n            FakeBluetoothRemoteGATTServer\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                projects/manekinekko/angular-web-bluetooth/src/lib/test.utils.ts\n            \n            class\n            FakeBluetoothRemoteGATTService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            bleCore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            fakeBleCore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.module.ts\n            \n            variable\n            PROVIDERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/ble.service.ts\n            \n            injectable\n            BleService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/dashboard/dashboard.component.ts\n            \n            component\n            DashboardComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/dashboard/dashboard.service.ts\n            \n            injectable\n            DashboardService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            fakeBrowserWebBluetooth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            fakeDevice\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            fakeGATTServer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            gattServices\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            instances\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/fake.utils.ts\n            \n            variable\n            start\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/thingy52/battery-level.component.ts\n            \n            component\n            BatteryLevelComponent\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/app/thingy52/humidity.component.ts\n            \n            component\n            HumidityComponent\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/app/thingy52/stepcounter.component.ts\n            \n            component\n            StepCounterComponent\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/app/thingy52/temperature.component.ts\n            \n            component\n            TemperatureComponent\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~11.2.0\n        \n            @angular/cdk : ^11.2.0\n        \n            @angular/common : ~11.2.0\n        \n            @angular/compiler : ~11.2.0\n        \n            @angular/core : ~11.2.0\n        \n            @angular/forms : ~11.2.0\n        \n            @angular/material : ^11.2.0\n        \n            @angular/platform-browser : ~11.2.0\n        \n            @angular/platform-browser-dynamic : ~11.2.0\n        \n            @angular/router : ~11.2.0\n        \n            @release-it/conventional-changelog : ^1.1.4\n        \n            @types/web-bluetooth : 0.0.6\n        \n            rxjs : ~6.6.3\n        \n            smoothie : ^1.35.0\n        \n            tslib : ^2.0.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            browserWebBluetooth   (projects/.../bluetooth.module.ts)\n                        \n                        \n                            consoleLoggerServiceConfig   (projects/.../bluetooth.module.ts)\n                        \n                        \n                            makeMeTokenInjector   (projects/.../bluetooth.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            browserWebBluetooth\n                        \n                        \n                    \n                \n            \n            \n                \nbrowserWebBluetooth()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            consoleLoggerServiceConfig\n                        \n                        \n                    \n                \n            \n            \n                \nconsoleLoggerServiceConfig(options)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            makeMeTokenInjector\n                        \n                        \n                    \n                \n            \n            \n                \nmakeMeTokenInjector()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\nThe missing Web Bluetooth module for Angular\n\n\nInstall\nnpm install -S @manekinekko/angular-web-bluetooth @types/web-bluetooth\nNote: Make also sure the @types/web-bluetooth is installed correctly in your node_modules.\n\nGetting started\n1) import the WebBluetoothModule module\nimport { NgModule } from '@angular/core';\nimport { WebBluetoothModule } from '@manekinekko/angular-web-bluetooth';\n\n@NgModule({\n  imports: [\n    //...,\n    WebBluetoothModule.forRoot({\n      enableTracing: true // or false, this will enable logs in the browser's console\n    })\n  ]\n  //...\n})\nexport class AppModule {}2.a) use it in your service/component (the easiest way)\nHere is an annotated example using the BluetoothCore service:\nimport { Injectable } from '@angular/core';\nimport { BluetoothCore } from '@manekinekko/angular-web-bluetooth';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatteryLevelService {\n\n  constructor(public readonly ble: BluetoothCore) {}\n\n  getDevice() {\n    // call this method to get the connected device\n    return this.ble.getDevice$();\n  }\n\n  stream() {\n    // call this method to get a stream of values emitted by the device for a given characteristic\n    return this.ble.streamValues$().pipe(\n      map((value: DataView) => value.getInt8(0))\n    );\n  }\n\n  disconnectDevice() {\n    // call this method to disconnect from the device. This method will also stop clear all subscribed notifications\n    this.ble.disconnectDevice();\n  }\n\n  value() {\n    console.log('Getting Battery level...');\n\n    return this.ble\n      .value$({\n        service: 'battery_service',\n        characteristic: 'battery_level'\n      });\n  }\n\n}2.b) use it in your service/component (the advanced way)\nHere is an annotated example using the BluetoothCore service:\nimport { Injectable } from '@angular/core';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { BluetoothCore } from '@manekinekko/angular-web-bluetooth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatteryLevelService {\n  static GATT_CHARACTERISTIC_BATTERY_LEVEL = 'battery_level';\n  static GATT_PRIMARY_SERVICE = 'battery_service';\n\n  constructor(public ble: BluetoothCore) {}\n\n  getDevice() {\n    // call this method to get the connected device\n    return this.ble.getDevice$();\n  }\n\n  stream() {\n    // call this method to get a stream of values emitted by the device\n    return this.ble.streamValues$().pipe(map((value: DataView) => value.getUint8(0)));\n  }\n\n  disconnectDevice() {\n    this.ble.disconnectDevice();\n  }\n\n  /**\n   * Get Battery Level GATT Characteristic value.\n   * This logic is specific to this service, this is why we can't abstract it elsewhere.\n   * The developer is free to provide any service, and characteristics they want.\n   *\n   * @return Emites the value of the requested service read from the device\n   */\n  value() {\n    console.log('Getting Battery level...');\n\n    return this.ble\n\n        // 1) call the discover method will trigger the discovery process (by the browser)\n        .discover$({\n          acceptAllDevices: true,\n          optionalServices: [BatteryLevelService.GATT_PRIMARY_SERVICE]\n        })\n        .pipe(\n\n          // 2) get that service\n          mergeMap((gatt: BluetoothRemoteGATTServer) => {\n            return this.ble.getPrimaryService$(gatt, BatteryLevelService.GATT_PRIMARY_SERVICE);\n          }),\n\n          // 3) get a specific characteristic on that service\n          mergeMap((primaryService: BluetoothRemoteGATTService) => {\n            return this.ble.getCharacteristic$(primaryService, BatteryLevelService.GATT_CHARACTERISTIC_BATTERY_LEVEL);\n          }),\n\n          // 4) ask for the value of that characteristic (will return a DataView)\n          mergeMap((characteristic: BluetoothRemoteGATTCharacteristic) => {\n            return this.ble.readValue$(characteristic);\n          }),\n\n          // 5) on that DataView, get the right value\n          map((value: DataView) => value.getUint8(0))\n        )\n  }\n}API documentation\nThe API documentation can be found here:  https://manekinekko.github.io/angular-web-bluetooth/\nNeed a starter?\n\n\nThis project serves also as a starter. Run the following command:\nnpm startBlog post\nCheckout my full blog post on dev.to about how to use this package in your app.\nHave a PR?\nAll contributions are welcome. Here are few open issues that I need help with ;)\nLicense\nThe MIT License (MIT) Copyright (c) 2017 - Wassim CHEGHAM\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT) Copyright (c) 2017 - Wassim CHEGHAM\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WebBluetoothModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nBatteryLevelComponent\n\nBatteryLevelComponent\n\nAppModule -->\n\nBatteryLevelComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nHumidityComponent\n\nHumidityComponent\n\nAppModule -->\n\nHumidityComponent->AppModule\n\n\n\n\n\nStepCounterComponent\n\nStepCounterComponent\n\nAppModule -->\n\nStepCounterComponent->AppModule\n\n\n\n\n\nTemperatureComponent\n\nTemperatureComponent\n\nAppModule -->\n\nTemperatureComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nWebBluetoothModule\n\nWebBluetoothModule\n\nAppModule -->\n\nWebBluetoothModule->AppModule\n\n\n\n\n\nDashboardService\n\nDashboardService\n\nAppModule -->\n\nDashboardService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Components\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DetailedValue   (projects/.../bluetooth.service.ts)\n                        \n                        \n                            ReadValueOptions   (projects/.../bluetooth.service.ts)\n                        \n                        \n                            ServiceOptions   (src/.../ble.service.ts)\n                        \n                        \n                            ServiceOptions   (src/.../dashboard.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/manekinekko/angular-web-bluetooth/src/lib/bluetooth.service.ts\n    \n    \n        \n            \n                \n                    \n                    DetailedValue\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReadValueOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/ble.service.ts\n    \n    \n        \n            \n                \n                    \n                    ServiceOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/dashboard/dashboard.service.ts\n    \n    \n        \n            \n                \n                    \n                    ServiceOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bleCore   (src/.../app.module.ts)\n                        \n                        \n                            config   (src/.../fake.utils.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            fakeBleCore   (src/.../app.module.ts)\n                        \n                        \n                            fakeBrowserWebBluetooth   (src/.../fake.utils.ts)\n                        \n                        \n                            fakeDevice   (src/.../fake.utils.ts)\n                        \n                        \n                            fakeGATTServer   (src/.../fake.utils.ts)\n                        \n                        \n                            gattServices   (src/.../fake.utils.ts)\n                        \n                        \n                            instances   (src/.../fake.utils.ts)\n                        \n                        \n                            PROVIDERS   (src/.../app.module.ts)\n                        \n                        \n                            start   (src/.../fake.utils.ts)\n                        \n                        \n                            TI_SENSORAG_SERVICES   (projects/.../ti-sensortag2.ts)\n                        \n                        \n                            TiTag   (projects/.../ti-sensortag2.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bleCore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (b: BrowserWebBluetooth, l: ConsoleLoggerService) => new BluetoothCore(b, l)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeBleCore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (b: BrowserWebBluetooth, l: ConsoleLoggerService) => {\n  start().then();\n  return new BluetoothCore(fakeBrowserWebBluetooth as BrowserWebBluetooth, l);\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PROVIDERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: BluetoothCore,\n    useFactory: bleCore, // bleCore or fakeBleCore\n    deps: [BrowserWebBluetooth, ConsoleLoggerService]\n  },\n  DashboardService\n]\n                        \n                    \n\n\n            \n        \n\n    src/app/fake.utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  weather: {\n    uuid: 'ef680200-9b35-4933-9b10-52ffa9740042',\n    characteristics: [{\n      uuid: 'ef680201-9b35-4933-9b10-52ffa9740042',\n      randomValueFn: () => {\n        const dataView = new DataView(new ArrayBuffer(8));\n        dataView.setInt8(0, Math.floor(Math.random() * 100) + 10);\n        return dataView;\n      }\n    }, {\n      uuid: 'ef680203-9b35-4933-9b10-52ffa9740042',\n      randomValueFn: () => {\n        const dataView = new DataView(new ArrayBuffer(8));\n        dataView.setInt8(0, Math.floor(Math.random() * 100) + 10);\n        return dataView;\n      }\n    }]\n  },\n  stepCounter: {\n    uuid: 'ef680400-9b35-4933-9b10-52ffa9740042',\n    characteristics: [{\n      uuid: 'ef680405-9b35-4933-9b10-52ffa9740042',\n      randomValueFn: () => {\n        const dataView = new DataView(new ArrayBuffer(8));\n        dataView.setUint32(0, Math.floor(Math.random() * 100) + 10, true);\n        dataView.setUint32(4, Math.floor(Math.random() * 100) + 10, true);\n        return dataView;\n      }\n    }]\n  },\n  batteryLevel: {\n    uuid: '0000180f-0000-1000-8000-00805f9b34fb',\n    characteristics: [{\n      uuid: '00002a19-0000-1000-8000-00805f9b34fb',\n      randomValueFn: () => {\n        const dataView = new DataView(new ArrayBuffer(8));\n        dataView.setInt8(0, Math.floor(Math.random() * 100) + 10);\n        return dataView;\n      }\n    }]\n  }\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeBrowserWebBluetooth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     unknown\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  test: 'bob',\n  requestDevice: (options: RequestDeviceOptions) => Promise.resolve(fakeDevice),\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeDevice\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FakeBluetoothDevice('1', 'Fake Device')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeGATTServer\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FakeBluetoothRemoteGATTServer(fakeDevice, gattServices)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gattServices\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : instances.reduce((acc, elem) => {\n  return {\n    ...acc,\n    [elem.uuid]: elem.serviceInstance\n  };\n}, {})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            instances\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Object.keys(config).map(serviceName => {\n  const characteristicsInstances = config[serviceName].characteristics.reduce((acc, elem) => {\n    return {\n      ...acc,\n      [elem.uuid]: new FakeBluetoothRemoteGATTCharacteristic(\n        elem.uuid,\n        {notify: false} as BluetoothCharacteristicProperties,\n        elem.randomValueFn(),\n        elem.randomValueFn\n      )\n    };\n  }, {});\n\n  const serviceInstance = new FakeBluetoothRemoteGATTService(config[serviceName].uuid , fakeDevice, characteristicsInstances);\n\n  return {\n    name: serviceName,\n    uuid: config[serviceName].uuid,\n    serviceInstance,\n    characteristicsInstances,\n  };\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async () => {\n  const disconnectSubject = new Subject();\n\n  const generateFakeValues = () => {\n    timer(0, 2000)\n      .pipe(\n        takeUntil(disconnectSubject),\n        tap(_ => {\n          instances.forEach(({characteristicsInstances}) => {\n            Object.keys(characteristicsInstances)\n              .forEach(uuid => {\n                const random = characteristicsInstances[uuid].randomValueFn();\n                characteristicsInstances[uuid].changeValue(random);\n              });\n          });\n        })\n      )\n      .subscribe();\n  };\n\n  fakeDevice.addEventListener('gattserverconnected', generateFakeValues);\n  fakeDevice.addEventListener('gattserverdisconnected', () => disconnectSubject.next());\n\n  await fakeGATTServer.connect();\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n    projects/manekinekko/angular-web-bluetooth/src/lib/lang/uuids/ti-sensortag2.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TI_SENSORAG_SERVICES\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Object.keys(TiTag).map(key => TiTag[key].SERVICE)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TiTag\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n\n  DEVICE_INFORMATION : {\n    SERVICE :                 'f000180a-0451-4000-b000-000000000000',\n    SYSTEM_ID :               'f0002a23-0451-4000-b000-000000000000',\n    MODEL_NUMBER :            'f0002a24-0451-4000-b000-000000000000',\n    SERIAL_NUMBER :           'f0002a25-0451-4000-b000-000000000000',\n    FIRMWARE_REV :            'f0002a26-0451-4000-b000-000000000000',\n    HARDWARE_REV :            'f0002a27-0451-4000-b000-000000000000',\n    SOFTWARE_REV :            'f0002a28-0451-4000-b000-000000000000',\n    MANIFACTURER :            'f0002a29-0451-4000-b000-000000000000',\n    IEEE11073 :               'f0002a2a-0451-4000-b000-000000000000',\n    PNP_ID :                  'f0002a50-0451-4000-b000-000000000000'\n  },\n\n  BATTERY : {\n    SERVICE :                 'f000180f-0451-4000-b000-000000000000',\n    LEVEL :                   'f0002a19-0451-4000-b000-000000000000'\n  },\n\n  TEMPERATURE : {\n    SERVICE :                 'f000aa00-0451-4000-b000-000000000000',\n    DATA :                    'f000aa01-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa02-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa03-0451-4000-b000-000000000000'\n  },\n\n  HUMIDITY : {\n    SERVICE :                 'f000aa20-0451-4000-b000-000000000000',\n    DATA :                    'f000aa21-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa22-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa23-0451-4000-b000-000000000000'\n  },\n\n  BAROMETER : {\n    SERVICE :                 'f000aa40-0451-4000-b000-000000000000',\n    DATA :                    'f000aa41-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa42-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa44-0451-4000-b000-000000000000'\n  },\n\n  // service not available in model CC2650\n  // ACCELEROMETER : {\n  //   SERVICE :                 'f000aa10-0451-4000-b000-000000000000',\n  //   DATA :                    'f000aa11-0451-4000-b000-000000000000',\n  //   CONFIGURATION :           'f000aa12-0451-4000-b000-000000000000',\n  //   PERIOD :                  'f000aa13-0451-4000-b000-000000000000'\n  // },\n\n  // service not available in model CC2650\n  // MAGNETOMETER : {\n  //   SERVICE :                 'f000aa30-0451-4000-b000-000000000000',\n  //   DATA :                    'f000aa31-0451-4000-b000-000000000000',\n  //   CONFIGURATION :           'f000aa32-0451-4000-b000-000000000000',\n  //   PERIOD :                  'f000aa33-0451-4000-b000-000000000000'\n  // },\n\n  // service not available in model CC2650\n  // GYROSCOPE : {\n  //   SERVICE :                 'f000aa50-0451-4000-b000-000000000000',\n  //   DATA :                    'f000aa51-0451-4000-b000-000000000000',\n  //   CONFIGURATION :           'f000aa52-0451-4000-b000-000000000000',\n  //   PERIOD :                  'f000aa53-0451-4000-b000-000000000000'\n  // },\n\n  MOVEMENT : {\n    SERVICE :                 'f000aa80-0451-4000-b000-000000000000',\n    DATA :                    'f000aa81-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa82-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa83-0451-4000-b000-000000000000'\n  },\n\n  LIGHT : {\n    SERVICE :                 'f000aa70-0451-4000-b000-000000000000',\n    DATA :                    'f000aa71-0451-4000-b000-000000000000',\n    CONFIGURATION :           'f000aa72-0451-4000-b000-000000000000',\n    PERIOD :                  'f000aa73-0451-4000-b000-000000000000'\n  },\n\n  KEYPRESS : {\n    SERVICE :                 'f000ffe0-0451-4000-b000-000000000000',\n    STATE :                   'f000ffe1-0451-4000-b000-000000000000'\n  },\n\n  __REGISTER__ : {\n    SERVICE :                 'f000ac00-0451-4000-b000-000000000000',\n    DATA :                    'f000ac01-0451-4000-b000-000000000000',\n    ADDRESS :                 'f000ac02-0451-4000-b000-000000000000',\n    DEVICE_ID :               'f000ac03-0451-4000-b000-000000000000'\n  },\n\n  CONTROL : {\n    SERVICE :                 'f000ccc0-0451-4000-b000-000000000000',\n    CURRENT_USED_PARAMETERS : 'f000ccc1-0451-4000-b000-000000000000',\n    REQUEST_NEW_PARAMETERS :  'f000ccc2-0451-4000-b000-000000000000',\n    DISCONNECT_REQUEST :      'f000ccc3-0451-4000-b000-000000000000'\n  },\n\n  OAD : {\n    SERVICE :                 'f000ffc0-0451-4000-b000-000000000000',\n    IMAGE_NOTIFY :            'f000ffc1-0451-4000-b000-000000000000',\n    IMAGE_BLOCK_REQUEST :     'f000ffc2-0451-4000-b000-000000000000',\n    IMAGE_COUNT :             'f000ffc3-0451-4000-b000-000000000000',\n    IMAGE_STATUS :            'f000ffc4-0451-4000-b000-000000000000'\n  },\n\n  IO : {\n    SERVICE :                 'f000aa64-0451-4000-b000-000000000000',\n    DATA :                    'f000aa65-0451-4000-b000-000000000000',\n    CONFIG :                  'f000aa66-0451-4000-b000-000000000000'\n  }\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
